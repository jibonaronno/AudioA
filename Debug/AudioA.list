
AudioA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009378  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08009518  08009518  00019518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095c4  080095c4  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  080095c4  080095c4  000195c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095cc  080095cc  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095cc  080095cc  000195cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095d0  080095d0  000195d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  080095d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b2fc  2000015c  08009730  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b458  08009730  0002b458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015609  00000000  00000000  000201cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038bd  00000000  00000000  000357d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001318  00000000  00000000  00039098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e94  00000000  00000000  0003a3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a650  00000000  00000000  0003b244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001849c  00000000  00000000  00055894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ad32  00000000  00000000  0006dd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005498  00000000  00000000  00108a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0010defc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000015c 	.word	0x2000015c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009500 	.word	0x08009500

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000160 	.word	0x20000160
 80001dc:	08009500 	.word	0x08009500

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <kalman_filter>:
static int kalman_adc_int = 0;

uint8_t  trip1 = 0;

unsigned long kalman_filter(unsigned long ADC_Value)
{
 800058c:	b480      	push	{r7}
 800058e:	b087      	sub	sp, #28
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
    float Z_k;


    float kalman_adc;

    Z_k = ADC_Value;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	ee07 3a90 	vmov	s15, r3
 800059a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800059e:	edc7 7a05 	vstr	s15, [r7, #20]
    x_k1_k1 = kalman_adc_old;
 80005a2:	4b32      	ldr	r3, [pc, #200]	; (800066c <kalman_filter+0xe0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	613b      	str	r3, [r7, #16]

    x_k_k1 = x_k1_k1;
 80005a8:	693b      	ldr	r3, [r7, #16]
 80005aa:	60fb      	str	r3, [r7, #12]
    P_k_k1 = P_k1_k1 + Q;
 80005ac:	4b30      	ldr	r3, [pc, #192]	; (8000670 <kalman_filter+0xe4>)
 80005ae:	ed93 7a00 	vldr	s14, [r3]
 80005b2:	4b30      	ldr	r3, [pc, #192]	; (8000674 <kalman_filter+0xe8>)
 80005b4:	edd3 7a00 	vldr	s15, [r3]
 80005b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005bc:	4b2e      	ldr	r3, [pc, #184]	; (8000678 <kalman_filter+0xec>)
 80005be:	edc3 7a00 	vstr	s15, [r3]

    Kg = P_k_k1/(P_k_k1 + R);
 80005c2:	4b2d      	ldr	r3, [pc, #180]	; (8000678 <kalman_filter+0xec>)
 80005c4:	edd3 6a00 	vldr	s13, [r3]
 80005c8:	4b2b      	ldr	r3, [pc, #172]	; (8000678 <kalman_filter+0xec>)
 80005ca:	ed93 7a00 	vldr	s14, [r3]
 80005ce:	4b2b      	ldr	r3, [pc, #172]	; (800067c <kalman_filter+0xf0>)
 80005d0:	edd3 7a00 	vldr	s15, [r3]
 80005d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80005d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005dc:	4b28      	ldr	r3, [pc, #160]	; (8000680 <kalman_filter+0xf4>)
 80005de:	edc3 7a00 	vstr	s15, [r3]

    kalman_adc = x_k_k1 + Kg * (Z_k - kalman_adc_old);
 80005e2:	4b22      	ldr	r3, [pc, #136]	; (800066c <kalman_filter+0xe0>)
 80005e4:	edd3 7a00 	vldr	s15, [r3]
 80005e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80005ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80005f0:	4b23      	ldr	r3, [pc, #140]	; (8000680 <kalman_filter+0xf4>)
 80005f2:	edd3 7a00 	vldr	s15, [r3]
 80005f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80005fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000602:	edc7 7a02 	vstr	s15, [r7, #8]
    P_k1_k1 = (1 - Kg)*P_k_k1;
 8000606:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <kalman_filter+0xf4>)
 8000608:	edd3 7a00 	vldr	s15, [r3]
 800060c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000610:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <kalman_filter+0xec>)
 8000616:	edd3 7a00 	vldr	s15, [r3]
 800061a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <kalman_filter+0xe4>)
 8000620:	edc3 7a00 	vstr	s15, [r3]
    P_k_k1 = P_k1_k1;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <kalman_filter+0xe4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a13      	ldr	r2, [pc, #76]	; (8000678 <kalman_filter+0xec>)
 800062a:	6013      	str	r3, [r2, #0]

    ADC_OLD_Value = ADC_Value;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	ee07 3a90 	vmov	s15, r3
 8000632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <kalman_filter+0xf8>)
 8000638:	edc3 7a00 	vstr	s15, [r3]
    kalman_adc_old = kalman_adc;
 800063c:	4a0b      	ldr	r2, [pc, #44]	; (800066c <kalman_filter+0xe0>)
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	6013      	str	r3, [r2, #0]
    kalman_adc_int = (int)kalman_adc;
 8000642:	edd7 7a02 	vldr	s15, [r7, #8]
 8000646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800064a:	ee17 2a90 	vmov	r2, s15
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <kalman_filter+0xfc>)
 8000650:	601a      	str	r2, [r3, #0]
    return kalman_adc;
 8000652:	edd7 7a02 	vldr	s15, [r7, #8]
 8000656:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800065a:	ee17 3a90 	vmov	r3, s15
}
 800065e:	4618      	mov	r0, r3
 8000660:	371c      	adds	r7, #28
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	20009ef0 	.word	0x20009ef0
 8000670:	20009ee8 	.word	0x20009ee8
 8000674:	20000004 	.word	0x20000004
 8000678:	2000000c 	.word	0x2000000c
 800067c:	20000008 	.word	0x20000008
 8000680:	20009eec 	.word	0x20009eec
 8000684:	20009ee4 	.word	0x20009ee4
 8000688:	20009ef4 	.word	0x20009ef4

0800068c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	adcConversionComplete = 1;
 8000694:	4b37      	ldr	r3, [pc, #220]	; (8000774 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000696:	2201      	movs	r2, #1
 8000698:	601a      	str	r2, [r3, #0]
	conv_rate++;
 800069a:	4b37      	ldr	r3, [pc, #220]	; (8000778 <HAL_ADC_ConvCpltCallback+0xec>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	3301      	adds	r3, #1
 80006a0:	4a35      	ldr	r2, [pc, #212]	; (8000778 <HAL_ADC_ConvCpltCallback+0xec>)
 80006a2:	6013      	str	r3, [r2, #0]
	ad1_audio = ad1_raw[0]; //32;
 80006a4:	4b35      	ldr	r3, [pc, #212]	; (800077c <HAL_ADC_ConvCpltCallback+0xf0>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b34      	ldr	r3, [pc, #208]	; (8000780 <HAL_ADC_ConvCpltCallback+0xf4>)
 80006ae:	601a      	str	r2, [r3, #0]
	//TIM1->CCR1 = ad1_audio;

	if(buf_num == 1)
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <HAL_ADC_ConvCpltCallback+0xf8>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d124      	bne.n	8000702 <HAL_ADC_ConvCpltCallback+0x76>
	{
		if(buf_idx < 2000)
 80006b8:	4b33      	ldr	r3, [pc, #204]	; (8000788 <HAL_ADC_ConvCpltCallback+0xfc>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80006c0:	d218      	bcs.n	80006f4 <HAL_ADC_ConvCpltCallback+0x68>
		{
			buf1[buf_idx] = ad1_audio;
 80006c2:	4b31      	ldr	r3, [pc, #196]	; (8000788 <HAL_ADC_ConvCpltCallback+0xfc>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a2e      	ldr	r2, [pc, #184]	; (8000780 <HAL_ADC_ConvCpltCallback+0xf4>)
 80006c8:	6812      	ldr	r2, [r2, #0]
 80006ca:	4930      	ldr	r1, [pc, #192]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 80006cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// <PWM OUTPUT> TIM1->CCR1 = kalman_filter(buf2[buf_idx]);
			kalman_adc_int = kalman_filter(buf2[buf_idx]);
 80006d0:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <HAL_ADC_ConvCpltCallback+0xfc>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a2e      	ldr	r2, [pc, #184]	; (8000790 <HAL_ADC_ConvCpltCallback+0x104>)
 80006d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff56 	bl	800058c <kalman_filter>
 80006e0:	4603      	mov	r3, r0
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 80006e6:	601a      	str	r2, [r3, #0]
			buf_idx++;
 80006e8:	4b27      	ldr	r3, [pc, #156]	; (8000788 <HAL_ADC_ConvCpltCallback+0xfc>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a26      	ldr	r2, [pc, #152]	; (8000788 <HAL_ADC_ConvCpltCallback+0xfc>)
 80006f0:	6013      	str	r3, [r2, #0]
 80006f2:	e02e      	b.n	8000752 <HAL_ADC_ConvCpltCallback+0xc6>
		}
		else
		{
			buf_num = 2;
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <HAL_ADC_ConvCpltCallback+0xf8>)
 80006f6:	2202      	movs	r2, #2
 80006f8:	701a      	strb	r2, [r3, #0]
			buf_idx = 0;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <HAL_ADC_ConvCpltCallback+0xfc>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	e027      	b.n	8000752 <HAL_ADC_ConvCpltCallback+0xc6>
		}
	}
	else if(buf_num == 2)
 8000702:	4b20      	ldr	r3, [pc, #128]	; (8000784 <HAL_ADC_ConvCpltCallback+0xf8>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b02      	cmp	r3, #2
 8000708:	d123      	bne.n	8000752 <HAL_ADC_ConvCpltCallback+0xc6>
	{
		if(buf_idx < 2000)
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <HAL_ADC_ConvCpltCallback+0xfc>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000712:	d218      	bcs.n	8000746 <HAL_ADC_ConvCpltCallback+0xba>
		{
			buf2[buf_idx] = ad1_audio;
 8000714:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <HAL_ADC_ConvCpltCallback+0xfc>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a19      	ldr	r2, [pc, #100]	; (8000780 <HAL_ADC_ConvCpltCallback+0xf4>)
 800071a:	6812      	ldr	r2, [r2, #0]
 800071c:	491c      	ldr	r1, [pc, #112]	; (8000790 <HAL_ADC_ConvCpltCallback+0x104>)
 800071e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// <PWM OUTPUT> TIM1->CCR1 = kalman_filter(buf1[buf_idx]);
			kalman_adc_int = kalman_filter(buf1[buf_idx]);
 8000722:	4b19      	ldr	r3, [pc, #100]	; (8000788 <HAL_ADC_ConvCpltCallback+0xfc>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a19      	ldr	r2, [pc, #100]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 8000728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff2d 	bl	800058c <kalman_filter>
 8000732:	4603      	mov	r3, r0
 8000734:	461a      	mov	r2, r3
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 8000738:	601a      	str	r2, [r3, #0]
			buf_idx++;
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <HAL_ADC_ConvCpltCallback+0xfc>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <HAL_ADC_ConvCpltCallback+0xfc>)
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	e005      	b.n	8000752 <HAL_ADC_ConvCpltCallback+0xc6>
		}
		else
		{
			buf_num = 1;
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <HAL_ADC_ConvCpltCallback+0xf8>)
 8000748:	2201      	movs	r2, #1
 800074a:	701a      	strb	r2, [r3, #0]
			buf_idx = 0;
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <HAL_ADC_ConvCpltCallback+0xfc>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
		}
	}

	if(kalman_adc_int > 320)
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800075a:	dd07      	ble.n	800076c <HAL_ADC_ConvCpltCallback+0xe0>
	{
		trip1 = 1;
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <HAL_ADC_ConvCpltCallback+0x10c>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	2101      	movs	r1, #1
 8000766:	480d      	ldr	r0, [pc, #52]	; (800079c <HAL_ADC_ConvCpltCallback+0x110>)
 8000768:	f001 ff40 	bl	80025ec <HAL_GPIO_WritePin>
	}

}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000294 	.word	0x20000294
 8000778:	20000298 	.word	0x20000298
 800077c:	20000288 	.word	0x20000288
 8000780:	2000029c 	.word	0x2000029c
 8000784:	20000000 	.word	0x20000000
 8000788:	200002a0 	.word	0x200002a0
 800078c:	200002a4 	.word	0x200002a4
 8000790:	200050c4 	.word	0x200050c4
 8000794:	20009ef4 	.word	0x20009ef4
 8000798:	20009ef8 	.word	0x20009ef8
 800079c:	40020400 	.word	0x40020400

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  uint32_t a_shot = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
  uint32_t b_shot = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ae:	f000 fb75 	bl	8000e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b2:	f000 f85d 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b6:	f000 f983 	bl	8000ac0 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ba:	f000 f961 	bl	8000a80 <MX_DMA_Init>
  MX_ADC1_Init();
 80007be:	f000 f8c1 	bl	8000944 <MX_ADC1_Init>
  MX_TIM2_Init();
 80007c2:	f000 f911 	bl	80009e8 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80007c6:	f007 fce7 	bl	8008198 <MX_USB_DEVICE_Init>
  //MX_TIM1_Init();
  /* USER CODE BEGIN 2 */

  //HAL_DMA_Start_IT(&hdma_adc1, SrcAddress, DstAddress, DataLength);

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ad1_raw, adcChannelCount);
 80007ca:	2301      	movs	r3, #1
 80007cc:	461a      	mov	r2, r3
 80007ce:	491f      	ldr	r1, [pc, #124]	; (800084c <main+0xac>)
 80007d0:	481f      	ldr	r0, [pc, #124]	; (8000850 <main+0xb0>)
 80007d2:	f000 fd4d 	bl	8001270 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim2);
 80007d6:	481f      	ldr	r0, [pc, #124]	; (8000854 <main+0xb4>)
 80007d8:	f003 fe1e 	bl	8004418 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GetTick() > (a_shot + 100))
 80007dc:	f000 fbc4 	bl	8000f68 <HAL_GetTick>
 80007e0:	4602      	mov	r2, r0
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	3364      	adds	r3, #100	; 0x64
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d924      	bls.n	8000834 <main+0x94>
	  {
		  a_shot = HAL_GetTick();
 80007ea:	f000 fbbd 	bl	8000f68 <HAL_GetTick>
 80007ee:	6078      	str	r0, [r7, #4]
		  if(adcConversionComplete == 1)
 80007f0:	4b19      	ldr	r3, [pc, #100]	; (8000858 <main+0xb8>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d11d      	bne.n	8000834 <main+0x94>
		  {
			  adcConversionComplete = 0;
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <main+0xb8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
			  //ad1_audio = ad1_raw[0] / 32; // map(ad1_raw[1], 0, 4096, 0, 254);
			  //sprintf(strA1, "A1:%d,Rate:%d,Map:%d\n", ad1_raw[0], conv_rate, ad1_audio);
			  sprintf(strA1, "A1:%d,Kalman:%d,Map:%d\n", ad1_raw[0], kalman_adc_int, ad1_audio); // @suppress("Float formatting support")
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <main+0xac>)
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	b29b      	uxth	r3, r3
 8000804:	4619      	mov	r1, r3
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <main+0xbc>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <main+0xc0>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	4613      	mov	r3, r2
 8000812:	460a      	mov	r2, r1
 8000814:	4913      	ldr	r1, [pc, #76]	; (8000864 <main+0xc4>)
 8000816:	4814      	ldr	r0, [pc, #80]	; (8000868 <main+0xc8>)
 8000818:	f008 f9ce 	bl	8008bb8 <siprintf>
			  CDC_Transmit_FS(strA1, strlen(strA1));
 800081c:	4812      	ldr	r0, [pc, #72]	; (8000868 <main+0xc8>)
 800081e:	f7ff fcdf 	bl	80001e0 <strlen>
 8000822:	4603      	mov	r3, r0
 8000824:	b29b      	uxth	r3, r3
 8000826:	4619      	mov	r1, r3
 8000828:	480f      	ldr	r0, [pc, #60]	; (8000868 <main+0xc8>)
 800082a:	f007 fd73 	bl	8008314 <CDC_Transmit_FS>
			  conv_rate = 0;
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <main+0xcc>)
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
			  //But my goal is to start the conversion from the trigger of the TIM2
			  //HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ad1_raw, adcChannelCount);
		  }
	  }

	  if(HAL_GetTick() > (b_shot + 1000))
 8000834:	f000 fb98 	bl	8000f68 <HAL_GetTick>
 8000838:	4602      	mov	r2, r0
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000840:	429a      	cmp	r2, r3
 8000842:	d9cb      	bls.n	80007dc <main+0x3c>
	  {
		  b_shot = HAL_GetTick();
 8000844:	f000 fb90 	bl	8000f68 <HAL_GetTick>
 8000848:	6038      	str	r0, [r7, #0]
	  if(HAL_GetTick() > (a_shot + 100))
 800084a:	e7c7      	b.n	80007dc <main+0x3c>
 800084c:	20000288 	.word	0x20000288
 8000850:	20000178 	.word	0x20000178
 8000854:	20000220 	.word	0x20000220
 8000858:	20000294 	.word	0x20000294
 800085c:	20009ef4 	.word	0x20009ef4
 8000860:	2000029c 	.word	0x2000029c
 8000864:	08009518 	.word	0x08009518
 8000868:	20000268 	.word	0x20000268
 800086c:	20000298 	.word	0x20000298

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b094      	sub	sp, #80	; 0x50
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0320 	add.w	r3, r7, #32
 800087a:	2230      	movs	r2, #48	; 0x30
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f008 f9ba 	bl	8008bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	4b28      	ldr	r3, [pc, #160]	; (800093c <SystemClock_Config+0xcc>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	4a27      	ldr	r2, [pc, #156]	; (800093c <SystemClock_Config+0xcc>)
 800089e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a2:	6413      	str	r3, [r2, #64]	; 0x40
 80008a4:	4b25      	ldr	r3, [pc, #148]	; (800093c <SystemClock_Config+0xcc>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	4b22      	ldr	r3, [pc, #136]	; (8000940 <SystemClock_Config+0xd0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008bc:	4a20      	ldr	r2, [pc, #128]	; (8000940 <SystemClock_Config+0xd0>)
 80008be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <SystemClock_Config+0xd0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d0:	2301      	movs	r3, #1
 80008d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008da:	2302      	movs	r3, #2
 80008dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80008e4:	230f      	movs	r3, #15
 80008e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80008e8:	2390      	movs	r3, #144	; 0x90
 80008ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008ec:	2304      	movs	r3, #4
 80008ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80008f0:	2305      	movs	r3, #5
 80008f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f4:	f107 0320 	add.w	r3, r7, #32
 80008f8:	4618      	mov	r0, r3
 80008fa:	f003 f90d 	bl	8003b18 <HAL_RCC_OscConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000904:	f000 f92c 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000908:	230f      	movs	r3, #15
 800090a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090c:	2302      	movs	r3, #2
 800090e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000918:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	2101      	movs	r1, #1
 8000924:	4618      	mov	r0, r3
 8000926:	f003 fb6f 	bl	8004008 <HAL_RCC_ClockConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000930:	f000 f916 	bl	8000b60 <Error_Handler>
  }
}
 8000934:	bf00      	nop
 8000936:	3750      	adds	r7, #80	; 0x50
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800
 8000940:	40007000 	.word	0x40007000

08000944 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800094a:	463b      	mov	r3, r7
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000956:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <MX_ADC1_Init+0x9c>)
 8000958:	4a22      	ldr	r2, [pc, #136]	; (80009e4 <MX_ADC1_Init+0xa0>)
 800095a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800095c:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <MX_ADC1_Init+0x9c>)
 800095e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000962:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000964:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <MX_ADC1_Init+0x9c>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800096a:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_ADC1_Init+0x9c>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000970:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <MX_ADC1_Init+0x9c>)
 8000972:	2200      	movs	r2, #0
 8000974:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_ADC1_Init+0x9c>)
 8000978:	2200      	movs	r2, #0
 800097a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800097e:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <MX_ADC1_Init+0x9c>)
 8000980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000984:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_ADC1_Init+0x9c>)
 8000988:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800098c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_ADC1_Init+0x9c>)
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_ADC1_Init+0x9c>)
 8000996:	2201      	movs	r2, #1
 8000998:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_ADC1_Init+0x9c>)
 800099c:	2201      	movs	r2, #1
 800099e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_ADC1_Init+0x9c>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <MX_ADC1_Init+0x9c>)
 80009aa:	f000 fb0d 	bl	8000fc8 <HAL_ADC_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80009b4:	f000 f8d4 	bl	8000b60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009bc:	2301      	movs	r3, #1
 80009be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_ADC1_Init+0x9c>)
 80009ca:	f000 fd5f 	bl	800148c <HAL_ADC_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80009d4:	f000 f8c4 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000178 	.word	0x20000178
 80009e4:	40012000 	.word	0x40012000

080009e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ee:	f107 0308 	add.w	r3, r7, #8
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fc:	463b      	mov	r3, r7
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a04:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <MX_TIM2_Init+0x94>)
 8000a06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 128;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <MX_TIM2_Init+0x94>)
 8000a0e:	2280      	movs	r2, #128	; 0x80
 8000a10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_TIM2_Init+0x94>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <MX_TIM2_Init+0x94>)
 8000a1a:	2232      	movs	r2, #50	; 0x32
 8000a1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_TIM2_Init+0x94>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <MX_TIM2_Init+0x94>)
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a2a:	4814      	ldr	r0, [pc, #80]	; (8000a7c <MX_TIM2_Init+0x94>)
 8000a2c:	f003 fca4 	bl	8004378 <HAL_TIM_Base_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000a36:	f000 f893 	bl	8000b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a40:	f107 0308 	add.w	r3, r7, #8
 8000a44:	4619      	mov	r1, r3
 8000a46:	480d      	ldr	r0, [pc, #52]	; (8000a7c <MX_TIM2_Init+0x94>)
 8000a48:	f003 fd40 	bl	80044cc <HAL_TIM_ConfigClockSource>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000a52:	f000 f885 	bl	8000b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a56:	2320      	movs	r3, #32
 8000a58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a5e:	463b      	mov	r3, r7
 8000a60:	4619      	mov	r1, r3
 8000a62:	4806      	ldr	r0, [pc, #24]	; (8000a7c <MX_TIM2_Init+0x94>)
 8000a64:	f003 ff14 	bl	8004890 <HAL_TIMEx_MasterConfigSynchronization>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000a6e:	f000 f877 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000220 	.word	0x20000220

08000a80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_DMA_Init+0x3c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <MX_DMA_Init+0x3c>)
 8000a90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_DMA_Init+0x3c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2038      	movs	r0, #56	; 0x38
 8000aa8:	f001 f875 	bl	8001b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000aac:	2038      	movs	r0, #56	; 0x38
 8000aae:	f001 f88e 	bl	8001bce <HAL_NVIC_EnableIRQ>

}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <MX_GPIO_Init+0x98>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a1e      	ldr	r2, [pc, #120]	; (8000b58 <MX_GPIO_Init+0x98>)
 8000ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <MX_GPIO_Init+0x98>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <MX_GPIO_Init+0x98>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a17      	ldr	r2, [pc, #92]	; (8000b58 <MX_GPIO_Init+0x98>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <MX_GPIO_Init+0x98>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_GPIO_Init+0x98>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <MX_GPIO_Init+0x98>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_GPIO_Init+0x98>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	480b      	ldr	r0, [pc, #44]	; (8000b5c <MX_GPIO_Init+0x9c>)
 8000b30:	f001 fd5c 	bl	80025ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b34:	2301      	movs	r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4804      	ldr	r0, [pc, #16]	; (8000b5c <MX_GPIO_Init+0x9c>)
 8000b4c:	f001 fbca 	bl	80022e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b50:	bf00      	nop
 8000b52:	3720      	adds	r7, #32
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020400 	.word	0x40020400

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <Error_Handler+0x8>
	...

08000b6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	4a0f      	ldr	r2, [pc, #60]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b80:	6453      	str	r3, [r2, #68]	; 0x44
 8000b82:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800

08000bbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a33      	ldr	r2, [pc, #204]	; (8000ca8 <HAL_ADC_MspInit+0xec>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d15f      	bne.n	8000c9e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b32      	ldr	r3, [pc, #200]	; (8000cac <HAL_ADC_MspInit+0xf0>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	4a31      	ldr	r2, [pc, #196]	; (8000cac <HAL_ADC_MspInit+0xf0>)
 8000be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bec:	6453      	str	r3, [r2, #68]	; 0x44
 8000bee:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <HAL_ADC_MspInit+0xf0>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <HAL_ADC_MspInit+0xf0>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a2a      	ldr	r2, [pc, #168]	; (8000cac <HAL_ADC_MspInit+0xf0>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b28      	ldr	r3, [pc, #160]	; (8000cac <HAL_ADC_MspInit+0xf0>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c16:	2302      	movs	r3, #2
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4821      	ldr	r0, [pc, #132]	; (8000cb0 <HAL_ADC_MspInit+0xf4>)
 8000c2a:	f001 fb5b 	bl	80022e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c2e:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <HAL_ADC_MspInit+0xf8>)
 8000c30:	4a21      	ldr	r2, [pc, #132]	; (8000cb8 <HAL_ADC_MspInit+0xfc>)
 8000c32:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c34:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <HAL_ADC_MspInit+0xf8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c3a:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <HAL_ADC_MspInit+0xf8>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c40:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <HAL_ADC_MspInit+0xf8>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c46:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <HAL_ADC_MspInit+0xf8>)
 8000c48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c4c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <HAL_ADC_MspInit+0xf8>)
 8000c50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c54:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c56:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <HAL_ADC_MspInit+0xf8>)
 8000c58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c5c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <HAL_ADC_MspInit+0xf8>)
 8000c60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c64:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <HAL_ADC_MspInit+0xf8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HAL_ADC_MspInit+0xf8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c72:	4810      	ldr	r0, [pc, #64]	; (8000cb4 <HAL_ADC_MspInit+0xf8>)
 8000c74:	f000 ffc6 	bl	8001c04 <HAL_DMA_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000c7e:	f7ff ff6f 	bl	8000b60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <HAL_ADC_MspInit+0xf8>)
 8000c86:	639a      	str	r2, [r3, #56]	; 0x38
 8000c88:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <HAL_ADC_MspInit+0xf8>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	2012      	movs	r0, #18
 8000c94:	f000 ff7f 	bl	8001b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000c98:	2012      	movs	r0, #18
 8000c9a:	f000 ff98 	bl	8001bce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	; 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40012000 	.word	0x40012000
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	200001c0 	.word	0x200001c0
 8000cb8:	40026410 	.word	0x40026410

08000cbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a15      	ldr	r2, [pc, #84]	; (8000d20 <HAL_TIM_Base_MspInit+0x64>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d10e      	bne.n	8000cec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <HAL_TIM_Base_MspInit+0x68>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	4a13      	ldr	r2, [pc, #76]	; (8000d24 <HAL_TIM_Base_MspInit+0x68>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_TIM_Base_MspInit+0x68>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cea:	e012      	b.n	8000d12 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cf4:	d10d      	bne.n	8000d12 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_TIM_Base_MspInit+0x68>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	4a09      	ldr	r2, [pc, #36]	; (8000d24 <HAL_TIM_Base_MspInit+0x68>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6413      	str	r3, [r2, #64]	; 0x40
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <HAL_TIM_Base_MspInit+0x68>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
}
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40010000 	.word	0x40010000
 8000d24:	40023800 	.word	0x40023800

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <NMI_Handler+0x4>

08000d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d74:	f000 f8e4 	bl	8000f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <ADC_IRQHandler+0x10>)
 8000d82:	f000 f964 	bl	800104e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000178 	.word	0x20000178

08000d90 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <DMA2_Stream0_IRQHandler+0x10>)
 8000d96:	f001 f83b 	bl	8001e10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200001c0 	.word	0x200001c0

08000da4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <OTG_FS_IRQHandler+0x10>)
 8000daa:	f001 fd88 	bl	80028be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2000abe4 	.word	0x2000abe4

08000db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc0:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <_sbrk+0x5c>)
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <_sbrk+0x60>)
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d102      	bne.n	8000dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <_sbrk+0x64>)
 8000dd6:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <_sbrk+0x68>)
 8000dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d207      	bcs.n	8000df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de8:	f007 ff0e 	bl	8008c08 <__errno>
 8000dec:	4603      	mov	r3, r0
 8000dee:	220c      	movs	r2, #12
 8000df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295
 8000df6:	e009      	b.n	8000e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <_sbrk+0x64>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <_sbrk+0x64>)
 8000e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20010000 	.word	0x20010000
 8000e18:	00000400 	.word	0x00000400
 8000e1c:	20009efc 	.word	0x20009efc
 8000e20:	2000b458 	.word	0x2000b458

08000e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <SystemInit+0x20>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <SystemInit+0x20>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e4c:	480d      	ldr	r0, [pc, #52]	; (8000e84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e4e:	490e      	ldr	r1, [pc, #56]	; (8000e88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e50:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e64:	4c0b      	ldr	r4, [pc, #44]	; (8000e94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e72:	f7ff ffd7 	bl	8000e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e76:	f007 fecd 	bl	8008c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7a:	f7ff fc91 	bl	80007a0 <main>
  bx  lr    
 8000e7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e80:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e88:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000e8c:	080095d4 	.word	0x080095d4
  ldr r2, =_sbss
 8000e90:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000e94:	2000b458 	.word	0x2000b458

08000e98 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <DMA1_Stream0_IRQHandler>
	...

08000e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	; (8000edc <HAL_Init+0x40>)
 8000ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <HAL_Init+0x40>)
 8000eb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a07      	ldr	r2, [pc, #28]	; (8000edc <HAL_Init+0x40>)
 8000ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f000 fe5b 	bl	8001b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eca:	200f      	movs	r0, #15
 8000ecc:	f000 f808 	bl	8000ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed0:	f7ff fe4c 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40023c00 	.word	0x40023c00

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x54>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_InitTick+0x58>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fe73 	bl	8001bea <HAL_SYSTICK_Config>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00e      	b.n	8000f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b0f      	cmp	r3, #15
 8000f12:	d80a      	bhi.n	8000f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f14:	2200      	movs	r2, #0
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f000 fe3b 	bl	8001b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f20:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <HAL_InitTick+0x5c>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e000      	b.n	8000f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000010 	.word	0x20000010
 8000f38:	20000018 	.word	0x20000018
 8000f3c:	20000014 	.word	0x20000014

08000f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_IncTick+0x20>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_IncTick+0x24>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <HAL_IncTick+0x24>)
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000018 	.word	0x20000018
 8000f64:	20009f00 	.word	0x20009f00

08000f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f6c:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <HAL_GetTick+0x14>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20009f00 	.word	0x20009f00

08000f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f88:	f7ff ffee 	bl	8000f68 <HAL_GetTick>
 8000f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f98:	d005      	beq.n	8000fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_Delay+0x44>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fa6:	bf00      	nop
 8000fa8:	f7ff ffde 	bl	8000f68 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d8f7      	bhi.n	8000fa8 <HAL_Delay+0x28>
  {
  }
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000018 	.word	0x20000018

08000fc8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e033      	b.n	8001046 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d109      	bne.n	8000ffa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff fde8 	bl	8000bbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f003 0310 	and.w	r3, r3, #16
 8001002:	2b00      	cmp	r3, #0
 8001004:	d118      	bne.n	8001038 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800100e:	f023 0302 	bic.w	r3, r3, #2
 8001012:	f043 0202 	orr.w	r2, r3, #2
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 fb58 	bl	80016d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f023 0303 	bic.w	r3, r3, #3
 800102e:	f043 0201 	orr.w	r2, r3, #1
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	641a      	str	r2, [r3, #64]	; 0x40
 8001036:	e001      	b.n	800103c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001044:	7bfb      	ldrb	r3, [r7, #15]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	f003 0320 	and.w	r3, r3, #32
 800107c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d049      	beq.n	8001118 <HAL_ADC_IRQHandler+0xca>
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d046      	beq.n	8001118 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f003 0310 	and.w	r3, r3, #16
 8001092:	2b00      	cmp	r3, #0
 8001094:	d105      	bne.n	80010a2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d12b      	bne.n	8001108 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d127      	bne.n	8001108 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d006      	beq.n	80010d4 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d119      	bne.n	8001108 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 0220 	bic.w	r2, r2, #32
 80010e2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d105      	bne.n	8001108 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	f043 0201 	orr.w	r2, r3, #1
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff fabf 	bl	800068c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f06f 0212 	mvn.w	r2, #18
 8001116:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001126:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d057      	beq.n	80011de <HAL_ADC_IRQHandler+0x190>
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d054      	beq.n	80011de <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	f003 0310 	and.w	r3, r3, #16
 800113c:	2b00      	cmp	r3, #0
 800113e:	d105      	bne.n	800114c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d139      	bne.n	80011ce <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001160:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001164:	2b00      	cmp	r3, #0
 8001166:	d006      	beq.n	8001176 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001172:	2b00      	cmp	r3, #0
 8001174:	d12b      	bne.n	80011ce <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001180:	2b00      	cmp	r3, #0
 8001182:	d124      	bne.n	80011ce <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800118e:	2b00      	cmp	r3, #0
 8001190:	d11d      	bne.n	80011ce <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001196:	2b00      	cmp	r3, #0
 8001198:	d119      	bne.n	80011ce <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011a8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d105      	bne.n	80011ce <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f043 0201 	orr.w	r2, r3, #1
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 fbfc 	bl	80019cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f06f 020c 	mvn.w	r2, #12
 80011dc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ec:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d017      	beq.n	8001224 <HAL_ADC_IRQHandler+0x1d6>
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d014      	beq.n	8001224 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	2b01      	cmp	r3, #1
 8001206:	d10d      	bne.n	8001224 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f925 	bl	8001464 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f06f 0201 	mvn.w	r2, #1
 8001222:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 0320 	and.w	r3, r3, #32
 800122a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001232:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d015      	beq.n	8001266 <HAL_ADC_IRQHandler+0x218>
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d012      	beq.n	8001266 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001244:	f043 0202 	orr.w	r2, r3, #2
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f06f 0220 	mvn.w	r2, #32
 8001254:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 f90e 	bl	8001478 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f06f 0220 	mvn.w	r2, #32
 8001264:	601a      	str	r2, [r3, #0]
  }
}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001286:	2b01      	cmp	r3, #1
 8001288:	d101      	bne.n	800128e <HAL_ADC_Start_DMA+0x1e>
 800128a:	2302      	movs	r3, #2
 800128c:	e0ce      	b.n	800142c <HAL_ADC_Start_DMA+0x1bc>
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2201      	movs	r2, #1
 8001292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d018      	beq.n	80012d6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 0201 	orr.w	r2, r2, #1
 80012b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012b4:	4b5f      	ldr	r3, [pc, #380]	; (8001434 <HAL_ADC_Start_DMA+0x1c4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a5f      	ldr	r2, [pc, #380]	; (8001438 <HAL_ADC_Start_DMA+0x1c8>)
 80012ba:	fba2 2303 	umull	r2, r3, r2, r3
 80012be:	0c9a      	lsrs	r2, r3, #18
 80012c0:	4613      	mov	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	4413      	add	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80012c8:	e002      	b.n	80012d0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f9      	bne.n	80012ca <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012e4:	d107      	bne.n	80012f6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	2b01      	cmp	r3, #1
 8001302:	f040 8086 	bne.w	8001412 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800130e:	f023 0301 	bic.w	r3, r3, #1
 8001312:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001324:	2b00      	cmp	r3, #0
 8001326:	d007      	beq.n	8001338 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001330:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001344:	d106      	bne.n	8001354 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f023 0206 	bic.w	r2, r3, #6
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	645a      	str	r2, [r3, #68]	; 0x44
 8001352:	e002      	b.n	800135a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2200      	movs	r2, #0
 8001358:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001362:	4b36      	ldr	r3, [pc, #216]	; (800143c <HAL_ADC_Start_DMA+0x1cc>)
 8001364:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800136a:	4a35      	ldr	r2, [pc, #212]	; (8001440 <HAL_ADC_Start_DMA+0x1d0>)
 800136c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001372:	4a34      	ldr	r2, [pc, #208]	; (8001444 <HAL_ADC_Start_DMA+0x1d4>)
 8001374:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137a:	4a33      	ldr	r2, [pc, #204]	; (8001448 <HAL_ADC_Start_DMA+0x1d8>)
 800137c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001386:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001396:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013a6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	334c      	adds	r3, #76	; 0x4c
 80013b2:	4619      	mov	r1, r3
 80013b4:	68ba      	ldr	r2, [r7, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f000 fcd2 	bl	8001d60 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 031f 	and.w	r3, r3, #31
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d10f      	bne.n	80013e8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d129      	bne.n	800142a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	e020      	b.n	800142a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a17      	ldr	r2, [pc, #92]	; (800144c <HAL_ADC_Start_DMA+0x1dc>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d11b      	bne.n	800142a <HAL_ADC_Start_DMA+0x1ba>
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d114      	bne.n	800142a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	e00b      	b.n	800142a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f043 0210 	orr.w	r2, r3, #16
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	f043 0201 	orr.w	r2, r3, #1
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000010 	.word	0x20000010
 8001438:	431bde83 	.word	0x431bde83
 800143c:	40012300 	.word	0x40012300
 8001440:	080018c9 	.word	0x080018c9
 8001444:	08001983 	.word	0x08001983
 8001448:	0800199f 	.word	0x0800199f
 800144c:	40012000 	.word	0x40012000

08001450 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d101      	bne.n	80014a8 <HAL_ADC_ConfigChannel+0x1c>
 80014a4:	2302      	movs	r3, #2
 80014a6:	e105      	b.n	80016b4 <HAL_ADC_ConfigChannel+0x228>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b09      	cmp	r3, #9
 80014b6:	d925      	bls.n	8001504 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68d9      	ldr	r1, [r3, #12]
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	461a      	mov	r2, r3
 80014c6:	4613      	mov	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	4413      	add	r3, r2
 80014cc:	3b1e      	subs	r3, #30
 80014ce:	2207      	movs	r2, #7
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43da      	mvns	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	400a      	ands	r2, r1
 80014dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68d9      	ldr	r1, [r3, #12]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	4603      	mov	r3, r0
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4403      	add	r3, r0
 80014f6:	3b1e      	subs	r3, #30
 80014f8:	409a      	lsls	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	e022      	b.n	800154a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6919      	ldr	r1, [r3, #16]
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	b29b      	uxth	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	4613      	mov	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	2207      	movs	r2, #7
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43da      	mvns	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	400a      	ands	r2, r1
 8001526:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6919      	ldr	r1, [r3, #16]
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	b29b      	uxth	r3, r3
 8001538:	4618      	mov	r0, r3
 800153a:	4603      	mov	r3, r0
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	4403      	add	r3, r0
 8001540:	409a      	lsls	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b06      	cmp	r3, #6
 8001550:	d824      	bhi.n	800159c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	3b05      	subs	r3, #5
 8001564:	221f      	movs	r2, #31
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43da      	mvns	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	400a      	ands	r2, r1
 8001572:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	b29b      	uxth	r3, r3
 8001580:	4618      	mov	r0, r3
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	3b05      	subs	r3, #5
 800158e:	fa00 f203 	lsl.w	r2, r0, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	635a      	str	r2, [r3, #52]	; 0x34
 800159a:	e04c      	b.n	8001636 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b0c      	cmp	r3, #12
 80015a2:	d824      	bhi.n	80015ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	3b23      	subs	r3, #35	; 0x23
 80015b6:	221f      	movs	r2, #31
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43da      	mvns	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	400a      	ands	r2, r1
 80015c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	3b23      	subs	r3, #35	; 0x23
 80015e0:	fa00 f203 	lsl.w	r2, r0, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	631a      	str	r2, [r3, #48]	; 0x30
 80015ec:	e023      	b.n	8001636 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	3b41      	subs	r3, #65	; 0x41
 8001600:	221f      	movs	r2, #31
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43da      	mvns	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	400a      	ands	r2, r1
 800160e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	4618      	mov	r0, r3
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	3b41      	subs	r3, #65	; 0x41
 800162a:	fa00 f203 	lsl.w	r2, r0, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001636:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <HAL_ADC_ConfigChannel+0x234>)
 8001638:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a21      	ldr	r2, [pc, #132]	; (80016c4 <HAL_ADC_ConfigChannel+0x238>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d109      	bne.n	8001658 <HAL_ADC_ConfigChannel+0x1cc>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b12      	cmp	r3, #18
 800164a:	d105      	bne.n	8001658 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a19      	ldr	r2, [pc, #100]	; (80016c4 <HAL_ADC_ConfigChannel+0x238>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d123      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x21e>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b10      	cmp	r3, #16
 8001668:	d003      	beq.n	8001672 <HAL_ADC_ConfigChannel+0x1e6>
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b11      	cmp	r3, #17
 8001670:	d11b      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b10      	cmp	r3, #16
 8001684:	d111      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <HAL_ADC_ConfigChannel+0x23c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a10      	ldr	r2, [pc, #64]	; (80016cc <HAL_ADC_ConfigChannel+0x240>)
 800168c:	fba2 2303 	umull	r2, r3, r2, r3
 8001690:	0c9a      	lsrs	r2, r3, #18
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800169c:	e002      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f9      	bne.n	800169e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	40012300 	.word	0x40012300
 80016c4:	40012000 	.word	0x40012000
 80016c8:	20000010 	.word	0x20000010
 80016cc:	431bde83 	.word	0x431bde83

080016d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016d8:	4b79      	ldr	r3, [pc, #484]	; (80018c0 <ADC_Init+0x1f0>)
 80016da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	431a      	orrs	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001704:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6859      	ldr	r1, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	021a      	lsls	r2, r3, #8
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001728:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6859      	ldr	r1, [r3, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800174a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6899      	ldr	r1, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001762:	4a58      	ldr	r2, [pc, #352]	; (80018c4 <ADC_Init+0x1f4>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d022      	beq.n	80017ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001776:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6899      	ldr	r1, [r3, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001798:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6899      	ldr	r1, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	e00f      	b.n	80017ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0202 	bic.w	r2, r2, #2
 80017dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6899      	ldr	r1, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7e1b      	ldrb	r3, [r3, #24]
 80017e8:	005a      	lsls	r2, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d01b      	beq.n	8001834 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800180a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800181a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6859      	ldr	r1, [r3, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	3b01      	subs	r3, #1
 8001828:	035a      	lsls	r2, r3, #13
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	430a      	orrs	r2, r1
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	e007      	b.n	8001844 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001842:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001852:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	3b01      	subs	r3, #1
 8001860:	051a      	lsls	r2, r3, #20
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001878:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6899      	ldr	r1, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001886:	025a      	lsls	r2, r3, #9
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	689a      	ldr	r2, [r3, #8]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800189e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6899      	ldr	r1, [r3, #8]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	029a      	lsls	r2, r3, #10
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	609a      	str	r2, [r3, #8]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	40012300 	.word	0x40012300
 80018c4:	0f000001 	.word	0x0f000001

080018c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d13c      	bne.n	800195c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d12b      	bne.n	8001954 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001900:	2b00      	cmp	r3, #0
 8001902:	d127      	bne.n	8001954 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800190e:	2b00      	cmp	r3, #0
 8001910:	d006      	beq.n	8001920 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800191c:	2b00      	cmp	r3, #0
 800191e:	d119      	bne.n	8001954 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0220 	bic.w	r2, r2, #32
 800192e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d105      	bne.n	8001954 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	f043 0201 	orr.w	r2, r3, #1
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f7fe fe99 	bl	800068c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800195a:	e00e      	b.n	800197a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	f003 0310 	and.w	r3, r3, #16
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f7ff fd85 	bl	8001478 <HAL_ADC_ErrorCallback>
}
 800196e:	e004      	b.n	800197a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	4798      	blx	r3
}
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b084      	sub	sp, #16
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f7ff fd5d 	bl	8001450 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b084      	sub	sp, #16
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019aa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2240      	movs	r2, #64	; 0x40
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f043 0204 	orr.w	r2, r3, #4
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f7ff fd5a 	bl	8001478 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019c4:	bf00      	nop
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a12:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	60d3      	str	r3, [r2, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <__NVIC_GetPriorityGrouping+0x18>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0307 	and.w	r3, r3, #7
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	db0b      	blt.n	8001a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	f003 021f 	and.w	r2, r3, #31
 8001a5c:	4907      	ldr	r1, [pc, #28]	; (8001a7c <__NVIC_EnableIRQ+0x38>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	2001      	movs	r0, #1
 8001a66:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000e100 	.word	0xe000e100

08001a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	db0a      	blt.n	8001aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	490c      	ldr	r1, [pc, #48]	; (8001acc <__NVIC_SetPriority+0x4c>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	0112      	lsls	r2, r2, #4
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa8:	e00a      	b.n	8001ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4908      	ldr	r1, [pc, #32]	; (8001ad0 <__NVIC_SetPriority+0x50>)
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	3b04      	subs	r3, #4
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	440b      	add	r3, r1
 8001abe:	761a      	strb	r2, [r3, #24]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000e100 	.word	0xe000e100
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f1c3 0307 	rsb	r3, r3, #7
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	bf28      	it	cs
 8001af2:	2304      	movcs	r3, #4
 8001af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3304      	adds	r3, #4
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d902      	bls.n	8001b04 <NVIC_EncodePriority+0x30>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3b03      	subs	r3, #3
 8001b02:	e000      	b.n	8001b06 <NVIC_EncodePriority+0x32>
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	f04f 32ff 	mov.w	r2, #4294967295
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	401a      	ands	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43d9      	mvns	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	4313      	orrs	r3, r2
         );
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3724      	adds	r7, #36	; 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b4c:	d301      	bcc.n	8001b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00f      	b.n	8001b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b52:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <SysTick_Config+0x40>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5a:	210f      	movs	r1, #15
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	f7ff ff8e 	bl	8001a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <SysTick_Config+0x40>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6a:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <SysTick_Config+0x40>)
 8001b6c:	2207      	movs	r2, #7
 8001b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	e000e010 	.word	0xe000e010

08001b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ff29 	bl	80019e0 <__NVIC_SetPriorityGrouping>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba8:	f7ff ff3e 	bl	8001a28 <__NVIC_GetPriorityGrouping>
 8001bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	68b9      	ldr	r1, [r7, #8]
 8001bb2:	6978      	ldr	r0, [r7, #20]
 8001bb4:	f7ff ff8e 	bl	8001ad4 <NVIC_EncodePriority>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff5d 	bl	8001a80 <__NVIC_SetPriority>
}
 8001bc6:	bf00      	nop
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff31 	bl	8001a44 <__NVIC_EnableIRQ>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ffa2 	bl	8001b3c <SysTick_Config>
 8001bf8:	4603      	mov	r3, r0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c10:	f7ff f9aa 	bl	8000f68 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e099      	b.n	8001d54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2202      	movs	r2, #2
 8001c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0201 	bic.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c40:	e00f      	b.n	8001c62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c42:	f7ff f991 	bl	8000f68 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b05      	cmp	r3, #5
 8001c4e:	d908      	bls.n	8001c62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2220      	movs	r2, #32
 8001c54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2203      	movs	r2, #3
 8001c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e078      	b.n	8001d54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1e8      	bne.n	8001c42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	4b38      	ldr	r3, [pc, #224]	; (8001d5c <HAL_DMA_Init+0x158>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d107      	bne.n	8001ccc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f023 0307 	bic.w	r3, r3, #7
 8001ce2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d117      	bne.n	8001d26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00e      	beq.n	8001d26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 fa6f 	bl	80021ec <DMA_CheckFifoParam>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2240      	movs	r2, #64	; 0x40
 8001d18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d22:	2301      	movs	r3, #1
 8001d24:	e016      	b.n	8001d54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 fa26 	bl	8002180 <DMA_CalcBaseAndBitshift>
 8001d34:	4603      	mov	r3, r0
 8001d36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3c:	223f      	movs	r2, #63	; 0x3f
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	f010803f 	.word	0xf010803f

08001d60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
 8001d6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d101      	bne.n	8001d86 <HAL_DMA_Start_IT+0x26>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e040      	b.n	8001e08 <HAL_DMA_Start_IT+0xa8>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d12f      	bne.n	8001dfa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	68b9      	ldr	r1, [r7, #8]
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 f9b8 	bl	8002124 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db8:	223f      	movs	r2, #63	; 0x3f
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0216 	orr.w	r2, r2, #22
 8001dce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d007      	beq.n	8001de8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0208 	orr.w	r2, r2, #8
 8001de6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0201 	orr.w	r2, r2, #1
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	e005      	b.n	8001e06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e02:	2302      	movs	r3, #2
 8001e04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e1c:	4b8e      	ldr	r3, [pc, #568]	; (8002058 <HAL_DMA_IRQHandler+0x248>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a8e      	ldr	r2, [pc, #568]	; (800205c <HAL_DMA_IRQHandler+0x24c>)
 8001e22:	fba2 2303 	umull	r2, r3, r2, r3
 8001e26:	0a9b      	lsrs	r3, r3, #10
 8001e28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3a:	2208      	movs	r2, #8
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d01a      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d013      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0204 	bic.w	r2, r2, #4
 8001e62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e68:	2208      	movs	r2, #8
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e74:	f043 0201 	orr.w	r2, r3, #1
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e80:	2201      	movs	r2, #1
 8001e82:	409a      	lsls	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4013      	ands	r3, r2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d012      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00b      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	409a      	lsls	r2, r3
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eaa:	f043 0202 	orr.w	r2, r3, #2
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	409a      	lsls	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d012      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00b      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed4:	2204      	movs	r2, #4
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee0:	f043 0204 	orr.w	r2, r3, #4
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eec:	2210      	movs	r2, #16
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d043      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d03c      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0a:	2210      	movs	r2, #16
 8001f0c:	409a      	lsls	r2, r3
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d018      	beq.n	8001f52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d108      	bne.n	8001f40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d024      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	4798      	blx	r3
 8001f3e:	e01f      	b.n	8001f80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d01b      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	4798      	blx	r3
 8001f50:	e016      	b.n	8001f80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d107      	bne.n	8001f70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0208 	bic.w	r2, r2, #8
 8001f6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f84:	2220      	movs	r2, #32
 8001f86:	409a      	lsls	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 808f 	beq.w	80020b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0310 	and.w	r3, r3, #16
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 8087 	beq.w	80020b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b05      	cmp	r3, #5
 8001fb8:	d136      	bne.n	8002028 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0216 	bic.w	r2, r2, #22
 8001fc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d103      	bne.n	8001fea <HAL_DMA_IRQHandler+0x1da>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d007      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0208 	bic.w	r2, r2, #8
 8001ff8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffe:	223f      	movs	r2, #63	; 0x3f
 8002000:	409a      	lsls	r2, r3
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800201a:	2b00      	cmp	r3, #0
 800201c:	d07e      	beq.n	800211c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	4798      	blx	r3
        }
        return;
 8002026:	e079      	b.n	800211c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d01d      	beq.n	8002072 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10d      	bne.n	8002060 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002048:	2b00      	cmp	r3, #0
 800204a:	d031      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	4798      	blx	r3
 8002054:	e02c      	b.n	80020b0 <HAL_DMA_IRQHandler+0x2a0>
 8002056:	bf00      	nop
 8002058:	20000010 	.word	0x20000010
 800205c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002064:	2b00      	cmp	r3, #0
 8002066:	d023      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	4798      	blx	r3
 8002070:	e01e      	b.n	80020b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10f      	bne.n	80020a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0210 	bic.w	r2, r2, #16
 800208e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d032      	beq.n	800211e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d022      	beq.n	800210a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2205      	movs	r2, #5
 80020c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0201 	bic.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	3301      	adds	r3, #1
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d307      	bcc.n	80020f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f2      	bne.n	80020dc <HAL_DMA_IRQHandler+0x2cc>
 80020f6:	e000      	b.n	80020fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210e:	2b00      	cmp	r3, #0
 8002110:	d005      	beq.n	800211e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	4798      	blx	r3
 800211a:	e000      	b.n	800211e <HAL_DMA_IRQHandler+0x30e>
        return;
 800211c:	bf00      	nop
    }
  }
}
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
 8002130:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002140:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b40      	cmp	r3, #64	; 0x40
 8002150:	d108      	bne.n	8002164 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002162:	e007      	b.n	8002174 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	60da      	str	r2, [r3, #12]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	3b10      	subs	r3, #16
 8002190:	4a14      	ldr	r2, [pc, #80]	; (80021e4 <DMA_CalcBaseAndBitshift+0x64>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	091b      	lsrs	r3, r3, #4
 8002198:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800219a:	4a13      	ldr	r2, [pc, #76]	; (80021e8 <DMA_CalcBaseAndBitshift+0x68>)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4413      	add	r3, r2
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d909      	bls.n	80021c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021b6:	f023 0303 	bic.w	r3, r3, #3
 80021ba:	1d1a      	adds	r2, r3, #4
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	659a      	str	r2, [r3, #88]	; 0x58
 80021c0:	e007      	b.n	80021d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021ca:	f023 0303 	bic.w	r3, r3, #3
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	aaaaaaab 	.word	0xaaaaaaab
 80021e8:	08009588 	.word	0x08009588

080021ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d11f      	bne.n	8002246 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2b03      	cmp	r3, #3
 800220a:	d856      	bhi.n	80022ba <DMA_CheckFifoParam+0xce>
 800220c:	a201      	add	r2, pc, #4	; (adr r2, 8002214 <DMA_CheckFifoParam+0x28>)
 800220e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002212:	bf00      	nop
 8002214:	08002225 	.word	0x08002225
 8002218:	08002237 	.word	0x08002237
 800221c:	08002225 	.word	0x08002225
 8002220:	080022bb 	.word	0x080022bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d046      	beq.n	80022be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002234:	e043      	b.n	80022be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800223e:	d140      	bne.n	80022c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002244:	e03d      	b.n	80022c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800224e:	d121      	bne.n	8002294 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b03      	cmp	r3, #3
 8002254:	d837      	bhi.n	80022c6 <DMA_CheckFifoParam+0xda>
 8002256:	a201      	add	r2, pc, #4	; (adr r2, 800225c <DMA_CheckFifoParam+0x70>)
 8002258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225c:	0800226d 	.word	0x0800226d
 8002260:	08002273 	.word	0x08002273
 8002264:	0800226d 	.word	0x0800226d
 8002268:	08002285 	.word	0x08002285
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]
      break;
 8002270:	e030      	b.n	80022d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d025      	beq.n	80022ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002282:	e022      	b.n	80022ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800228c:	d11f      	bne.n	80022ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002292:	e01c      	b.n	80022ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d903      	bls.n	80022a2 <DMA_CheckFifoParam+0xb6>
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	2b03      	cmp	r3, #3
 800229e:	d003      	beq.n	80022a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022a0:	e018      	b.n	80022d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	73fb      	strb	r3, [r7, #15]
      break;
 80022a6:	e015      	b.n	80022d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00e      	beq.n	80022d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	73fb      	strb	r3, [r7, #15]
      break;
 80022b8:	e00b      	b.n	80022d2 <DMA_CheckFifoParam+0xe6>
      break;
 80022ba:	bf00      	nop
 80022bc:	e00a      	b.n	80022d4 <DMA_CheckFifoParam+0xe8>
      break;
 80022be:	bf00      	nop
 80022c0:	e008      	b.n	80022d4 <DMA_CheckFifoParam+0xe8>
      break;
 80022c2:	bf00      	nop
 80022c4:	e006      	b.n	80022d4 <DMA_CheckFifoParam+0xe8>
      break;
 80022c6:	bf00      	nop
 80022c8:	e004      	b.n	80022d4 <DMA_CheckFifoParam+0xe8>
      break;
 80022ca:	bf00      	nop
 80022cc:	e002      	b.n	80022d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80022ce:	bf00      	nop
 80022d0:	e000      	b.n	80022d4 <DMA_CheckFifoParam+0xe8>
      break;
 80022d2:	bf00      	nop
    }
  } 
  
  return status; 
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	; 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
 80022fe:	e159      	b.n	80025b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002300:	2201      	movs	r2, #1
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4013      	ands	r3, r2
 8002312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	429a      	cmp	r2, r3
 800231a:	f040 8148 	bne.w	80025ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b01      	cmp	r3, #1
 8002328:	d005      	beq.n	8002336 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002332:	2b02      	cmp	r3, #2
 8002334:	d130      	bne.n	8002398 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	2203      	movs	r2, #3
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4013      	ands	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800236c:	2201      	movs	r2, #1
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 0201 	and.w	r2, r3, #1
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d017      	beq.n	80023d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d123      	bne.n	8002428 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	08da      	lsrs	r2, r3, #3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3208      	adds	r2, #8
 80023e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	220f      	movs	r2, #15
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	08da      	lsrs	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3208      	adds	r2, #8
 8002422:	69b9      	ldr	r1, [r7, #24]
 8002424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	2203      	movs	r2, #3
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 0203 	and.w	r2, r3, #3
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80a2 	beq.w	80025ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	4b57      	ldr	r3, [pc, #348]	; (80025cc <HAL_GPIO_Init+0x2e8>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	4a56      	ldr	r2, [pc, #344]	; (80025cc <HAL_GPIO_Init+0x2e8>)
 8002474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002478:	6453      	str	r3, [r2, #68]	; 0x44
 800247a:	4b54      	ldr	r3, [pc, #336]	; (80025cc <HAL_GPIO_Init+0x2e8>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002486:	4a52      	ldr	r2, [pc, #328]	; (80025d0 <HAL_GPIO_Init+0x2ec>)
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	089b      	lsrs	r3, r3, #2
 800248c:	3302      	adds	r3, #2
 800248e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	220f      	movs	r2, #15
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a49      	ldr	r2, [pc, #292]	; (80025d4 <HAL_GPIO_Init+0x2f0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d019      	beq.n	80024e6 <HAL_GPIO_Init+0x202>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a48      	ldr	r2, [pc, #288]	; (80025d8 <HAL_GPIO_Init+0x2f4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d013      	beq.n	80024e2 <HAL_GPIO_Init+0x1fe>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a47      	ldr	r2, [pc, #284]	; (80025dc <HAL_GPIO_Init+0x2f8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00d      	beq.n	80024de <HAL_GPIO_Init+0x1fa>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a46      	ldr	r2, [pc, #280]	; (80025e0 <HAL_GPIO_Init+0x2fc>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d007      	beq.n	80024da <HAL_GPIO_Init+0x1f6>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a45      	ldr	r2, [pc, #276]	; (80025e4 <HAL_GPIO_Init+0x300>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d101      	bne.n	80024d6 <HAL_GPIO_Init+0x1f2>
 80024d2:	2304      	movs	r3, #4
 80024d4:	e008      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024d6:	2307      	movs	r3, #7
 80024d8:	e006      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024da:	2303      	movs	r3, #3
 80024dc:	e004      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024de:	2302      	movs	r3, #2
 80024e0:	e002      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024e6:	2300      	movs	r3, #0
 80024e8:	69fa      	ldr	r2, [r7, #28]
 80024ea:	f002 0203 	and.w	r2, r2, #3
 80024ee:	0092      	lsls	r2, r2, #2
 80024f0:	4093      	lsls	r3, r2
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f8:	4935      	ldr	r1, [pc, #212]	; (80025d0 <HAL_GPIO_Init+0x2ec>)
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	089b      	lsrs	r3, r3, #2
 80024fe:	3302      	adds	r3, #2
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002506:	4b38      	ldr	r3, [pc, #224]	; (80025e8 <HAL_GPIO_Init+0x304>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800252a:	4a2f      	ldr	r2, [pc, #188]	; (80025e8 <HAL_GPIO_Init+0x304>)
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002530:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <HAL_GPIO_Init+0x304>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002554:	4a24      	ldr	r2, [pc, #144]	; (80025e8 <HAL_GPIO_Init+0x304>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800255a:	4b23      	ldr	r3, [pc, #140]	; (80025e8 <HAL_GPIO_Init+0x304>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800257e:	4a1a      	ldr	r2, [pc, #104]	; (80025e8 <HAL_GPIO_Init+0x304>)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002584:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <HAL_GPIO_Init+0x304>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a8:	4a0f      	ldr	r2, [pc, #60]	; (80025e8 <HAL_GPIO_Init+0x304>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3301      	adds	r3, #1
 80025b2:	61fb      	str	r3, [r7, #28]
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	2b0f      	cmp	r3, #15
 80025b8:	f67f aea2 	bls.w	8002300 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025bc:	bf00      	nop
 80025be:	bf00      	nop
 80025c0:	3724      	adds	r7, #36	; 0x24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40013800 	.word	0x40013800
 80025d4:	40020000 	.word	0x40020000
 80025d8:	40020400 	.word	0x40020400
 80025dc:	40020800 	.word	0x40020800
 80025e0:	40020c00 	.word	0x40020c00
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40013c00 	.word	0x40013c00

080025ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
 80025f8:	4613      	mov	r3, r2
 80025fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025fc:	787b      	ldrb	r3, [r7, #1]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002602:	887a      	ldrh	r2, [r7, #2]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002608:	e003      	b.n	8002612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800260a:	887b      	ldrh	r3, [r7, #2]
 800260c:	041a      	lsls	r2, r3, #16
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	619a      	str	r2, [r3, #24]
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800261e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002620:	b08f      	sub	sp, #60	; 0x3c
 8002622:	af0a      	add	r7, sp, #40	; 0x28
 8002624:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e10f      	b.n	8002850 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f005 ffaa 	bl	80085a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2203      	movs	r2, #3
 8002654:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002660:	2b00      	cmp	r3, #0
 8002662:	d102      	bne.n	800266a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f002 fa91 	bl	8004b96 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	603b      	str	r3, [r7, #0]
 800267a:	687e      	ldr	r6, [r7, #4]
 800267c:	466d      	mov	r5, sp
 800267e:	f106 0410 	add.w	r4, r6, #16
 8002682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800268a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800268e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002692:	1d33      	adds	r3, r6, #4
 8002694:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002696:	6838      	ldr	r0, [r7, #0]
 8002698:	f002 f968 	bl	800496c <USB_CoreInit>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d005      	beq.n	80026ae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2202      	movs	r2, #2
 80026a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e0d0      	b.n	8002850 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2100      	movs	r1, #0
 80026b4:	4618      	mov	r0, r3
 80026b6:	f002 fa7f 	bl	8004bb8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ba:	2300      	movs	r3, #0
 80026bc:	73fb      	strb	r3, [r7, #15]
 80026be:	e04a      	b.n	8002756 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026c0:	7bfa      	ldrb	r2, [r7, #15]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4413      	add	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	333d      	adds	r3, #61	; 0x3d
 80026d0:	2201      	movs	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026d4:	7bfa      	ldrb	r2, [r7, #15]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	333c      	adds	r3, #60	; 0x3c
 80026e4:	7bfa      	ldrb	r2, [r7, #15]
 80026e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026e8:	7bfa      	ldrb	r2, [r7, #15]
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	b298      	uxth	r0, r3
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	4413      	add	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	3344      	adds	r3, #68	; 0x44
 80026fc:	4602      	mov	r2, r0
 80026fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	3340      	adds	r3, #64	; 0x40
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002714:	7bfa      	ldrb	r2, [r7, #15]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	3348      	adds	r3, #72	; 0x48
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4413      	add	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	334c      	adds	r3, #76	; 0x4c
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800273c:	7bfa      	ldrb	r2, [r7, #15]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4413      	add	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	3354      	adds	r3, #84	; 0x54
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	3301      	adds	r3, #1
 8002754:	73fb      	strb	r3, [r7, #15]
 8002756:	7bfa      	ldrb	r2, [r7, #15]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	429a      	cmp	r2, r3
 800275e:	d3af      	bcc.n	80026c0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002760:	2300      	movs	r3, #0
 8002762:	73fb      	strb	r3, [r7, #15]
 8002764:	e044      	b.n	80027f0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002766:	7bfa      	ldrb	r2, [r7, #15]
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4413      	add	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	440b      	add	r3, r1
 8002774:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800277c:	7bfa      	ldrb	r2, [r7, #15]
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4413      	add	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002792:	7bfa      	ldrb	r2, [r7, #15]
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027a8:	7bfa      	ldrb	r2, [r7, #15]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4413      	add	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027be:	7bfa      	ldrb	r2, [r7, #15]
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4413      	add	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	440b      	add	r3, r1
 80027cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027d4:	7bfa      	ldrb	r2, [r7, #15]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	3301      	adds	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
 80027f0:	7bfa      	ldrb	r2, [r7, #15]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d3b5      	bcc.n	8002766 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	687e      	ldr	r6, [r7, #4]
 8002802:	466d      	mov	r5, sp
 8002804:	f106 0410 	add.w	r4, r6, #16
 8002808:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800280a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800280c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800280e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002810:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002814:	e885 0003 	stmia.w	r5, {r0, r1}
 8002818:	1d33      	adds	r3, r6, #4
 800281a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800281c:	6838      	ldr	r0, [r7, #0]
 800281e:	f002 fa17 	bl	8004c50 <USB_DevInit>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e00d      	b.n	8002850 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f003 fb66 	bl	8005f1a <USB_DevDisconnect>

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002858 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_PCD_Start+0x1c>
 8002870:	2302      	movs	r3, #2
 8002872:	e020      	b.n	80028b6 <HAL_PCD_Start+0x5e>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002880:	2b01      	cmp	r3, #1
 8002882:	d109      	bne.n	8002898 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002888:	2b01      	cmp	r3, #1
 800288a:	d005      	beq.n	8002898 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002890:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f002 f969 	bl	8004b74 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f003 fb16 	bl	8005ed8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028be:	b590      	push	{r4, r7, lr}
 80028c0:	b08d      	sub	sp, #52	; 0x34
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f003 fbd4 	bl	8006082 <USB_GetMode>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f040 848a 	bne.w	80031f6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f003 fb38 	bl	8005f5c <USB_ReadInterrupts>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 8480 	beq.w	80031f4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	0a1b      	lsrs	r3, r3, #8
 80028fe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f003 fb25 	bl	8005f5c <USB_ReadInterrupts>
 8002912:	4603      	mov	r3, r0
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b02      	cmp	r3, #2
 800291a:	d107      	bne.n	800292c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695a      	ldr	r2, [r3, #20]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f002 0202 	and.w	r2, r2, #2
 800292a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f003 fb13 	bl	8005f5c <USB_ReadInterrupts>
 8002936:	4603      	mov	r3, r0
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	2b10      	cmp	r3, #16
 800293e:	d161      	bne.n	8002a04 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699a      	ldr	r2, [r3, #24]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0210 	bic.w	r2, r2, #16
 800294e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	f003 020f 	and.w	r2, r3, #15
 800295c:	4613      	mov	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	4413      	add	r3, r2
 800296c:	3304      	adds	r3, #4
 800296e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	0c5b      	lsrs	r3, r3, #17
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	2b02      	cmp	r3, #2
 800297a:	d124      	bne.n	80029c6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002982:	4013      	ands	r3, r2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d035      	beq.n	80029f4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	091b      	lsrs	r3, r3, #4
 8002990:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002992:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002996:	b29b      	uxth	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	6a38      	ldr	r0, [r7, #32]
 800299c:	f003 f94a 	bl	8005c34 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	091b      	lsrs	r3, r3, #4
 80029a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029ac:	441a      	add	r2, r3
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	6a1a      	ldr	r2, [r3, #32]
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029be:	441a      	add	r2, r3
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	621a      	str	r2, [r3, #32]
 80029c4:	e016      	b.n	80029f4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	0c5b      	lsrs	r3, r3, #17
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	2b06      	cmp	r3, #6
 80029d0:	d110      	bne.n	80029f4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029d8:	2208      	movs	r2, #8
 80029da:	4619      	mov	r1, r3
 80029dc:	6a38      	ldr	r0, [r7, #32]
 80029de:	f003 f929 	bl	8005c34 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	6a1a      	ldr	r2, [r3, #32]
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029ee:	441a      	add	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699a      	ldr	r2, [r3, #24]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0210 	orr.w	r2, r2, #16
 8002a02:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f003 faa7 	bl	8005f5c <USB_ReadInterrupts>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a18:	f040 80a7 	bne.w	8002b6a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f003 faac 	bl	8005f82 <USB_ReadDevAllOutEpInterrupt>
 8002a2a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a2c:	e099      	b.n	8002b62 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 808e 	beq.w	8002b56 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f003 fad0 	bl	8005fea <USB_ReadDevOutEPInterrupt>
 8002a4a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00c      	beq.n	8002a70 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	015a      	lsls	r2, r3, #5
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a62:	461a      	mov	r2, r3
 8002a64:	2301      	movs	r3, #1
 8002a66:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fec2 	bl	80037f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00c      	beq.n	8002a94 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	015a      	lsls	r2, r3, #5
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	4413      	add	r3, r2
 8002a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a86:	461a      	mov	r2, r3
 8002a88:	2308      	movs	r3, #8
 8002a8a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 ff98 	bl	80039c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	f003 0310 	and.w	r3, r3, #16
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d008      	beq.n	8002ab0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aaa:	461a      	mov	r2, r3
 8002aac:	2310      	movs	r3, #16
 8002aae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d030      	beq.n	8002b1c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac2:	2b80      	cmp	r3, #128	; 0x80
 8002ac4:	d109      	bne.n	8002ada <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	69fa      	ldr	r2, [r7, #28]
 8002ad0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ad4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ad8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002adc:	4613      	mov	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	4413      	add	r3, r2
 8002aec:	3304      	adds	r3, #4
 8002aee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	78db      	ldrb	r3, [r3, #3]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d108      	bne.n	8002b0a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2200      	movs	r2, #0
 8002afc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	4619      	mov	r1, r3
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f005 fe49 	bl	800879c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	015a      	lsls	r2, r3, #5
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	4413      	add	r3, r2
 8002b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b16:	461a      	mov	r2, r3
 8002b18:	2302      	movs	r3, #2
 8002b1a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	f003 0320 	and.w	r3, r3, #32
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d008      	beq.n	8002b38 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	015a      	lsls	r2, r3, #5
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b32:	461a      	mov	r2, r3
 8002b34:	2320      	movs	r3, #32
 8002b36:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	015a      	lsls	r2, r3, #5
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b4e:	461a      	mov	r2, r3
 8002b50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b54:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	3301      	adds	r3, #1
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5e:	085b      	lsrs	r3, r3, #1
 8002b60:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f47f af62 	bne.w	8002a2e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f003 f9f4 	bl	8005f5c <USB_ReadInterrupts>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b7e:	f040 80db 	bne.w	8002d38 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f003 fa15 	bl	8005fb6 <USB_ReadDevAllInEpInterrupt>
 8002b8c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b92:	e0cd      	b.n	8002d30 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 80c2 	beq.w	8002d24 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	4611      	mov	r1, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f003 fa3b 	bl	8006026 <USB_ReadDevInEPInterrupt>
 8002bb0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d057      	beq.n	8002c6c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69f9      	ldr	r1, [r7, #28]
 8002bd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002bdc:	4013      	ands	r3, r2
 8002bde:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	015a      	lsls	r2, r3, #5
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bec:	461a      	mov	r2, r3
 8002bee:	2301      	movs	r3, #1
 8002bf0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d132      	bne.n	8002c60 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bfe:	4613      	mov	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4413      	add	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	334c      	adds	r3, #76	; 0x4c
 8002c0a:	6819      	ldr	r1, [r3, #0]
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c10:	4613      	mov	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4403      	add	r3, r0
 8002c1a:	3348      	adds	r3, #72	; 0x48
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4419      	add	r1, r3
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c24:	4613      	mov	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4403      	add	r3, r0
 8002c2e:	334c      	adds	r3, #76	; 0x4c
 8002c30:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d113      	bne.n	8002c60 <HAL_PCD_IRQHandler+0x3a2>
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	3354      	adds	r3, #84	; 0x54
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d108      	bne.n	8002c60 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c58:	461a      	mov	r2, r3
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	f003 fa42 	bl	80060e4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	4619      	mov	r1, r3
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f005 fd1d 	bl	80086a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d008      	beq.n	8002c88 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c82:	461a      	mov	r2, r3
 8002c84:	2308      	movs	r3, #8
 8002c86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d008      	beq.n	8002ca4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	2310      	movs	r3, #16
 8002ca2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d008      	beq.n	8002cc0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cba:	461a      	mov	r2, r3
 8002cbc:	2340      	movs	r3, #64	; 0x40
 8002cbe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d023      	beq.n	8002d12 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002cca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ccc:	6a38      	ldr	r0, [r7, #32]
 8002cce:	f002 f923 	bl	8004f18 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	3338      	adds	r3, #56	; 0x38
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	78db      	ldrb	r3, [r3, #3]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d108      	bne.n	8002d00 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f005 fd60 	bl	80087c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	015a      	lsls	r2, r3, #5
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	4413      	add	r3, r2
 8002d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	2302      	movs	r3, #2
 8002d10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fcdb 	bl	80036da <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	3301      	adds	r3, #1
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2c:	085b      	lsrs	r3, r3, #1
 8002d2e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f47f af2e 	bne.w	8002b94 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f003 f90d 	bl	8005f5c <USB_ReadInterrupts>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d4c:	d122      	bne.n	8002d94 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	69fa      	ldr	r2, [r7, #28]
 8002d58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d5c:	f023 0301 	bic.w	r3, r3, #1
 8002d60:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d108      	bne.n	8002d7e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d74:	2100      	movs	r1, #0
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fec2 	bl	8003b00 <HAL_PCDEx_LPM_Callback>
 8002d7c:	e002      	b.n	8002d84 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f005 fcfe 	bl	8008780 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695a      	ldr	r2, [r3, #20]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002d92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f003 f8df 	bl	8005f5c <USB_ReadInterrupts>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002da8:	d112      	bne.n	8002dd0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d102      	bne.n	8002dc0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f005 fcba 	bl	8008734 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695a      	ldr	r2, [r3, #20]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002dce:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f003 f8c1 	bl	8005f5c <USB_ReadInterrupts>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de4:	f040 80b7 	bne.w	8002f56 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002df6:	f023 0301 	bic.w	r3, r3, #1
 8002dfa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2110      	movs	r1, #16
 8002e02:	4618      	mov	r0, r3
 8002e04:	f002 f888 	bl	8004f18 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e08:	2300      	movs	r3, #0
 8002e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e0c:	e046      	b.n	8002e9c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e20:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e32:	0151      	lsls	r1, r2, #5
 8002e34:	69fa      	ldr	r2, [r7, #28]
 8002e36:	440a      	add	r2, r1
 8002e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e40:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e54:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e66:	0151      	lsls	r1, r2, #5
 8002e68:	69fa      	ldr	r2, [r7, #28]
 8002e6a:	440a      	add	r2, r1
 8002e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e74:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e86:	0151      	lsls	r1, r2, #5
 8002e88:	69fa      	ldr	r2, [r7, #28]
 8002e8a:	440a      	add	r2, r1
 8002e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e94:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e98:	3301      	adds	r3, #1
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d3b3      	bcc.n	8002e0e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	69fa      	ldr	r2, [r7, #28]
 8002eb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eb4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002eb8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d016      	beq.n	8002ef0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ecc:	69fa      	ldr	r2, [r7, #28]
 8002ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ed2:	f043 030b 	orr.w	r3, r3, #11
 8002ed6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ee8:	f043 030b 	orr.w	r3, r3, #11
 8002eec:	6453      	str	r3, [r2, #68]	; 0x44
 8002eee:	e015      	b.n	8002f1c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	69fa      	ldr	r2, [r7, #28]
 8002efa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002efe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f02:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002f06:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	69fa      	ldr	r2, [r7, #28]
 8002f12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f16:	f043 030b 	orr.w	r3, r3, #11
 8002f1a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	69fa      	ldr	r2, [r7, #28]
 8002f26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f2a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f2e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6818      	ldr	r0, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f40:	461a      	mov	r2, r3
 8002f42:	f003 f8cf 	bl	80060e4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002f54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f002 fffe 	bl	8005f5c <USB_ReadInterrupts>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f6a:	d124      	bne.n	8002fb6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f003 f894 	bl	800609e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f002 f849 	bl	8005012 <USB_GetDevSpeed>
 8002f80:	4603      	mov	r3, r0
 8002f82:	461a      	mov	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681c      	ldr	r4, [r3, #0]
 8002f8c:	f001 f9e8 	bl	8004360 <HAL_RCC_GetHCLKFreq>
 8002f90:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	f001 fd48 	bl	8004a30 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f005 fba8 	bl	80086f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002fb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f002 ffce 	bl	8005f5c <USB_ReadInterrupts>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d10a      	bne.n	8002fe0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f005 fb85 	bl	80086da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f002 0208 	and.w	r2, r2, #8
 8002fde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f002 ffb9 	bl	8005f5c <USB_ReadInterrupts>
 8002fea:	4603      	mov	r3, r0
 8002fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff0:	2b80      	cmp	r3, #128	; 0x80
 8002ff2:	d122      	bne.n	800303a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003000:	2301      	movs	r3, #1
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
 8003004:	e014      	b.n	8003030 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300a:	4613      	mov	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d105      	bne.n	800302a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	b2db      	uxtb	r3, r3
 8003022:	4619      	mov	r1, r3
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 fb27 	bl	8003678 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	3301      	adds	r3, #1
 800302e:	627b      	str	r3, [r7, #36]	; 0x24
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003036:	429a      	cmp	r2, r3
 8003038:	d3e5      	bcc.n	8003006 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f002 ff8c 	bl	8005f5c <USB_ReadInterrupts>
 8003044:	4603      	mov	r3, r0
 8003046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800304a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800304e:	d13b      	bne.n	80030c8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003050:	2301      	movs	r3, #1
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
 8003054:	e02b      	b.n	80030ae <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	4413      	add	r3, r2
 800305e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306a:	4613      	mov	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	4413      	add	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	3340      	adds	r3, #64	; 0x40
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d115      	bne.n	80030a8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800307c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800307e:	2b00      	cmp	r3, #0
 8003080:	da12      	bge.n	80030a8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003086:	4613      	mov	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	333f      	adds	r3, #63	; 0x3f
 8003092:	2201      	movs	r2, #1
 8003094:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	b2db      	uxtb	r3, r3
 800309a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	4619      	mov	r1, r3
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fae8 	bl	8003678 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	3301      	adds	r3, #1
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d3ce      	bcc.n	8003056 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80030c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f002 ff45 	bl	8005f5c <USB_ReadInterrupts>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030dc:	d155      	bne.n	800318a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030de:	2301      	movs	r3, #1
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
 80030e2:	e045      	b.n	8003170 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	015a      	lsls	r2, r3, #5
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	4413      	add	r3, r2
 80030ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f8:	4613      	mov	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d12e      	bne.n	800316a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800310c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800310e:	2b00      	cmp	r3, #0
 8003110:	da2b      	bge.n	800316a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800311e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003122:	429a      	cmp	r2, r3
 8003124:	d121      	bne.n	800316a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312a:	4613      	mov	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4413      	add	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003138:	2201      	movs	r2, #1
 800313a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10a      	bne.n	800316a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	69fa      	ldr	r2, [r7, #28]
 800315e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003166:	6053      	str	r3, [r2, #4]
            break;
 8003168:	e007      	b.n	800317a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	3301      	adds	r3, #1
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003176:	429a      	cmp	r2, r3
 8003178:	d3b4      	bcc.n	80030e4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695a      	ldr	r2, [r3, #20]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003188:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f002 fee4 	bl	8005f5c <USB_ReadInterrupts>
 8003194:	4603      	mov	r3, r0
 8003196:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800319a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319e:	d10a      	bne.n	80031b6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f005 fb1f 	bl	80087e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695a      	ldr	r2, [r3, #20]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80031b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f002 fece 	bl	8005f5c <USB_ReadInterrupts>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d115      	bne.n	80031f6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f005 fb0f 	bl	8008800 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6859      	ldr	r1, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	605a      	str	r2, [r3, #4]
 80031f2:	e000      	b.n	80031f6 <HAL_PCD_IRQHandler+0x938>
      return;
 80031f4:	bf00      	nop
    }
  }
}
 80031f6:	3734      	adds	r7, #52	; 0x34
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd90      	pop	{r4, r7, pc}

080031fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_PCD_SetAddress+0x1a>
 8003212:	2302      	movs	r3, #2
 8003214:	e013      	b.n	800323e <HAL_PCD_SetAddress+0x42>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	78fa      	ldrb	r2, [r7, #3]
 800322c:	4611      	mov	r1, r2
 800322e:	4618      	mov	r0, r3
 8003230:	f002 fe2c 	bl	8005e8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	4608      	mov	r0, r1
 8003250:	4611      	mov	r1, r2
 8003252:	461a      	mov	r2, r3
 8003254:	4603      	mov	r3, r0
 8003256:	70fb      	strb	r3, [r7, #3]
 8003258:	460b      	mov	r3, r1
 800325a:	803b      	strh	r3, [r7, #0]
 800325c:	4613      	mov	r3, r2
 800325e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003264:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003268:	2b00      	cmp	r3, #0
 800326a:	da0f      	bge.n	800328c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	f003 020f 	and.w	r2, r3, #15
 8003272:	4613      	mov	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	3338      	adds	r3, #56	; 0x38
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	4413      	add	r3, r2
 8003280:	3304      	adds	r3, #4
 8003282:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2201      	movs	r2, #1
 8003288:	705a      	strb	r2, [r3, #1]
 800328a:	e00f      	b.n	80032ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800328c:	78fb      	ldrb	r3, [r7, #3]
 800328e:	f003 020f 	and.w	r2, r3, #15
 8003292:	4613      	mov	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	4413      	add	r3, r2
 80032a2:	3304      	adds	r3, #4
 80032a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80032b8:	883a      	ldrh	r2, [r7, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	78ba      	ldrb	r2, [r7, #2]
 80032c2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	785b      	ldrb	r3, [r3, #1]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d004      	beq.n	80032d6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032d6:	78bb      	ldrb	r3, [r7, #2]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d102      	bne.n	80032e2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <HAL_PCD_EP_Open+0xaa>
 80032ec:	2302      	movs	r3, #2
 80032ee:	e00e      	b.n	800330e <HAL_PCD_EP_Open+0xc8>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68f9      	ldr	r1, [r7, #12]
 80032fe:	4618      	mov	r0, r3
 8003300:	f001 feac 	bl	800505c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800330c:	7afb      	ldrb	r3, [r7, #11]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b084      	sub	sp, #16
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	460b      	mov	r3, r1
 8003320:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003322:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003326:	2b00      	cmp	r3, #0
 8003328:	da0f      	bge.n	800334a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	f003 020f 	and.w	r2, r3, #15
 8003330:	4613      	mov	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	3338      	adds	r3, #56	; 0x38
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	4413      	add	r3, r2
 800333e:	3304      	adds	r3, #4
 8003340:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2201      	movs	r2, #1
 8003346:	705a      	strb	r2, [r3, #1]
 8003348:	e00f      	b.n	800336a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	f003 020f 	and.w	r2, r3, #15
 8003350:	4613      	mov	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	4413      	add	r3, r2
 8003360:	3304      	adds	r3, #4
 8003362:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800336a:	78fb      	ldrb	r3, [r7, #3]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	b2da      	uxtb	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_PCD_EP_Close+0x6e>
 8003380:	2302      	movs	r3, #2
 8003382:	e00e      	b.n	80033a2 <HAL_PCD_EP_Close+0x8c>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68f9      	ldr	r1, [r7, #12]
 8003392:	4618      	mov	r0, r3
 8003394:	f001 feea 	bl	800516c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b086      	sub	sp, #24
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	60f8      	str	r0, [r7, #12]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	603b      	str	r3, [r7, #0]
 80033b6:	460b      	mov	r3, r1
 80033b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033ba:	7afb      	ldrb	r3, [r7, #11]
 80033bc:	f003 020f 	and.w	r2, r3, #15
 80033c0:	4613      	mov	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4413      	add	r3, r2
 80033d0:	3304      	adds	r3, #4
 80033d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2200      	movs	r2, #0
 80033e4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2200      	movs	r2, #0
 80033ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033ec:	7afb      	ldrb	r3, [r7, #11]
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d102      	bne.n	8003406 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003406:	7afb      	ldrb	r3, [r7, #11]
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	2b00      	cmp	r3, #0
 800340e:	d109      	bne.n	8003424 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6818      	ldr	r0, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	461a      	mov	r2, r3
 800341c:	6979      	ldr	r1, [r7, #20]
 800341e:	f002 f9c9 	bl	80057b4 <USB_EP0StartXfer>
 8003422:	e008      	b.n	8003436 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6818      	ldr	r0, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	b2db      	uxtb	r3, r3
 800342e:	461a      	mov	r2, r3
 8003430:	6979      	ldr	r1, [r7, #20]
 8003432:	f001 ff77 	bl	8005324 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	f003 020f 	and.w	r2, r3, #15
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4413      	add	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003462:	681b      	ldr	r3, [r3, #0]
}
 8003464:	4618      	mov	r0, r3
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	460b      	mov	r3, r1
 800347e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003480:	7afb      	ldrb	r3, [r7, #11]
 8003482:	f003 020f 	and.w	r2, r3, #15
 8003486:	4613      	mov	r3, r2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	4413      	add	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	3338      	adds	r3, #56	; 0x38
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4413      	add	r3, r2
 8003494:	3304      	adds	r3, #4
 8003496:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	2200      	movs	r2, #0
 80034a8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2201      	movs	r2, #1
 80034ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034b0:	7afb      	ldrb	r3, [r7, #11]
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d102      	bne.n	80034ca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034ca:	7afb      	ldrb	r3, [r7, #11]
 80034cc:	f003 030f 	and.w	r3, r3, #15
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d109      	bne.n	80034e8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	461a      	mov	r2, r3
 80034e0:	6979      	ldr	r1, [r7, #20]
 80034e2:	f002 f967 	bl	80057b4 <USB_EP0StartXfer>
 80034e6:	e008      	b.n	80034fa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	6979      	ldr	r1, [r7, #20]
 80034f6:	f001 ff15 	bl	8005324 <USB_EPStartXfer>
  }

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003510:	78fb      	ldrb	r3, [r7, #3]
 8003512:	f003 020f 	and.w	r2, r3, #15
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	429a      	cmp	r2, r3
 800351c:	d901      	bls.n	8003522 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e050      	b.n	80035c4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003522:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003526:	2b00      	cmp	r3, #0
 8003528:	da0f      	bge.n	800354a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800352a:	78fb      	ldrb	r3, [r7, #3]
 800352c:	f003 020f 	and.w	r2, r3, #15
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	3338      	adds	r3, #56	; 0x38
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	4413      	add	r3, r2
 800353e:	3304      	adds	r3, #4
 8003540:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2201      	movs	r2, #1
 8003546:	705a      	strb	r2, [r3, #1]
 8003548:	e00d      	b.n	8003566 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800354a:	78fa      	ldrb	r2, [r7, #3]
 800354c:	4613      	mov	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4413      	add	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	4413      	add	r3, r2
 800355c:	3304      	adds	r3, #4
 800355e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800356c:	78fb      	ldrb	r3, [r7, #3]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	b2da      	uxtb	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_PCD_EP_SetStall+0x82>
 8003582:	2302      	movs	r3, #2
 8003584:	e01e      	b.n	80035c4 <HAL_PCD_EP_SetStall+0xc0>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68f9      	ldr	r1, [r7, #12]
 8003594:	4618      	mov	r0, r3
 8003596:	f002 fba5 	bl	8005ce4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800359a:	78fb      	ldrb	r3, [r7, #3]
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10a      	bne.n	80035ba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	b2d9      	uxtb	r1, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035b4:	461a      	mov	r2, r3
 80035b6:	f002 fd95 	bl	80060e4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035d8:	78fb      	ldrb	r3, [r7, #3]
 80035da:	f003 020f 	and.w	r2, r3, #15
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d901      	bls.n	80035ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e042      	b.n	8003670 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	da0f      	bge.n	8003612 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035f2:	78fb      	ldrb	r3, [r7, #3]
 80035f4:	f003 020f 	and.w	r2, r3, #15
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	3338      	adds	r3, #56	; 0x38
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	4413      	add	r3, r2
 8003606:	3304      	adds	r3, #4
 8003608:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2201      	movs	r2, #1
 800360e:	705a      	strb	r2, [r3, #1]
 8003610:	e00f      	b.n	8003632 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003612:	78fb      	ldrb	r3, [r7, #3]
 8003614:	f003 020f 	and.w	r2, r3, #15
 8003618:	4613      	mov	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	4413      	add	r3, r2
 8003628:	3304      	adds	r3, #4
 800362a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	b2da      	uxtb	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_PCD_EP_ClrStall+0x86>
 800364e:	2302      	movs	r3, #2
 8003650:	e00e      	b.n	8003670 <HAL_PCD_EP_ClrStall+0xa4>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68f9      	ldr	r1, [r7, #12]
 8003660:	4618      	mov	r0, r3
 8003662:	f002 fbad 	bl	8005dc0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003684:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003688:	2b00      	cmp	r3, #0
 800368a:	da0c      	bge.n	80036a6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800368c:	78fb      	ldrb	r3, [r7, #3]
 800368e:	f003 020f 	and.w	r2, r3, #15
 8003692:	4613      	mov	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4413      	add	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	3338      	adds	r3, #56	; 0x38
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	4413      	add	r3, r2
 80036a0:	3304      	adds	r3, #4
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	e00c      	b.n	80036c0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036a6:	78fb      	ldrb	r3, [r7, #3]
 80036a8:	f003 020f 	and.w	r2, r3, #15
 80036ac:	4613      	mov	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	4413      	add	r3, r2
 80036bc:	3304      	adds	r3, #4
 80036be:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68f9      	ldr	r1, [r7, #12]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f002 f9cc 	bl	8005a64 <USB_EPStopXfer>
 80036cc:	4603      	mov	r3, r0
 80036ce:	72fb      	strb	r3, [r7, #11]

  return ret;
 80036d0:	7afb      	ldrb	r3, [r7, #11]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b08a      	sub	sp, #40	; 0x28
 80036de:	af02      	add	r7, sp, #8
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	4613      	mov	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	3338      	adds	r3, #56	; 0x38
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	4413      	add	r3, r2
 80036fe:	3304      	adds	r3, #4
 8003700:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6a1a      	ldr	r2, [r3, #32]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	429a      	cmp	r2, r3
 800370c:	d901      	bls.n	8003712 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e06c      	b.n	80037ec <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	699a      	ldr	r2, [r3, #24]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	69fa      	ldr	r2, [r7, #28]
 8003724:	429a      	cmp	r2, r3
 8003726:	d902      	bls.n	800372e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	3303      	adds	r3, #3
 8003732:	089b      	lsrs	r3, r3, #2
 8003734:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003736:	e02b      	b.n	8003790 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	699a      	ldr	r2, [r3, #24]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	69fa      	ldr	r2, [r7, #28]
 800374a:	429a      	cmp	r2, r3
 800374c:	d902      	bls.n	8003754 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	3303      	adds	r3, #3
 8003758:	089b      	lsrs	r3, r3, #2
 800375a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6919      	ldr	r1, [r3, #16]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	b2da      	uxtb	r2, r3
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800376c:	b2db      	uxtb	r3, r3
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	4603      	mov	r3, r0
 8003772:	6978      	ldr	r0, [r7, #20]
 8003774:	f002 fa20 	bl	8005bb8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	441a      	add	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a1a      	ldr	r2, [r3, #32]
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	441a      	add	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d809      	bhi.n	80037ba <PCD_WriteEmptyTxFifo+0xe0>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a1a      	ldr	r2, [r3, #32]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d203      	bcs.n	80037ba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1be      	bne.n	8003738 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	699a      	ldr	r2, [r3, #24]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d811      	bhi.n	80037ea <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	2201      	movs	r2, #1
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	43db      	mvns	r3, r3
 80037e0:	6939      	ldr	r1, [r7, #16]
 80037e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037e6:	4013      	ands	r3, r2
 80037e8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3720      	adds	r7, #32
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b088      	sub	sp, #32
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	333c      	adds	r3, #60	; 0x3c
 800380c:	3304      	adds	r3, #4
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d17b      	bne.n	8003922 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b00      	cmp	r3, #0
 8003832:	d015      	beq.n	8003860 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	4a61      	ldr	r2, [pc, #388]	; (80039bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	f240 80b9 	bls.w	80039b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 80b3 	beq.w	80039b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003856:	461a      	mov	r2, r3
 8003858:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800385c:	6093      	str	r3, [r2, #8]
 800385e:	e0a7      	b.n	80039b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f003 0320 	and.w	r3, r3, #32
 8003866:	2b00      	cmp	r3, #0
 8003868:	d009      	beq.n	800387e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	4413      	add	r3, r2
 8003872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003876:	461a      	mov	r2, r3
 8003878:	2320      	movs	r3, #32
 800387a:	6093      	str	r3, [r2, #8]
 800387c:	e098      	b.n	80039b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003884:	2b00      	cmp	r3, #0
 8003886:	f040 8093 	bne.w	80039b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	4a4b      	ldr	r2, [pc, #300]	; (80039bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d90f      	bls.n	80038b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a8:	461a      	mov	r2, r3
 80038aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ae:	6093      	str	r3, [r2, #8]
 80038b0:	e07e      	b.n	80039b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	4613      	mov	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	4413      	add	r3, r2
 80038c4:	3304      	adds	r3, #4
 80038c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	69da      	ldr	r2, [r3, #28]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	0159      	lsls	r1, r3, #5
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	440b      	add	r3, r1
 80038d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038de:	1ad2      	subs	r2, r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d114      	bne.n	8003914 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d109      	bne.n	8003906 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038fc:	461a      	mov	r2, r3
 80038fe:	2101      	movs	r1, #1
 8003900:	f002 fbf0 	bl	80060e4 <USB_EP0_OutStart>
 8003904:	e006      	b.n	8003914 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	691a      	ldr	r2, [r3, #16]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	441a      	add	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	b2db      	uxtb	r3, r3
 8003918:	4619      	mov	r1, r3
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f004 fea8 	bl	8008670 <HAL_PCD_DataOutStageCallback>
 8003920:	e046      	b.n	80039b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	4a26      	ldr	r2, [pc, #152]	; (80039c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d124      	bne.n	8003974 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	4413      	add	r3, r2
 800393c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003940:	461a      	mov	r2, r3
 8003942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003946:	6093      	str	r3, [r2, #8]
 8003948:	e032      	b.n	80039b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003960:	461a      	mov	r2, r3
 8003962:	2320      	movs	r3, #32
 8003964:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	b2db      	uxtb	r3, r3
 800396a:	4619      	mov	r1, r3
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f004 fe7f 	bl	8008670 <HAL_PCD_DataOutStageCallback>
 8003972:	e01d      	b.n	80039b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d114      	bne.n	80039a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	4613      	mov	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d108      	bne.n	80039a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800399c:	461a      	mov	r2, r3
 800399e:	2100      	movs	r1, #0
 80039a0:	f002 fba0 	bl	80060e4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	4619      	mov	r1, r3
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f004 fe60 	bl	8008670 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3720      	adds	r7, #32
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	4f54300a 	.word	0x4f54300a
 80039c0:	4f54310a 	.word	0x4f54310a

080039c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	333c      	adds	r3, #60	; 0x3c
 80039dc:	3304      	adds	r3, #4
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	015a      	lsls	r2, r3, #5
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4a15      	ldr	r2, [pc, #84]	; (8003a4c <PCD_EP_OutSetupPacket_int+0x88>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d90e      	bls.n	8003a18 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d009      	beq.n	8003a18 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a10:	461a      	mov	r2, r3
 8003a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a16:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f004 fe17 	bl	800864c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4a0a      	ldr	r2, [pc, #40]	; (8003a4c <PCD_EP_OutSetupPacket_int+0x88>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d90c      	bls.n	8003a40 <PCD_EP_OutSetupPacket_int+0x7c>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d108      	bne.n	8003a40 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6818      	ldr	r0, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a38:	461a      	mov	r2, r3
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	f002 fb52 	bl	80060e4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	4f54300a 	.word	0x4f54300a

08003a50 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	70fb      	strb	r3, [r7, #3]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a68:	78fb      	ldrb	r3, [r7, #3]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d107      	bne.n	8003a7e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a6e:	883b      	ldrh	r3, [r7, #0]
 8003a70:	0419      	lsls	r1, r3, #16
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a7c:	e028      	b.n	8003ad0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a84:	0c1b      	lsrs	r3, r3, #16
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	4413      	add	r3, r2
 8003a8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	73fb      	strb	r3, [r7, #15]
 8003a90:	e00d      	b.n	8003aae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	3340      	adds	r3, #64	; 0x40
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	0c1b      	lsrs	r3, r3, #16
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
 8003aae:	7bfa      	ldrb	r2, [r7, #15]
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d3ec      	bcc.n	8003a92 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ab8:	883b      	ldrh	r3, [r7, #0]
 8003aba:	0418      	lsls	r0, r3, #16
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6819      	ldr	r1, [r3, #0]
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	4302      	orrs	r2, r0
 8003ac8:	3340      	adds	r3, #64	; 0x40
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	887a      	ldrh	r2, [r7, #2]
 8003af0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e267      	b.n	8003ffa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d075      	beq.n	8003c22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b36:	4b88      	ldr	r3, [pc, #544]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 030c 	and.w	r3, r3, #12
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d00c      	beq.n	8003b5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b42:	4b85      	ldr	r3, [pc, #532]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b4a:	2b08      	cmp	r3, #8
 8003b4c:	d112      	bne.n	8003b74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b4e:	4b82      	ldr	r3, [pc, #520]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b5a:	d10b      	bne.n	8003b74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b5c:	4b7e      	ldr	r3, [pc, #504]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d05b      	beq.n	8003c20 <HAL_RCC_OscConfig+0x108>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d157      	bne.n	8003c20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e242      	b.n	8003ffa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b7c:	d106      	bne.n	8003b8c <HAL_RCC_OscConfig+0x74>
 8003b7e:	4b76      	ldr	r3, [pc, #472]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a75      	ldr	r2, [pc, #468]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	e01d      	b.n	8003bc8 <HAL_RCC_OscConfig+0xb0>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b94:	d10c      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x98>
 8003b96:	4b70      	ldr	r3, [pc, #448]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a6f      	ldr	r2, [pc, #444]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	4b6d      	ldr	r3, [pc, #436]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a6c      	ldr	r2, [pc, #432]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	e00b      	b.n	8003bc8 <HAL_RCC_OscConfig+0xb0>
 8003bb0:	4b69      	ldr	r3, [pc, #420]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a68      	ldr	r2, [pc, #416]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	4b66      	ldr	r3, [pc, #408]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a65      	ldr	r2, [pc, #404]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d013      	beq.n	8003bf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd0:	f7fd f9ca 	bl	8000f68 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bd8:	f7fd f9c6 	bl	8000f68 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b64      	cmp	r3, #100	; 0x64
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e207      	b.n	8003ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bea:	4b5b      	ldr	r3, [pc, #364]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0xc0>
 8003bf6:	e014      	b.n	8003c22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf8:	f7fd f9b6 	bl	8000f68 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c00:	f7fd f9b2 	bl	8000f68 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b64      	cmp	r3, #100	; 0x64
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e1f3      	b.n	8003ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c12:	4b51      	ldr	r3, [pc, #324]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0xe8>
 8003c1e:	e000      	b.n	8003c22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d063      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c2e:	4b4a      	ldr	r3, [pc, #296]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 030c 	and.w	r3, r3, #12
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00b      	beq.n	8003c52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c3a:	4b47      	ldr	r3, [pc, #284]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d11c      	bne.n	8003c80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c46:	4b44      	ldr	r3, [pc, #272]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d116      	bne.n	8003c80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c52:	4b41      	ldr	r3, [pc, #260]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d005      	beq.n	8003c6a <HAL_RCC_OscConfig+0x152>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d001      	beq.n	8003c6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e1c7      	b.n	8003ffa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6a:	4b3b      	ldr	r3, [pc, #236]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	4937      	ldr	r1, [pc, #220]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c7e:	e03a      	b.n	8003cf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d020      	beq.n	8003cca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c88:	4b34      	ldr	r3, [pc, #208]	; (8003d5c <HAL_RCC_OscConfig+0x244>)
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8e:	f7fd f96b 	bl	8000f68 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c96:	f7fd f967 	bl	8000f68 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e1a8      	b.n	8003ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca8:	4b2b      	ldr	r3, [pc, #172]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0f0      	beq.n	8003c96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb4:	4b28      	ldr	r3, [pc, #160]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4925      	ldr	r1, [pc, #148]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	600b      	str	r3, [r1, #0]
 8003cc8:	e015      	b.n	8003cf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cca:	4b24      	ldr	r3, [pc, #144]	; (8003d5c <HAL_RCC_OscConfig+0x244>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd0:	f7fd f94a 	bl	8000f68 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cd8:	f7fd f946 	bl	8000f68 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e187      	b.n	8003ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cea:	4b1b      	ldr	r3, [pc, #108]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d036      	beq.n	8003d70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d016      	beq.n	8003d38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d0a:	4b15      	ldr	r3, [pc, #84]	; (8003d60 <HAL_RCC_OscConfig+0x248>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d10:	f7fd f92a 	bl	8000f68 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d18:	f7fd f926 	bl	8000f68 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e167      	b.n	8003ffa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d2a:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0f0      	beq.n	8003d18 <HAL_RCC_OscConfig+0x200>
 8003d36:	e01b      	b.n	8003d70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d38:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <HAL_RCC_OscConfig+0x248>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3e:	f7fd f913 	bl	8000f68 <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d44:	e00e      	b.n	8003d64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d46:	f7fd f90f 	bl	8000f68 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d907      	bls.n	8003d64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e150      	b.n	8003ffa <HAL_RCC_OscConfig+0x4e2>
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	42470000 	.word	0x42470000
 8003d60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d64:	4b88      	ldr	r3, [pc, #544]	; (8003f88 <HAL_RCC_OscConfig+0x470>)
 8003d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1ea      	bne.n	8003d46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 8097 	beq.w	8003eac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d82:	4b81      	ldr	r3, [pc, #516]	; (8003f88 <HAL_RCC_OscConfig+0x470>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10f      	bne.n	8003dae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	4b7d      	ldr	r3, [pc, #500]	; (8003f88 <HAL_RCC_OscConfig+0x470>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	4a7c      	ldr	r2, [pc, #496]	; (8003f88 <HAL_RCC_OscConfig+0x470>)
 8003d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d9e:	4b7a      	ldr	r3, [pc, #488]	; (8003f88 <HAL_RCC_OscConfig+0x470>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da6:	60bb      	str	r3, [r7, #8]
 8003da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003daa:	2301      	movs	r3, #1
 8003dac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dae:	4b77      	ldr	r3, [pc, #476]	; (8003f8c <HAL_RCC_OscConfig+0x474>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d118      	bne.n	8003dec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dba:	4b74      	ldr	r3, [pc, #464]	; (8003f8c <HAL_RCC_OscConfig+0x474>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a73      	ldr	r2, [pc, #460]	; (8003f8c <HAL_RCC_OscConfig+0x474>)
 8003dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dc6:	f7fd f8cf 	bl	8000f68 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dce:	f7fd f8cb 	bl	8000f68 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e10c      	b.n	8003ffa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de0:	4b6a      	ldr	r3, [pc, #424]	; (8003f8c <HAL_RCC_OscConfig+0x474>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d106      	bne.n	8003e02 <HAL_RCC_OscConfig+0x2ea>
 8003df4:	4b64      	ldr	r3, [pc, #400]	; (8003f88 <HAL_RCC_OscConfig+0x470>)
 8003df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df8:	4a63      	ldr	r2, [pc, #396]	; (8003f88 <HAL_RCC_OscConfig+0x470>)
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8003e00:	e01c      	b.n	8003e3c <HAL_RCC_OscConfig+0x324>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b05      	cmp	r3, #5
 8003e08:	d10c      	bne.n	8003e24 <HAL_RCC_OscConfig+0x30c>
 8003e0a:	4b5f      	ldr	r3, [pc, #380]	; (8003f88 <HAL_RCC_OscConfig+0x470>)
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0e:	4a5e      	ldr	r2, [pc, #376]	; (8003f88 <HAL_RCC_OscConfig+0x470>)
 8003e10:	f043 0304 	orr.w	r3, r3, #4
 8003e14:	6713      	str	r3, [r2, #112]	; 0x70
 8003e16:	4b5c      	ldr	r3, [pc, #368]	; (8003f88 <HAL_RCC_OscConfig+0x470>)
 8003e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1a:	4a5b      	ldr	r2, [pc, #364]	; (8003f88 <HAL_RCC_OscConfig+0x470>)
 8003e1c:	f043 0301 	orr.w	r3, r3, #1
 8003e20:	6713      	str	r3, [r2, #112]	; 0x70
 8003e22:	e00b      	b.n	8003e3c <HAL_RCC_OscConfig+0x324>
 8003e24:	4b58      	ldr	r3, [pc, #352]	; (8003f88 <HAL_RCC_OscConfig+0x470>)
 8003e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e28:	4a57      	ldr	r2, [pc, #348]	; (8003f88 <HAL_RCC_OscConfig+0x470>)
 8003e2a:	f023 0301 	bic.w	r3, r3, #1
 8003e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e30:	4b55      	ldr	r3, [pc, #340]	; (8003f88 <HAL_RCC_OscConfig+0x470>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e34:	4a54      	ldr	r2, [pc, #336]	; (8003f88 <HAL_RCC_OscConfig+0x470>)
 8003e36:	f023 0304 	bic.w	r3, r3, #4
 8003e3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d015      	beq.n	8003e70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e44:	f7fd f890 	bl	8000f68 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e4a:	e00a      	b.n	8003e62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e4c:	f7fd f88c 	bl	8000f68 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e0cb      	b.n	8003ffa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e62:	4b49      	ldr	r3, [pc, #292]	; (8003f88 <HAL_RCC_OscConfig+0x470>)
 8003e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0ee      	beq.n	8003e4c <HAL_RCC_OscConfig+0x334>
 8003e6e:	e014      	b.n	8003e9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e70:	f7fd f87a 	bl	8000f68 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e76:	e00a      	b.n	8003e8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e78:	f7fd f876 	bl	8000f68 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e0b5      	b.n	8003ffa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e8e:	4b3e      	ldr	r3, [pc, #248]	; (8003f88 <HAL_RCC_OscConfig+0x470>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1ee      	bne.n	8003e78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e9a:	7dfb      	ldrb	r3, [r7, #23]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d105      	bne.n	8003eac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea0:	4b39      	ldr	r3, [pc, #228]	; (8003f88 <HAL_RCC_OscConfig+0x470>)
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	4a38      	ldr	r2, [pc, #224]	; (8003f88 <HAL_RCC_OscConfig+0x470>)
 8003ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eaa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80a1 	beq.w	8003ff8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eb6:	4b34      	ldr	r3, [pc, #208]	; (8003f88 <HAL_RCC_OscConfig+0x470>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 030c 	and.w	r3, r3, #12
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d05c      	beq.n	8003f7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d141      	bne.n	8003f4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eca:	4b31      	ldr	r3, [pc, #196]	; (8003f90 <HAL_RCC_OscConfig+0x478>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed0:	f7fd f84a 	bl	8000f68 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed8:	f7fd f846 	bl	8000f68 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e087      	b.n	8003ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eea:	4b27      	ldr	r3, [pc, #156]	; (8003f88 <HAL_RCC_OscConfig+0x470>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69da      	ldr	r2, [r3, #28]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	019b      	lsls	r3, r3, #6
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	085b      	lsrs	r3, r3, #1
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	041b      	lsls	r3, r3, #16
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f18:	061b      	lsls	r3, r3, #24
 8003f1a:	491b      	ldr	r1, [pc, #108]	; (8003f88 <HAL_RCC_OscConfig+0x470>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f20:	4b1b      	ldr	r3, [pc, #108]	; (8003f90 <HAL_RCC_OscConfig+0x478>)
 8003f22:	2201      	movs	r2, #1
 8003f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f26:	f7fd f81f 	bl	8000f68 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f2e:	f7fd f81b 	bl	8000f68 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e05c      	b.n	8003ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f40:	4b11      	ldr	r3, [pc, #68]	; (8003f88 <HAL_RCC_OscConfig+0x470>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0f0      	beq.n	8003f2e <HAL_RCC_OscConfig+0x416>
 8003f4c:	e054      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f4e:	4b10      	ldr	r3, [pc, #64]	; (8003f90 <HAL_RCC_OscConfig+0x478>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f54:	f7fd f808 	bl	8000f68 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f5c:	f7fd f804 	bl	8000f68 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e045      	b.n	8003ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6e:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <HAL_RCC_OscConfig+0x470>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f0      	bne.n	8003f5c <HAL_RCC_OscConfig+0x444>
 8003f7a:	e03d      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d107      	bne.n	8003f94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e038      	b.n	8003ffa <HAL_RCC_OscConfig+0x4e2>
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	40007000 	.word	0x40007000
 8003f90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f94:	4b1b      	ldr	r3, [pc, #108]	; (8004004 <HAL_RCC_OscConfig+0x4ec>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d028      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d121      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d11a      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d111      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fda:	085b      	lsrs	r3, r3, #1
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d107      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d001      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e000      	b.n	8003ffa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40023800 	.word	0x40023800

08004008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e0cc      	b.n	80041b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800401c:	4b68      	ldr	r3, [pc, #416]	; (80041c0 <HAL_RCC_ClockConfig+0x1b8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d90c      	bls.n	8004044 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402a:	4b65      	ldr	r3, [pc, #404]	; (80041c0 <HAL_RCC_ClockConfig+0x1b8>)
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004032:	4b63      	ldr	r3, [pc, #396]	; (80041c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d001      	beq.n	8004044 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e0b8      	b.n	80041b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d020      	beq.n	8004092 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	d005      	beq.n	8004068 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800405c:	4b59      	ldr	r3, [pc, #356]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	4a58      	ldr	r2, [pc, #352]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004066:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004074:	4b53      	ldr	r3, [pc, #332]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	4a52      	ldr	r2, [pc, #328]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800407e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004080:	4b50      	ldr	r3, [pc, #320]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	494d      	ldr	r1, [pc, #308]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	4313      	orrs	r3, r2
 8004090:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d044      	beq.n	8004128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d107      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a6:	4b47      	ldr	r3, [pc, #284]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d119      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e07f      	b.n	80041b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d003      	beq.n	80040c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d107      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c6:	4b3f      	ldr	r3, [pc, #252]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d109      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e06f      	b.n	80041b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d6:	4b3b      	ldr	r3, [pc, #236]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e067      	b.n	80041b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040e6:	4b37      	ldr	r3, [pc, #220]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f023 0203 	bic.w	r2, r3, #3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	4934      	ldr	r1, [pc, #208]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040f8:	f7fc ff36 	bl	8000f68 <HAL_GetTick>
 80040fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fe:	e00a      	b.n	8004116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004100:	f7fc ff32 	bl	8000f68 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	f241 3288 	movw	r2, #5000	; 0x1388
 800410e:	4293      	cmp	r3, r2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e04f      	b.n	80041b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004116:	4b2b      	ldr	r3, [pc, #172]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 020c 	and.w	r2, r3, #12
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	429a      	cmp	r2, r3
 8004126:	d1eb      	bne.n	8004100 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004128:	4b25      	ldr	r3, [pc, #148]	; (80041c0 <HAL_RCC_ClockConfig+0x1b8>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d20c      	bcs.n	8004150 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004136:	4b22      	ldr	r3, [pc, #136]	; (80041c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	b2d2      	uxtb	r2, r2
 800413c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800413e:	4b20      	ldr	r3, [pc, #128]	; (80041c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	429a      	cmp	r2, r3
 800414a:	d001      	beq.n	8004150 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e032      	b.n	80041b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	d008      	beq.n	800416e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800415c:	4b19      	ldr	r3, [pc, #100]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	4916      	ldr	r1, [pc, #88]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	4313      	orrs	r3, r2
 800416c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0308 	and.w	r3, r3, #8
 8004176:	2b00      	cmp	r3, #0
 8004178:	d009      	beq.n	800418e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800417a:	4b12      	ldr	r3, [pc, #72]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	490e      	ldr	r1, [pc, #56]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	4313      	orrs	r3, r2
 800418c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800418e:	f000 f821 	bl	80041d4 <HAL_RCC_GetSysClockFreq>
 8004192:	4602      	mov	r2, r0
 8004194:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	091b      	lsrs	r3, r3, #4
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	490a      	ldr	r1, [pc, #40]	; (80041c8 <HAL_RCC_ClockConfig+0x1c0>)
 80041a0:	5ccb      	ldrb	r3, [r1, r3]
 80041a2:	fa22 f303 	lsr.w	r3, r2, r3
 80041a6:	4a09      	ldr	r2, [pc, #36]	; (80041cc <HAL_RCC_ClockConfig+0x1c4>)
 80041a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041aa:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <HAL_RCC_ClockConfig+0x1c8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fc fe96 	bl	8000ee0 <HAL_InitTick>

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40023c00 	.word	0x40023c00
 80041c4:	40023800 	.word	0x40023800
 80041c8:	08009578 	.word	0x08009578
 80041cc:	20000010 	.word	0x20000010
 80041d0:	20000014 	.word	0x20000014

080041d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041d8:	b090      	sub	sp, #64	; 0x40
 80041da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	637b      	str	r3, [r7, #52]	; 0x34
 80041e0:	2300      	movs	r3, #0
 80041e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041e4:	2300      	movs	r3, #0
 80041e6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041ec:	4b59      	ldr	r3, [pc, #356]	; (8004354 <HAL_RCC_GetSysClockFreq+0x180>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 030c 	and.w	r3, r3, #12
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d00d      	beq.n	8004214 <HAL_RCC_GetSysClockFreq+0x40>
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	f200 80a1 	bhi.w	8004340 <HAL_RCC_GetSysClockFreq+0x16c>
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <HAL_RCC_GetSysClockFreq+0x34>
 8004202:	2b04      	cmp	r3, #4
 8004204:	d003      	beq.n	800420e <HAL_RCC_GetSysClockFreq+0x3a>
 8004206:	e09b      	b.n	8004340 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004208:	4b53      	ldr	r3, [pc, #332]	; (8004358 <HAL_RCC_GetSysClockFreq+0x184>)
 800420a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800420c:	e09b      	b.n	8004346 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800420e:	4b53      	ldr	r3, [pc, #332]	; (800435c <HAL_RCC_GetSysClockFreq+0x188>)
 8004210:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004212:	e098      	b.n	8004346 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004214:	4b4f      	ldr	r3, [pc, #316]	; (8004354 <HAL_RCC_GetSysClockFreq+0x180>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800421c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800421e:	4b4d      	ldr	r3, [pc, #308]	; (8004354 <HAL_RCC_GetSysClockFreq+0x180>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d028      	beq.n	800427c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800422a:	4b4a      	ldr	r3, [pc, #296]	; (8004354 <HAL_RCC_GetSysClockFreq+0x180>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	099b      	lsrs	r3, r3, #6
 8004230:	2200      	movs	r2, #0
 8004232:	623b      	str	r3, [r7, #32]
 8004234:	627a      	str	r2, [r7, #36]	; 0x24
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800423c:	2100      	movs	r1, #0
 800423e:	4b47      	ldr	r3, [pc, #284]	; (800435c <HAL_RCC_GetSysClockFreq+0x188>)
 8004240:	fb03 f201 	mul.w	r2, r3, r1
 8004244:	2300      	movs	r3, #0
 8004246:	fb00 f303 	mul.w	r3, r0, r3
 800424a:	4413      	add	r3, r2
 800424c:	4a43      	ldr	r2, [pc, #268]	; (800435c <HAL_RCC_GetSysClockFreq+0x188>)
 800424e:	fba0 1202 	umull	r1, r2, r0, r2
 8004252:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004254:	460a      	mov	r2, r1
 8004256:	62ba      	str	r2, [r7, #40]	; 0x28
 8004258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800425a:	4413      	add	r3, r2
 800425c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800425e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004260:	2200      	movs	r2, #0
 8004262:	61bb      	str	r3, [r7, #24]
 8004264:	61fa      	str	r2, [r7, #28]
 8004266:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800426a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800426e:	f7fc f80f 	bl	8000290 <__aeabi_uldivmod>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	4613      	mov	r3, r2
 8004278:	63fb      	str	r3, [r7, #60]	; 0x3c
 800427a:	e053      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800427c:	4b35      	ldr	r3, [pc, #212]	; (8004354 <HAL_RCC_GetSysClockFreq+0x180>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	099b      	lsrs	r3, r3, #6
 8004282:	2200      	movs	r2, #0
 8004284:	613b      	str	r3, [r7, #16]
 8004286:	617a      	str	r2, [r7, #20]
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800428e:	f04f 0b00 	mov.w	fp, #0
 8004292:	4652      	mov	r2, sl
 8004294:	465b      	mov	r3, fp
 8004296:	f04f 0000 	mov.w	r0, #0
 800429a:	f04f 0100 	mov.w	r1, #0
 800429e:	0159      	lsls	r1, r3, #5
 80042a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042a4:	0150      	lsls	r0, r2, #5
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	ebb2 080a 	subs.w	r8, r2, sl
 80042ae:	eb63 090b 	sbc.w	r9, r3, fp
 80042b2:	f04f 0200 	mov.w	r2, #0
 80042b6:	f04f 0300 	mov.w	r3, #0
 80042ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80042be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80042c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80042c6:	ebb2 0408 	subs.w	r4, r2, r8
 80042ca:	eb63 0509 	sbc.w	r5, r3, r9
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	00eb      	lsls	r3, r5, #3
 80042d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042dc:	00e2      	lsls	r2, r4, #3
 80042de:	4614      	mov	r4, r2
 80042e0:	461d      	mov	r5, r3
 80042e2:	eb14 030a 	adds.w	r3, r4, sl
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	eb45 030b 	adc.w	r3, r5, fp
 80042ec:	607b      	str	r3, [r7, #4]
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042fa:	4629      	mov	r1, r5
 80042fc:	028b      	lsls	r3, r1, #10
 80042fe:	4621      	mov	r1, r4
 8004300:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004304:	4621      	mov	r1, r4
 8004306:	028a      	lsls	r2, r1, #10
 8004308:	4610      	mov	r0, r2
 800430a:	4619      	mov	r1, r3
 800430c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430e:	2200      	movs	r2, #0
 8004310:	60bb      	str	r3, [r7, #8]
 8004312:	60fa      	str	r2, [r7, #12]
 8004314:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004318:	f7fb ffba 	bl	8000290 <__aeabi_uldivmod>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4613      	mov	r3, r2
 8004322:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004324:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <HAL_RCC_GetSysClockFreq+0x180>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	0c1b      	lsrs	r3, r3, #16
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	3301      	adds	r3, #1
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004334:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004338:	fbb2 f3f3 	udiv	r3, r2, r3
 800433c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800433e:	e002      	b.n	8004346 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004340:	4b05      	ldr	r3, [pc, #20]	; (8004358 <HAL_RCC_GetSysClockFreq+0x184>)
 8004342:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004348:	4618      	mov	r0, r3
 800434a:	3740      	adds	r7, #64	; 0x40
 800434c:	46bd      	mov	sp, r7
 800434e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004352:	bf00      	nop
 8004354:	40023800 	.word	0x40023800
 8004358:	00f42400 	.word	0x00f42400
 800435c:	017d7840 	.word	0x017d7840

08004360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004364:	4b03      	ldr	r3, [pc, #12]	; (8004374 <HAL_RCC_GetHCLKFreq+0x14>)
 8004366:	681b      	ldr	r3, [r3, #0]
}
 8004368:	4618      	mov	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	20000010 	.word	0x20000010

08004378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e041      	b.n	800440e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d106      	bne.n	80043a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fc fc8c 	bl	8000cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3304      	adds	r3, #4
 80043b4:	4619      	mov	r1, r3
 80043b6:	4610      	mov	r0, r2
 80043b8:	f000 f950 	bl	800465c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b01      	cmp	r3, #1
 800442a:	d001      	beq.n	8004430 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e03c      	b.n	80044aa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a1e      	ldr	r2, [pc, #120]	; (80044b8 <HAL_TIM_Base_Start+0xa0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d018      	beq.n	8004474 <HAL_TIM_Base_Start+0x5c>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444a:	d013      	beq.n	8004474 <HAL_TIM_Base_Start+0x5c>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a1a      	ldr	r2, [pc, #104]	; (80044bc <HAL_TIM_Base_Start+0xa4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00e      	beq.n	8004474 <HAL_TIM_Base_Start+0x5c>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a19      	ldr	r2, [pc, #100]	; (80044c0 <HAL_TIM_Base_Start+0xa8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d009      	beq.n	8004474 <HAL_TIM_Base_Start+0x5c>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a17      	ldr	r2, [pc, #92]	; (80044c4 <HAL_TIM_Base_Start+0xac>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d004      	beq.n	8004474 <HAL_TIM_Base_Start+0x5c>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a16      	ldr	r2, [pc, #88]	; (80044c8 <HAL_TIM_Base_Start+0xb0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d111      	bne.n	8004498 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b06      	cmp	r3, #6
 8004484:	d010      	beq.n	80044a8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 0201 	orr.w	r2, r2, #1
 8004494:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004496:	e007      	b.n	80044a8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40010000 	.word	0x40010000
 80044bc:	40000400 	.word	0x40000400
 80044c0:	40000800 	.word	0x40000800
 80044c4:	40000c00 	.word	0x40000c00
 80044c8:	40014000 	.word	0x40014000

080044cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044d6:	2300      	movs	r3, #0
 80044d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <HAL_TIM_ConfigClockSource+0x1c>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e0b4      	b.n	8004652 <HAL_TIM_ConfigClockSource+0x186>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800450e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004520:	d03e      	beq.n	80045a0 <HAL_TIM_ConfigClockSource+0xd4>
 8004522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004526:	f200 8087 	bhi.w	8004638 <HAL_TIM_ConfigClockSource+0x16c>
 800452a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800452e:	f000 8086 	beq.w	800463e <HAL_TIM_ConfigClockSource+0x172>
 8004532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004536:	d87f      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x16c>
 8004538:	2b70      	cmp	r3, #112	; 0x70
 800453a:	d01a      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0xa6>
 800453c:	2b70      	cmp	r3, #112	; 0x70
 800453e:	d87b      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x16c>
 8004540:	2b60      	cmp	r3, #96	; 0x60
 8004542:	d050      	beq.n	80045e6 <HAL_TIM_ConfigClockSource+0x11a>
 8004544:	2b60      	cmp	r3, #96	; 0x60
 8004546:	d877      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x16c>
 8004548:	2b50      	cmp	r3, #80	; 0x50
 800454a:	d03c      	beq.n	80045c6 <HAL_TIM_ConfigClockSource+0xfa>
 800454c:	2b50      	cmp	r3, #80	; 0x50
 800454e:	d873      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x16c>
 8004550:	2b40      	cmp	r3, #64	; 0x40
 8004552:	d058      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0x13a>
 8004554:	2b40      	cmp	r3, #64	; 0x40
 8004556:	d86f      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x16c>
 8004558:	2b30      	cmp	r3, #48	; 0x30
 800455a:	d064      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0x15a>
 800455c:	2b30      	cmp	r3, #48	; 0x30
 800455e:	d86b      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x16c>
 8004560:	2b20      	cmp	r3, #32
 8004562:	d060      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0x15a>
 8004564:	2b20      	cmp	r3, #32
 8004566:	d867      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x16c>
 8004568:	2b00      	cmp	r3, #0
 800456a:	d05c      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0x15a>
 800456c:	2b10      	cmp	r3, #16
 800456e:	d05a      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0x15a>
 8004570:	e062      	b.n	8004638 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	6899      	ldr	r1, [r3, #8]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f000 f965 	bl	8004850 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004594:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	609a      	str	r2, [r3, #8]
      break;
 800459e:	e04f      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6818      	ldr	r0, [r3, #0]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	6899      	ldr	r1, [r3, #8]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f000 f94e 	bl	8004850 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045c2:	609a      	str	r2, [r3, #8]
      break;
 80045c4:	e03c      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6818      	ldr	r0, [r3, #0]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	6859      	ldr	r1, [r3, #4]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	461a      	mov	r2, r3
 80045d4:	f000 f8c2 	bl	800475c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2150      	movs	r1, #80	; 0x50
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 f91b 	bl	800481a <TIM_ITRx_SetConfig>
      break;
 80045e4:	e02c      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6859      	ldr	r1, [r3, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	461a      	mov	r2, r3
 80045f4:	f000 f8e1 	bl	80047ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2160      	movs	r1, #96	; 0x60
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 f90b 	bl	800481a <TIM_ITRx_SetConfig>
      break;
 8004604:	e01c      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6859      	ldr	r1, [r3, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	461a      	mov	r2, r3
 8004614:	f000 f8a2 	bl	800475c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2140      	movs	r1, #64	; 0x40
 800461e:	4618      	mov	r0, r3
 8004620:	f000 f8fb 	bl	800481a <TIM_ITRx_SetConfig>
      break;
 8004624:	e00c      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4619      	mov	r1, r3
 8004630:	4610      	mov	r0, r2
 8004632:	f000 f8f2 	bl	800481a <TIM_ITRx_SetConfig>
      break;
 8004636:	e003      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	73fb      	strb	r3, [r7, #15]
      break;
 800463c:	e000      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800463e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004650:	7bfb      	ldrb	r3, [r7, #15]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
	...

0800465c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a34      	ldr	r2, [pc, #208]	; (8004740 <TIM_Base_SetConfig+0xe4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00f      	beq.n	8004694 <TIM_Base_SetConfig+0x38>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800467a:	d00b      	beq.n	8004694 <TIM_Base_SetConfig+0x38>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a31      	ldr	r2, [pc, #196]	; (8004744 <TIM_Base_SetConfig+0xe8>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d007      	beq.n	8004694 <TIM_Base_SetConfig+0x38>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a30      	ldr	r2, [pc, #192]	; (8004748 <TIM_Base_SetConfig+0xec>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d003      	beq.n	8004694 <TIM_Base_SetConfig+0x38>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a2f      	ldr	r2, [pc, #188]	; (800474c <TIM_Base_SetConfig+0xf0>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d108      	bne.n	80046a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a25      	ldr	r2, [pc, #148]	; (8004740 <TIM_Base_SetConfig+0xe4>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d01b      	beq.n	80046e6 <TIM_Base_SetConfig+0x8a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b4:	d017      	beq.n	80046e6 <TIM_Base_SetConfig+0x8a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a22      	ldr	r2, [pc, #136]	; (8004744 <TIM_Base_SetConfig+0xe8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d013      	beq.n	80046e6 <TIM_Base_SetConfig+0x8a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a21      	ldr	r2, [pc, #132]	; (8004748 <TIM_Base_SetConfig+0xec>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00f      	beq.n	80046e6 <TIM_Base_SetConfig+0x8a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a20      	ldr	r2, [pc, #128]	; (800474c <TIM_Base_SetConfig+0xf0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00b      	beq.n	80046e6 <TIM_Base_SetConfig+0x8a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a1f      	ldr	r2, [pc, #124]	; (8004750 <TIM_Base_SetConfig+0xf4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d007      	beq.n	80046e6 <TIM_Base_SetConfig+0x8a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a1e      	ldr	r2, [pc, #120]	; (8004754 <TIM_Base_SetConfig+0xf8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d003      	beq.n	80046e6 <TIM_Base_SetConfig+0x8a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a1d      	ldr	r2, [pc, #116]	; (8004758 <TIM_Base_SetConfig+0xfc>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d108      	bne.n	80046f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	4313      	orrs	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a08      	ldr	r2, [pc, #32]	; (8004740 <TIM_Base_SetConfig+0xe4>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d103      	bne.n	800472c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	691a      	ldr	r2, [r3, #16]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	615a      	str	r2, [r3, #20]
}
 8004732:	bf00      	nop
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	40010000 	.word	0x40010000
 8004744:	40000400 	.word	0x40000400
 8004748:	40000800 	.word	0x40000800
 800474c:	40000c00 	.word	0x40000c00
 8004750:	40014000 	.word	0x40014000
 8004754:	40014400 	.word	0x40014400
 8004758:	40014800 	.word	0x40014800

0800475c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800475c:	b480      	push	{r7}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	f023 0201 	bic.w	r2, r3, #1
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	011b      	lsls	r3, r3, #4
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4313      	orrs	r3, r2
 8004790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f023 030a 	bic.w	r3, r3, #10
 8004798:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	4313      	orrs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	621a      	str	r2, [r3, #32]
}
 80047ae:	bf00      	nop
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b087      	sub	sp, #28
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f023 0210 	bic.w	r2, r3, #16
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	031b      	lsls	r3, r3, #12
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4313      	orrs	r3, r2
 8004800:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	621a      	str	r2, [r3, #32]
}
 800480e:	bf00      	nop
 8004810:	371c      	adds	r7, #28
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800481a:	b480      	push	{r7}
 800481c:	b085      	sub	sp, #20
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004830:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4313      	orrs	r3, r2
 8004838:	f043 0307 	orr.w	r3, r3, #7
 800483c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	609a      	str	r2, [r3, #8]
}
 8004844:	bf00      	nop
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
 800485c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800486a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	021a      	lsls	r2, r3, #8
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	431a      	orrs	r2, r3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	4313      	orrs	r3, r2
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	609a      	str	r2, [r3, #8]
}
 8004884:	bf00      	nop
 8004886:	371c      	adds	r7, #28
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d101      	bne.n	80048a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048a4:	2302      	movs	r3, #2
 80048a6:	e050      	b.n	800494a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a1c      	ldr	r2, [pc, #112]	; (8004958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d018      	beq.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f4:	d013      	beq.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a18      	ldr	r2, [pc, #96]	; (800495c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d00e      	beq.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a16      	ldr	r2, [pc, #88]	; (8004960 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d009      	beq.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a15      	ldr	r2, [pc, #84]	; (8004964 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d004      	beq.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a13      	ldr	r2, [pc, #76]	; (8004968 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d10c      	bne.n	8004938 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004924:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	4313      	orrs	r3, r2
 800492e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	40010000 	.word	0x40010000
 800495c:	40000400 	.word	0x40000400
 8004960:	40000800 	.word	0x40000800
 8004964:	40000c00 	.word	0x40000c00
 8004968:	40014000 	.word	0x40014000

0800496c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800496c:	b084      	sub	sp, #16
 800496e:	b580      	push	{r7, lr}
 8004970:	b084      	sub	sp, #16
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
 8004976:	f107 001c 	add.w	r0, r7, #28
 800497a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800497e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004980:	2b01      	cmp	r3, #1
 8004982:	d122      	bne.n	80049ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004988:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d105      	bne.n	80049be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f001 fbee 	bl	80061a0 <USB_CoreReset>
 80049c4:	4603      	mov	r3, r0
 80049c6:	73fb      	strb	r3, [r7, #15]
 80049c8:	e01a      	b.n	8004a00 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f001 fbe2 	bl	80061a0 <USB_CoreReset>
 80049dc:	4603      	mov	r3, r0
 80049de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80049e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	639a      	str	r2, [r3, #56]	; 0x38
 80049f2:	e005      	b.n	8004a00 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d10b      	bne.n	8004a1e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f043 0206 	orr.w	r2, r3, #6
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f043 0220 	orr.w	r2, r3, #32
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a2a:	b004      	add	sp, #16
 8004a2c:	4770      	bx	lr
	...

08004a30 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d165      	bne.n	8004b10 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	4a41      	ldr	r2, [pc, #260]	; (8004b4c <USB_SetTurnaroundTime+0x11c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d906      	bls.n	8004a5a <USB_SetTurnaroundTime+0x2a>
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	4a40      	ldr	r2, [pc, #256]	; (8004b50 <USB_SetTurnaroundTime+0x120>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d202      	bcs.n	8004a5a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004a54:	230f      	movs	r3, #15
 8004a56:	617b      	str	r3, [r7, #20]
 8004a58:	e062      	b.n	8004b20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	4a3c      	ldr	r2, [pc, #240]	; (8004b50 <USB_SetTurnaroundTime+0x120>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d306      	bcc.n	8004a70 <USB_SetTurnaroundTime+0x40>
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	4a3b      	ldr	r2, [pc, #236]	; (8004b54 <USB_SetTurnaroundTime+0x124>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d202      	bcs.n	8004a70 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004a6a:	230e      	movs	r3, #14
 8004a6c:	617b      	str	r3, [r7, #20]
 8004a6e:	e057      	b.n	8004b20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	4a38      	ldr	r2, [pc, #224]	; (8004b54 <USB_SetTurnaroundTime+0x124>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d306      	bcc.n	8004a86 <USB_SetTurnaroundTime+0x56>
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4a37      	ldr	r2, [pc, #220]	; (8004b58 <USB_SetTurnaroundTime+0x128>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d202      	bcs.n	8004a86 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004a80:	230d      	movs	r3, #13
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	e04c      	b.n	8004b20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	4a33      	ldr	r2, [pc, #204]	; (8004b58 <USB_SetTurnaroundTime+0x128>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d306      	bcc.n	8004a9c <USB_SetTurnaroundTime+0x6c>
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	4a32      	ldr	r2, [pc, #200]	; (8004b5c <USB_SetTurnaroundTime+0x12c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d802      	bhi.n	8004a9c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004a96:	230c      	movs	r3, #12
 8004a98:	617b      	str	r3, [r7, #20]
 8004a9a:	e041      	b.n	8004b20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4a2f      	ldr	r2, [pc, #188]	; (8004b5c <USB_SetTurnaroundTime+0x12c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d906      	bls.n	8004ab2 <USB_SetTurnaroundTime+0x82>
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	4a2e      	ldr	r2, [pc, #184]	; (8004b60 <USB_SetTurnaroundTime+0x130>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d802      	bhi.n	8004ab2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004aac:	230b      	movs	r3, #11
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	e036      	b.n	8004b20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	4a2a      	ldr	r2, [pc, #168]	; (8004b60 <USB_SetTurnaroundTime+0x130>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d906      	bls.n	8004ac8 <USB_SetTurnaroundTime+0x98>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	4a29      	ldr	r2, [pc, #164]	; (8004b64 <USB_SetTurnaroundTime+0x134>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d802      	bhi.n	8004ac8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004ac2:	230a      	movs	r3, #10
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	e02b      	b.n	8004b20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4a26      	ldr	r2, [pc, #152]	; (8004b64 <USB_SetTurnaroundTime+0x134>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d906      	bls.n	8004ade <USB_SetTurnaroundTime+0xae>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4a25      	ldr	r2, [pc, #148]	; (8004b68 <USB_SetTurnaroundTime+0x138>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d202      	bcs.n	8004ade <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ad8:	2309      	movs	r3, #9
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	e020      	b.n	8004b20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	4a21      	ldr	r2, [pc, #132]	; (8004b68 <USB_SetTurnaroundTime+0x138>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d306      	bcc.n	8004af4 <USB_SetTurnaroundTime+0xc4>
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	4a20      	ldr	r2, [pc, #128]	; (8004b6c <USB_SetTurnaroundTime+0x13c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d802      	bhi.n	8004af4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004aee:	2308      	movs	r3, #8
 8004af0:	617b      	str	r3, [r7, #20]
 8004af2:	e015      	b.n	8004b20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	4a1d      	ldr	r2, [pc, #116]	; (8004b6c <USB_SetTurnaroundTime+0x13c>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d906      	bls.n	8004b0a <USB_SetTurnaroundTime+0xda>
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4a1c      	ldr	r2, [pc, #112]	; (8004b70 <USB_SetTurnaroundTime+0x140>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d202      	bcs.n	8004b0a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004b04:	2307      	movs	r3, #7
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	e00a      	b.n	8004b20 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004b0a:	2306      	movs	r3, #6
 8004b0c:	617b      	str	r3, [r7, #20]
 8004b0e:	e007      	b.n	8004b20 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004b10:	79fb      	ldrb	r3, [r7, #7]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d102      	bne.n	8004b1c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004b16:	2309      	movs	r3, #9
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	e001      	b.n	8004b20 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b1c:	2309      	movs	r3, #9
 8004b1e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	029b      	lsls	r3, r3, #10
 8004b34:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	00d8acbf 	.word	0x00d8acbf
 8004b50:	00e4e1c0 	.word	0x00e4e1c0
 8004b54:	00f42400 	.word	0x00f42400
 8004b58:	01067380 	.word	0x01067380
 8004b5c:	011a499f 	.word	0x011a499f
 8004b60:	01312cff 	.word	0x01312cff
 8004b64:	014ca43f 	.word	0x014ca43f
 8004b68:	016e3600 	.word	0x016e3600
 8004b6c:	01a6ab1f 	.word	0x01a6ab1f
 8004b70:	01e84800 	.word	0x01e84800

08004b74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f043 0201 	orr.w	r2, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f023 0201 	bic.w	r2, r3, #1
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004bd4:	78fb      	ldrb	r3, [r7, #3]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d115      	bne.n	8004c06 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004be6:	2001      	movs	r0, #1
 8004be8:	f7fc f9ca 	bl	8000f80 <HAL_Delay>
      ms++;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f001 fa45 	bl	8006082 <USB_GetMode>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d01e      	beq.n	8004c3c <USB_SetCurrentMode+0x84>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2b31      	cmp	r3, #49	; 0x31
 8004c02:	d9f0      	bls.n	8004be6 <USB_SetCurrentMode+0x2e>
 8004c04:	e01a      	b.n	8004c3c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c06:	78fb      	ldrb	r3, [r7, #3]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d115      	bne.n	8004c38 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c18:	2001      	movs	r0, #1
 8004c1a:	f7fc f9b1 	bl	8000f80 <HAL_Delay>
      ms++;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	3301      	adds	r3, #1
 8004c22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f001 fa2c 	bl	8006082 <USB_GetMode>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <USB_SetCurrentMode+0x84>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2b31      	cmp	r3, #49	; 0x31
 8004c34:	d9f0      	bls.n	8004c18 <USB_SetCurrentMode+0x60>
 8004c36:	e001      	b.n	8004c3c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e005      	b.n	8004c48 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b32      	cmp	r3, #50	; 0x32
 8004c40:	d101      	bne.n	8004c46 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e000      	b.n	8004c48 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c50:	b084      	sub	sp, #16
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b086      	sub	sp, #24
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	613b      	str	r3, [r7, #16]
 8004c6e:	e009      	b.n	8004c84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	3340      	adds	r3, #64	; 0x40
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	3301      	adds	r3, #1
 8004c82:	613b      	str	r3, [r7, #16]
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	2b0e      	cmp	r3, #14
 8004c88:	d9f2      	bls.n	8004c70 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d11c      	bne.n	8004cca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c9e:	f043 0302 	orr.w	r3, r3, #2
 8004ca2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	639a      	str	r2, [r3, #56]	; 0x38
 8004cc8:	e00b      	b.n	8004ce2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cda:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ce8:	461a      	mov	r2, r3
 8004cea:	2300      	movs	r3, #0
 8004cec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	680b      	ldr	r3, [r1, #0]
 8004d00:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d10c      	bne.n	8004d22 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d104      	bne.n	8004d18 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d0e:	2100      	movs	r1, #0
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f965 	bl	8004fe0 <USB_SetDevSpeed>
 8004d16:	e008      	b.n	8004d2a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d18:	2101      	movs	r1, #1
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f960 	bl	8004fe0 <USB_SetDevSpeed>
 8004d20:	e003      	b.n	8004d2a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d22:	2103      	movs	r1, #3
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 f95b 	bl	8004fe0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d2a:	2110      	movs	r1, #16
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f8f3 	bl	8004f18 <USB_FlushTxFifo>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f91f 	bl	8004f80 <USB_FlushRxFifo>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d52:	461a      	mov	r2, r3
 8004d54:	2300      	movs	r3, #0
 8004d56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d5e:	461a      	mov	r2, r3
 8004d60:	2300      	movs	r3, #0
 8004d62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d70:	2300      	movs	r3, #0
 8004d72:	613b      	str	r3, [r7, #16]
 8004d74:	e043      	b.n	8004dfe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d8c:	d118      	bne.n	8004dc0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10a      	bne.n	8004daa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da0:	461a      	mov	r2, r3
 8004da2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	e013      	b.n	8004dd2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db6:	461a      	mov	r2, r3
 8004db8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	e008      	b.n	8004dd2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dcc:	461a      	mov	r2, r3
 8004dce:	2300      	movs	r3, #0
 8004dd0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dde:	461a      	mov	r2, r3
 8004de0:	2300      	movs	r3, #0
 8004de2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df0:	461a      	mov	r2, r3
 8004df2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004df6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d3b7      	bcc.n	8004d76 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e06:	2300      	movs	r3, #0
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	e043      	b.n	8004e94 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e22:	d118      	bne.n	8004e56 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10a      	bne.n	8004e40 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e36:	461a      	mov	r2, r3
 8004e38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	e013      	b.n	8004e68 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e52:	6013      	str	r3, [r2, #0]
 8004e54:	e008      	b.n	8004e68 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e62:	461a      	mov	r2, r3
 8004e64:	2300      	movs	r3, #0
 8004e66:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e74:	461a      	mov	r2, r3
 8004e76:	2300      	movs	r3, #0
 8004e78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e86:	461a      	mov	r2, r3
 8004e88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	3301      	adds	r3, #1
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d3b7      	bcc.n	8004e0c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004eaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ebc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d105      	bne.n	8004ed0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	f043 0210 	orr.w	r2, r3, #16
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699a      	ldr	r2, [r3, #24]
 8004ed4:	4b0f      	ldr	r3, [pc, #60]	; (8004f14 <USB_DevInit+0x2c4>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d005      	beq.n	8004eee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	f043 0208 	orr.w	r2, r3, #8
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d107      	bne.n	8004f04 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004efc:	f043 0304 	orr.w	r3, r3, #4
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f10:	b004      	add	sp, #16
 8004f12:	4770      	bx	lr
 8004f14:	803c3800 	.word	0x803c3800

08004f18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4a13      	ldr	r2, [pc, #76]	; (8004f7c <USB_FlushTxFifo+0x64>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d901      	bls.n	8004f38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e01b      	b.n	8004f70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	daf2      	bge.n	8004f26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	019b      	lsls	r3, r3, #6
 8004f48:	f043 0220 	orr.w	r2, r3, #32
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	3301      	adds	r3, #1
 8004f54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4a08      	ldr	r2, [pc, #32]	; (8004f7c <USB_FlushTxFifo+0x64>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d901      	bls.n	8004f62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e006      	b.n	8004f70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f003 0320 	and.w	r3, r3, #32
 8004f6a:	2b20      	cmp	r3, #32
 8004f6c:	d0f0      	beq.n	8004f50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	00030d40 	.word	0x00030d40

08004f80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4a11      	ldr	r2, [pc, #68]	; (8004fdc <USB_FlushRxFifo+0x5c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d901      	bls.n	8004f9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e018      	b.n	8004fd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	daf2      	bge.n	8004f8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2210      	movs	r2, #16
 8004fae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	4a08      	ldr	r2, [pc, #32]	; (8004fdc <USB_FlushRxFifo+0x5c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d901      	bls.n	8004fc2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e006      	b.n	8004fd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f003 0310 	and.w	r3, r3, #16
 8004fca:	2b10      	cmp	r3, #16
 8004fcc:	d0f0      	beq.n	8004fb0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	00030d40 	.word	0x00030d40

08004fe0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	78fb      	ldrb	r3, [r7, #3]
 8004ffa:	68f9      	ldr	r1, [r7, #12]
 8004ffc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005000:	4313      	orrs	r3, r2
 8005002:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005012:	b480      	push	{r7}
 8005014:	b087      	sub	sp, #28
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 0306 	and.w	r3, r3, #6
 800502a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d102      	bne.n	8005038 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005032:	2300      	movs	r3, #0
 8005034:	75fb      	strb	r3, [r7, #23]
 8005036:	e00a      	b.n	800504e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d002      	beq.n	8005044 <USB_GetDevSpeed+0x32>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2b06      	cmp	r3, #6
 8005042:	d102      	bne.n	800504a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005044:	2302      	movs	r3, #2
 8005046:	75fb      	strb	r3, [r7, #23]
 8005048:	e001      	b.n	800504e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800504a:	230f      	movs	r3, #15
 800504c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800504e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005050:	4618      	mov	r0, r3
 8005052:	371c      	adds	r7, #28
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	785b      	ldrb	r3, [r3, #1]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d13a      	bne.n	80050ee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507e:	69da      	ldr	r2, [r3, #28]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	f003 030f 	and.w	r3, r3, #15
 8005088:	2101      	movs	r1, #1
 800508a:	fa01 f303 	lsl.w	r3, r1, r3
 800508e:	b29b      	uxth	r3, r3
 8005090:	68f9      	ldr	r1, [r7, #12]
 8005092:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005096:	4313      	orrs	r3, r2
 8005098:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	015a      	lsls	r2, r3, #5
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d155      	bne.n	800515c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	791b      	ldrb	r3, [r3, #4]
 80050ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	059b      	lsls	r3, r3, #22
 80050d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050d4:	4313      	orrs	r3, r2
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	0151      	lsls	r1, r2, #5
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	440a      	add	r2, r1
 80050de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ea:	6013      	str	r3, [r2, #0]
 80050ec:	e036      	b.n	800515c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f4:	69da      	ldr	r2, [r3, #28]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	2101      	movs	r1, #1
 8005100:	fa01 f303 	lsl.w	r3, r1, r3
 8005104:	041b      	lsls	r3, r3, #16
 8005106:	68f9      	ldr	r1, [r7, #12]
 8005108:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800510c:	4313      	orrs	r3, r2
 800510e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d11a      	bne.n	800515c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	791b      	ldrb	r3, [r3, #4]
 8005140:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005142:	430b      	orrs	r3, r1
 8005144:	4313      	orrs	r3, r2
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	0151      	lsls	r1, r2, #5
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	440a      	add	r2, r1
 800514e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
	...

0800516c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	785b      	ldrb	r3, [r3, #1]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d161      	bne.n	800524c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800519a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800519e:	d11f      	bne.n	80051e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	0151      	lsls	r1, r2, #5
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	440a      	add	r2, r1
 80051b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	0151      	lsls	r1, r2, #5
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	440a      	add	r2, r1
 80051d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	f003 030f 	and.w	r3, r3, #15
 80051f0:	2101      	movs	r1, #1
 80051f2:	fa01 f303 	lsl.w	r3, r1, r3
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	43db      	mvns	r3, r3
 80051fa:	68f9      	ldr	r1, [r7, #12]
 80051fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005200:	4013      	ands	r3, r2
 8005202:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520a:	69da      	ldr	r2, [r3, #28]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	f003 030f 	and.w	r3, r3, #15
 8005214:	2101      	movs	r1, #1
 8005216:	fa01 f303 	lsl.w	r3, r1, r3
 800521a:	b29b      	uxth	r3, r3
 800521c:	43db      	mvns	r3, r3
 800521e:	68f9      	ldr	r1, [r7, #12]
 8005220:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005224:	4013      	ands	r3, r2
 8005226:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	0159      	lsls	r1, r3, #5
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	440b      	add	r3, r1
 800523e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005242:	4619      	mov	r1, r3
 8005244:	4b35      	ldr	r3, [pc, #212]	; (800531c <USB_DeactivateEndpoint+0x1b0>)
 8005246:	4013      	ands	r3, r2
 8005248:	600b      	str	r3, [r1, #0]
 800524a:	e060      	b.n	800530e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800525e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005262:	d11f      	bne.n	80052a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	0151      	lsls	r1, r2, #5
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	440a      	add	r2, r1
 800527a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800527e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005282:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	0151      	lsls	r1, r2, #5
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	440a      	add	r2, r1
 800529a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800529e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	2101      	movs	r1, #1
 80052b6:	fa01 f303 	lsl.w	r3, r1, r3
 80052ba:	041b      	lsls	r3, r3, #16
 80052bc:	43db      	mvns	r3, r3
 80052be:	68f9      	ldr	r1, [r7, #12]
 80052c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052c4:	4013      	ands	r3, r2
 80052c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ce:	69da      	ldr	r2, [r3, #28]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	f003 030f 	and.w	r3, r3, #15
 80052d8:	2101      	movs	r1, #1
 80052da:	fa01 f303 	lsl.w	r3, r1, r3
 80052de:	041b      	lsls	r3, r3, #16
 80052e0:	43db      	mvns	r3, r3
 80052e2:	68f9      	ldr	r1, [r7, #12]
 80052e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052e8:	4013      	ands	r3, r2
 80052ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	0159      	lsls	r1, r3, #5
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	440b      	add	r3, r1
 8005302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005306:	4619      	mov	r1, r3
 8005308:	4b05      	ldr	r3, [pc, #20]	; (8005320 <USB_DeactivateEndpoint+0x1b4>)
 800530a:	4013      	ands	r3, r2
 800530c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr
 800531c:	ec337800 	.word	0xec337800
 8005320:	eff37800 	.word	0xeff37800

08005324 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08a      	sub	sp, #40	; 0x28
 8005328:	af02      	add	r7, sp, #8
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	4613      	mov	r3, r2
 8005330:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	785b      	ldrb	r3, [r3, #1]
 8005340:	2b01      	cmp	r3, #1
 8005342:	f040 815c 	bne.w	80055fe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d132      	bne.n	80053b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	0151      	lsls	r1, r2, #5
 8005360:	69fa      	ldr	r2, [r7, #28]
 8005362:	440a      	add	r2, r1
 8005364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005368:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800536c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005370:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	4413      	add	r3, r2
 800537a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	0151      	lsls	r1, r2, #5
 8005384:	69fa      	ldr	r2, [r7, #28]
 8005386:	440a      	add	r2, r1
 8005388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800538c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005390:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	4413      	add	r3, r2
 800539a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	0151      	lsls	r1, r2, #5
 80053a4:	69fa      	ldr	r2, [r7, #28]
 80053a6:	440a      	add	r2, r1
 80053a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ac:	0cdb      	lsrs	r3, r3, #19
 80053ae:	04db      	lsls	r3, r3, #19
 80053b0:	6113      	str	r3, [r2, #16]
 80053b2:	e074      	b.n	800549e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	0151      	lsls	r1, r2, #5
 80053c6:	69fa      	ldr	r2, [r7, #28]
 80053c8:	440a      	add	r2, r1
 80053ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ce:	0cdb      	lsrs	r3, r3, #19
 80053d0:	04db      	lsls	r3, r3, #19
 80053d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	0151      	lsls	r1, r2, #5
 80053e6:	69fa      	ldr	r2, [r7, #28]
 80053e8:	440a      	add	r2, r1
 80053ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005404:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	6999      	ldr	r1, [r3, #24]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	440b      	add	r3, r1
 8005410:	1e59      	subs	r1, r3, #1
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	fbb1 f3f3 	udiv	r3, r1, r3
 800541a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800541c:	4b9d      	ldr	r3, [pc, #628]	; (8005694 <USB_EPStartXfer+0x370>)
 800541e:	400b      	ands	r3, r1
 8005420:	69b9      	ldr	r1, [r7, #24]
 8005422:	0148      	lsls	r0, r1, #5
 8005424:	69f9      	ldr	r1, [r7, #28]
 8005426:	4401      	add	r1, r0
 8005428:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800542c:	4313      	orrs	r3, r2
 800542e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543c:	691a      	ldr	r2, [r3, #16]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005446:	69b9      	ldr	r1, [r7, #24]
 8005448:	0148      	lsls	r0, r1, #5
 800544a:	69f9      	ldr	r1, [r7, #28]
 800544c:	4401      	add	r1, r0
 800544e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005452:	4313      	orrs	r3, r2
 8005454:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	791b      	ldrb	r3, [r3, #4]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d11f      	bne.n	800549e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	0151      	lsls	r1, r2, #5
 8005470:	69fa      	ldr	r2, [r7, #28]
 8005472:	440a      	add	r2, r1
 8005474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005478:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800547c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	0151      	lsls	r1, r2, #5
 8005490:	69fa      	ldr	r2, [r7, #28]
 8005492:	440a      	add	r2, r1
 8005494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005498:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800549c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800549e:	79fb      	ldrb	r3, [r7, #7]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d14b      	bne.n	800553c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d009      	beq.n	80054c0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b8:	461a      	mov	r2, r3
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	791b      	ldrb	r3, [r3, #4]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d128      	bne.n	800551a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d110      	bne.n	80054fa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	0151      	lsls	r1, r2, #5
 80054ea:	69fa      	ldr	r2, [r7, #28]
 80054ec:	440a      	add	r2, r1
 80054ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054f6:	6013      	str	r3, [r2, #0]
 80054f8:	e00f      	b.n	800551a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	0151      	lsls	r1, r2, #5
 800550c:	69fa      	ldr	r2, [r7, #28]
 800550e:	440a      	add	r2, r1
 8005510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005518:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	4413      	add	r3, r2
 8005522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	0151      	lsls	r1, r2, #5
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	440a      	add	r2, r1
 8005530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005534:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	e133      	b.n	80057a4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	0151      	lsls	r1, r2, #5
 800554e:	69fa      	ldr	r2, [r7, #28]
 8005550:	440a      	add	r2, r1
 8005552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005556:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800555a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	791b      	ldrb	r3, [r3, #4]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d015      	beq.n	8005590 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 811b 	beq.w	80057a4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	2101      	movs	r1, #1
 8005580:	fa01 f303 	lsl.w	r3, r1, r3
 8005584:	69f9      	ldr	r1, [r7, #28]
 8005586:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800558a:	4313      	orrs	r3, r2
 800558c:	634b      	str	r3, [r1, #52]	; 0x34
 800558e:	e109      	b.n	80057a4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800559c:	2b00      	cmp	r3, #0
 800559e:	d110      	bne.n	80055c2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	0151      	lsls	r1, r2, #5
 80055b2:	69fa      	ldr	r2, [r7, #28]
 80055b4:	440a      	add	r2, r1
 80055b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055be:	6013      	str	r3, [r2, #0]
 80055c0:	e00f      	b.n	80055e2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	0151      	lsls	r1, r2, #5
 80055d4:	69fa      	ldr	r2, [r7, #28]
 80055d6:	440a      	add	r2, r1
 80055d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	6919      	ldr	r1, [r3, #16]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	781a      	ldrb	r2, [r3, #0]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	b298      	uxth	r0, r3
 80055f0:	79fb      	ldrb	r3, [r7, #7]
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	4603      	mov	r3, r0
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 fade 	bl	8005bb8 <USB_WritePacket>
 80055fc:	e0d2      	b.n	80057a4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	0151      	lsls	r1, r2, #5
 8005610:	69fa      	ldr	r2, [r7, #28]
 8005612:	440a      	add	r2, r1
 8005614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005618:	0cdb      	lsrs	r3, r3, #19
 800561a:	04db      	lsls	r3, r3, #19
 800561c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	015a      	lsls	r2, r3, #5
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	4413      	add	r3, r2
 8005626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	0151      	lsls	r1, r2, #5
 8005630:	69fa      	ldr	r2, [r7, #28]
 8005632:	440a      	add	r2, r1
 8005634:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005638:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800563c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005640:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d126      	bne.n	8005698 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	4413      	add	r3, r2
 8005652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005656:	691a      	ldr	r2, [r3, #16]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005660:	69b9      	ldr	r1, [r7, #24]
 8005662:	0148      	lsls	r0, r1, #5
 8005664:	69f9      	ldr	r1, [r7, #28]
 8005666:	4401      	add	r1, r0
 8005668:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800566c:	4313      	orrs	r3, r2
 800566e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	0151      	lsls	r1, r2, #5
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	440a      	add	r2, r1
 8005686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800568a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800568e:	6113      	str	r3, [r2, #16]
 8005690:	e03a      	b.n	8005708 <USB_EPStartXfer+0x3e4>
 8005692:	bf00      	nop
 8005694:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	699a      	ldr	r2, [r3, #24]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	4413      	add	r3, r2
 80056a2:	1e5a      	subs	r2, r3, #1
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ac:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	8afa      	ldrh	r2, [r7, #22]
 80056b4:	fb03 f202 	mul.w	r2, r3, r2
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c8:	691a      	ldr	r2, [r3, #16]
 80056ca:	8afb      	ldrh	r3, [r7, #22]
 80056cc:	04d9      	lsls	r1, r3, #19
 80056ce:	4b38      	ldr	r3, [pc, #224]	; (80057b0 <USB_EPStartXfer+0x48c>)
 80056d0:	400b      	ands	r3, r1
 80056d2:	69b9      	ldr	r1, [r7, #24]
 80056d4:	0148      	lsls	r0, r1, #5
 80056d6:	69f9      	ldr	r1, [r7, #28]
 80056d8:	4401      	add	r1, r0
 80056da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056de:	4313      	orrs	r3, r2
 80056e0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	015a      	lsls	r2, r3, #5
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ee:	691a      	ldr	r2, [r3, #16]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056f8:	69b9      	ldr	r1, [r7, #24]
 80056fa:	0148      	lsls	r0, r1, #5
 80056fc:	69f9      	ldr	r1, [r7, #28]
 80056fe:	4401      	add	r1, r0
 8005700:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005704:	4313      	orrs	r3, r2
 8005706:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005708:	79fb      	ldrb	r3, [r7, #7]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d10d      	bne.n	800572a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d009      	beq.n	800572a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	6919      	ldr	r1, [r3, #16]
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005726:	460a      	mov	r2, r1
 8005728:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	791b      	ldrb	r3, [r3, #4]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d128      	bne.n	8005784 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573e:	2b00      	cmp	r3, #0
 8005740:	d110      	bne.n	8005764 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	4413      	add	r3, r2
 800574a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	0151      	lsls	r1, r2, #5
 8005754:	69fa      	ldr	r2, [r7, #28]
 8005756:	440a      	add	r2, r1
 8005758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800575c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005760:	6013      	str	r3, [r2, #0]
 8005762:	e00f      	b.n	8005784 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	0151      	lsls	r1, r2, #5
 8005776:	69fa      	ldr	r2, [r7, #28]
 8005778:	440a      	add	r2, r1
 800577a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800577e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005782:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	0151      	lsls	r1, r2, #5
 8005796:	69fa      	ldr	r2, [r7, #28]
 8005798:	440a      	add	r2, r1
 800579a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800579e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3720      	adds	r7, #32
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	1ff80000 	.word	0x1ff80000

080057b4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	4613      	mov	r3, r2
 80057c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	785b      	ldrb	r3, [r3, #1]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	f040 80ce 	bne.w	8005972 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d132      	bne.n	8005844 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	0151      	lsls	r1, r2, #5
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	440a      	add	r2, r1
 80057f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005800:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	4413      	add	r3, r2
 800580a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	0151      	lsls	r1, r2, #5
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	440a      	add	r2, r1
 8005818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800581c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005820:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	0151      	lsls	r1, r2, #5
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	440a      	add	r2, r1
 8005838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800583c:	0cdb      	lsrs	r3, r3, #19
 800583e:	04db      	lsls	r3, r3, #19
 8005840:	6113      	str	r3, [r2, #16]
 8005842:	e04e      	b.n	80058e2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	0151      	lsls	r1, r2, #5
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	440a      	add	r2, r1
 800585a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585e:	0cdb      	lsrs	r3, r3, #19
 8005860:	04db      	lsls	r3, r3, #19
 8005862:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	0151      	lsls	r1, r2, #5
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	440a      	add	r2, r1
 800587a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800587e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005882:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005886:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	699a      	ldr	r2, [r3, #24]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	429a      	cmp	r2, r3
 8005892:	d903      	bls.n	800589c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	68da      	ldr	r2, [r3, #12]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	0151      	lsls	r1, r2, #5
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	440a      	add	r2, r1
 80058b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c8:	691a      	ldr	r2, [r3, #16]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058d2:	6939      	ldr	r1, [r7, #16]
 80058d4:	0148      	lsls	r0, r1, #5
 80058d6:	6979      	ldr	r1, [r7, #20]
 80058d8:	4401      	add	r1, r0
 80058da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058de:	4313      	orrs	r3, r2
 80058e0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80058e2:	79fb      	ldrb	r3, [r7, #7]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d11e      	bne.n	8005926 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d009      	beq.n	8005904 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fc:	461a      	mov	r2, r3
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	015a      	lsls	r2, r3, #5
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	4413      	add	r3, r2
 800590c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	0151      	lsls	r1, r2, #5
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	440a      	add	r2, r1
 800591a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800591e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005922:	6013      	str	r3, [r2, #0]
 8005924:	e097      	b.n	8005a56 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	4413      	add	r3, r2
 800592e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	0151      	lsls	r1, r2, #5
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	440a      	add	r2, r1
 800593c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005940:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005944:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 8083 	beq.w	8005a56 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	f003 030f 	and.w	r3, r3, #15
 8005960:	2101      	movs	r1, #1
 8005962:	fa01 f303 	lsl.w	r3, r1, r3
 8005966:	6979      	ldr	r1, [r7, #20]
 8005968:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800596c:	4313      	orrs	r3, r2
 800596e:	634b      	str	r3, [r1, #52]	; 0x34
 8005970:	e071      	b.n	8005a56 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	0151      	lsls	r1, r2, #5
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	440a      	add	r2, r1
 8005988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800598c:	0cdb      	lsrs	r3, r3, #19
 800598e:	04db      	lsls	r3, r3, #19
 8005990:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	4413      	add	r3, r2
 800599a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	0151      	lsls	r1, r2, #5
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	440a      	add	r2, r1
 80059a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	68da      	ldr	r2, [r3, #12]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	0151      	lsls	r1, r2, #5
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	440a      	add	r2, r1
 80059e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fa:	691a      	ldr	r2, [r3, #16]
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a04:	6939      	ldr	r1, [r7, #16]
 8005a06:	0148      	lsls	r0, r1, #5
 8005a08:	6979      	ldr	r1, [r7, #20]
 8005a0a:	4401      	add	r1, r0
 8005a0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a10:	4313      	orrs	r3, r2
 8005a12:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005a14:	79fb      	ldrb	r3, [r7, #7]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d10d      	bne.n	8005a36 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d009      	beq.n	8005a36 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	6919      	ldr	r1, [r3, #16]
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a32:	460a      	mov	r2, r1
 8005a34:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	0151      	lsls	r1, r2, #5
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	440a      	add	r2, r1
 8005a4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a54:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	371c      	adds	r7, #28
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a72:	2300      	movs	r3, #0
 8005a74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	785b      	ldrb	r3, [r3, #1]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d14a      	bne.n	8005b18 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a9a:	f040 8086 	bne.w	8005baa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	7812      	ldrb	r2, [r2, #0]
 8005ab2:	0151      	lsls	r1, r2, #5
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	440a      	add	r2, r1
 8005ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005abc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ac0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	7812      	ldrb	r2, [r2, #0]
 8005ad6:	0151      	lsls	r1, r2, #5
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	440a      	add	r2, r1
 8005adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ae4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f242 7210 	movw	r2, #10000	; 0x2710
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d902      	bls.n	8005afc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	75fb      	strb	r3, [r7, #23]
          break;
 8005afa:	e056      	b.n	8005baa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b14:	d0e7      	beq.n	8005ae6 <USB_EPStopXfer+0x82>
 8005b16:	e048      	b.n	8005baa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b30:	d13b      	bne.n	8005baa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	7812      	ldrb	r2, [r2, #0]
 8005b46:	0151      	lsls	r1, r2, #5
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	440a      	add	r2, r1
 8005b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b54:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	7812      	ldrb	r2, [r2, #0]
 8005b6a:	0151      	lsls	r1, r2, #5
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	440a      	add	r2, r1
 8005b70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b78:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f242 7210 	movw	r2, #10000	; 0x2710
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d902      	bls.n	8005b90 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	75fb      	strb	r3, [r7, #23]
          break;
 8005b8e:	e00c      	b.n	8005baa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ba4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ba8:	d0e7      	beq.n	8005b7a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	371c      	adds	r7, #28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b089      	sub	sp, #36	; 0x24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	71fb      	strb	r3, [r7, #7]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005bd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d123      	bne.n	8005c26 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005bde:	88bb      	ldrh	r3, [r7, #4]
 8005be0:	3303      	adds	r3, #3
 8005be2:	089b      	lsrs	r3, r3, #2
 8005be4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005be6:	2300      	movs	r3, #0
 8005be8:	61bb      	str	r3, [r7, #24]
 8005bea:	e018      	b.n	8005c1e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005bec:	79fb      	ldrb	r3, [r7, #7]
 8005bee:	031a      	lsls	r2, r3, #12
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	3301      	adds	r3, #1
 8005c04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	3301      	adds	r3, #1
 8005c16:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	61bb      	str	r3, [r7, #24]
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d3e2      	bcc.n	8005bec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3724      	adds	r7, #36	; 0x24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b08b      	sub	sp, #44	; 0x2c
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c4a:	88fb      	ldrh	r3, [r7, #6]
 8005c4c:	089b      	lsrs	r3, r3, #2
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c52:	88fb      	ldrh	r3, [r7, #6]
 8005c54:	f003 0303 	and.w	r3, r3, #3
 8005c58:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	623b      	str	r3, [r7, #32]
 8005c5e:	e014      	b.n	8005c8a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	3301      	adds	r3, #1
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	3301      	adds	r3, #1
 8005c76:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	3301      	adds	r3, #1
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	3301      	adds	r3, #1
 8005c88:	623b      	str	r3, [r7, #32]
 8005c8a:	6a3a      	ldr	r2, [r7, #32]
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d3e6      	bcc.n	8005c60 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c92:	8bfb      	ldrh	r3, [r7, #30]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d01e      	beq.n	8005cd6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f107 0310 	add.w	r3, r7, #16
 8005ca8:	6812      	ldr	r2, [r2, #0]
 8005caa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	00db      	lsls	r3, r3, #3
 8005cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	701a      	strb	r2, [r3, #0]
      i++;
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	623b      	str	r3, [r7, #32]
      pDest++;
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005cca:	8bfb      	ldrh	r3, [r7, #30]
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005cd0:	8bfb      	ldrh	r3, [r7, #30]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1ea      	bne.n	8005cac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	372c      	adds	r7, #44	; 0x2c
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	785b      	ldrb	r3, [r3, #1]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d12c      	bne.n	8005d5a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	db12      	blt.n	8005d38 <USB_EPSetStall+0x54>
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00f      	beq.n	8005d38 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	0151      	lsls	r1, r2, #5
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	440a      	add	r2, r1
 8005d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d36:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	0151      	lsls	r1, r2, #5
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	440a      	add	r2, r1
 8005d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d56:	6013      	str	r3, [r2, #0]
 8005d58:	e02b      	b.n	8005db2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	db12      	blt.n	8005d92 <USB_EPSetStall+0xae>
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00f      	beq.n	8005d92 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	0151      	lsls	r1, r2, #5
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	440a      	add	r2, r1
 8005d88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d90:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	0151      	lsls	r1, r2, #5
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	440a      	add	r2, r1
 8005da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005db0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	785b      	ldrb	r3, [r3, #1]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d128      	bne.n	8005e2e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	0151      	lsls	r1, r2, #5
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	440a      	add	r2, r1
 8005df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dfa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	791b      	ldrb	r3, [r3, #4]
 8005e00:	2b03      	cmp	r3, #3
 8005e02:	d003      	beq.n	8005e0c <USB_EPClearStall+0x4c>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	791b      	ldrb	r3, [r3, #4]
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d138      	bne.n	8005e7e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	0151      	lsls	r1, r2, #5
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	440a      	add	r2, r1
 8005e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e2a:	6013      	str	r3, [r2, #0]
 8005e2c:	e027      	b.n	8005e7e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	0151      	lsls	r1, r2, #5
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	440a      	add	r2, r1
 8005e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	791b      	ldrb	r3, [r3, #4]
 8005e52:	2b03      	cmp	r3, #3
 8005e54:	d003      	beq.n	8005e5e <USB_EPClearStall+0x9e>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	791b      	ldrb	r3, [r3, #4]
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d10f      	bne.n	8005e7e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	0151      	lsls	r1, r2, #5
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	440a      	add	r2, r1
 8005e74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e7c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eaa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005eae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	78fb      	ldrb	r3, [r7, #3]
 8005eba:	011b      	lsls	r3, r3, #4
 8005ebc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005ec0:	68f9      	ldr	r1, [r7, #12]
 8005ec2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ef2:	f023 0303 	bic.w	r3, r3, #3
 8005ef6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f06:	f023 0302 	bic.w	r3, r3, #2
 8005f0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b085      	sub	sp, #20
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f34:	f023 0303 	bic.w	r3, r3, #3
 8005f38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f48:	f043 0302 	orr.w	r3, r3, #2
 8005f4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	4013      	ands	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f74:	68fb      	ldr	r3, [r7, #12]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b085      	sub	sp, #20
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	0c1b      	lsrs	r3, r3, #16
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b085      	sub	sp, #20
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	b29b      	uxth	r3, r3
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b085      	sub	sp, #20
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005ffa:	78fb      	ldrb	r3, [r7, #3]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	4413      	add	r3, r2
 8006002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	4013      	ands	r3, r2
 8006016:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006018:	68bb      	ldr	r3, [r7, #8]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006026:	b480      	push	{r7}
 8006028:	b087      	sub	sp, #28
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	460b      	mov	r3, r1
 8006030:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006048:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800604a:	78fb      	ldrb	r3, [r7, #3]
 800604c:	f003 030f 	and.w	r3, r3, #15
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	fa22 f303 	lsr.w	r3, r2, r3
 8006056:	01db      	lsls	r3, r3, #7
 8006058:	b2db      	uxtb	r3, r3
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	4313      	orrs	r3, r2
 800605e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006060:	78fb      	ldrb	r3, [r7, #3]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4013      	ands	r3, r2
 8006072:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006074:	68bb      	ldr	r3, [r7, #8]
}
 8006076:	4618      	mov	r0, r3
 8006078:	371c      	adds	r7, #28
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006082:	b480      	push	{r7}
 8006084:	b083      	sub	sp, #12
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	f003 0301 	and.w	r3, r3, #1
}
 8006092:	4618      	mov	r0, r3
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800609e:	b480      	push	{r7}
 80060a0:	b085      	sub	sp, #20
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80060bc:	f023 0307 	bic.w	r3, r3, #7
 80060c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3714      	adds	r7, #20
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	460b      	mov	r3, r1
 80060ee:	607a      	str	r2, [r7, #4]
 80060f0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	333c      	adds	r3, #60	; 0x3c
 80060fa:	3304      	adds	r3, #4
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	4a26      	ldr	r2, [pc, #152]	; (800619c <USB_EP0_OutStart+0xb8>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d90a      	bls.n	800611e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006114:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006118:	d101      	bne.n	800611e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	e037      	b.n	800618e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006124:	461a      	mov	r2, r3
 8006126:	2300      	movs	r3, #0
 8006128:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006138:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800613c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800614c:	f043 0318 	orr.w	r3, r3, #24
 8006150:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006160:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006164:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006166:	7afb      	ldrb	r3, [r7, #11]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d10f      	bne.n	800618c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006172:	461a      	mov	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006186:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800618a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	4f54300a 	.word	0x4f54300a

080061a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061a8:	2300      	movs	r3, #0
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	3301      	adds	r3, #1
 80061b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	4a13      	ldr	r2, [pc, #76]	; (8006204 <USB_CoreReset+0x64>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d901      	bls.n	80061be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e01b      	b.n	80061f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	daf2      	bge.n	80061ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	f043 0201 	orr.w	r2, r3, #1
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	3301      	adds	r3, #1
 80061da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4a09      	ldr	r2, [pc, #36]	; (8006204 <USB_CoreReset+0x64>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d901      	bls.n	80061e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e006      	b.n	80061f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d0f0      	beq.n	80061d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	00030d40 	.word	0x00030d40

08006208 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	460b      	mov	r3, r1
 8006212:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006214:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006218:	f002 fc8a 	bl	8008b30 <USBD_static_malloc>
 800621c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d109      	bne.n	8006238 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	32b0      	adds	r2, #176	; 0xb0
 800622e:	2100      	movs	r1, #0
 8006230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006234:	2302      	movs	r3, #2
 8006236:	e0d4      	b.n	80063e2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006238:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800623c:	2100      	movs	r1, #0
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f002 fcda 	bl	8008bf8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	32b0      	adds	r2, #176	; 0xb0
 800624e:	68f9      	ldr	r1, [r7, #12]
 8006250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	32b0      	adds	r2, #176	; 0xb0
 800625e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	7c1b      	ldrb	r3, [r3, #16]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d138      	bne.n	80062e2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006270:	4b5e      	ldr	r3, [pc, #376]	; (80063ec <USBD_CDC_Init+0x1e4>)
 8006272:	7819      	ldrb	r1, [r3, #0]
 8006274:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006278:	2202      	movs	r2, #2
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f002 fb35 	bl	80088ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006280:	4b5a      	ldr	r3, [pc, #360]	; (80063ec <USBD_CDC_Init+0x1e4>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	f003 020f 	and.w	r2, r3, #15
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	4613      	mov	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	440b      	add	r3, r1
 8006294:	3324      	adds	r3, #36	; 0x24
 8006296:	2201      	movs	r2, #1
 8006298:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800629a:	4b55      	ldr	r3, [pc, #340]	; (80063f0 <USBD_CDC_Init+0x1e8>)
 800629c:	7819      	ldrb	r1, [r3, #0]
 800629e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062a2:	2202      	movs	r2, #2
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f002 fb20 	bl	80088ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80062aa:	4b51      	ldr	r3, [pc, #324]	; (80063f0 <USBD_CDC_Init+0x1e8>)
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	f003 020f 	and.w	r2, r3, #15
 80062b2:	6879      	ldr	r1, [r7, #4]
 80062b4:	4613      	mov	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	440b      	add	r3, r1
 80062be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80062c2:	2201      	movs	r2, #1
 80062c4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80062c6:	4b4b      	ldr	r3, [pc, #300]	; (80063f4 <USBD_CDC_Init+0x1ec>)
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	f003 020f 	and.w	r2, r3, #15
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	4613      	mov	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	440b      	add	r3, r1
 80062da:	3326      	adds	r3, #38	; 0x26
 80062dc:	2210      	movs	r2, #16
 80062de:	801a      	strh	r2, [r3, #0]
 80062e0:	e035      	b.n	800634e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80062e2:	4b42      	ldr	r3, [pc, #264]	; (80063ec <USBD_CDC_Init+0x1e4>)
 80062e4:	7819      	ldrb	r1, [r3, #0]
 80062e6:	2340      	movs	r3, #64	; 0x40
 80062e8:	2202      	movs	r2, #2
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f002 fafd 	bl	80088ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80062f0:	4b3e      	ldr	r3, [pc, #248]	; (80063ec <USBD_CDC_Init+0x1e4>)
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	f003 020f 	and.w	r2, r3, #15
 80062f8:	6879      	ldr	r1, [r7, #4]
 80062fa:	4613      	mov	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4413      	add	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	440b      	add	r3, r1
 8006304:	3324      	adds	r3, #36	; 0x24
 8006306:	2201      	movs	r2, #1
 8006308:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800630a:	4b39      	ldr	r3, [pc, #228]	; (80063f0 <USBD_CDC_Init+0x1e8>)
 800630c:	7819      	ldrb	r1, [r3, #0]
 800630e:	2340      	movs	r3, #64	; 0x40
 8006310:	2202      	movs	r2, #2
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f002 fae9 	bl	80088ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006318:	4b35      	ldr	r3, [pc, #212]	; (80063f0 <USBD_CDC_Init+0x1e8>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	f003 020f 	and.w	r2, r3, #15
 8006320:	6879      	ldr	r1, [r7, #4]
 8006322:	4613      	mov	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	440b      	add	r3, r1
 800632c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006330:	2201      	movs	r2, #1
 8006332:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006334:	4b2f      	ldr	r3, [pc, #188]	; (80063f4 <USBD_CDC_Init+0x1ec>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	f003 020f 	and.w	r2, r3, #15
 800633c:	6879      	ldr	r1, [r7, #4]
 800633e:	4613      	mov	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	440b      	add	r3, r1
 8006348:	3326      	adds	r3, #38	; 0x26
 800634a:	2210      	movs	r2, #16
 800634c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800634e:	4b29      	ldr	r3, [pc, #164]	; (80063f4 <USBD_CDC_Init+0x1ec>)
 8006350:	7819      	ldrb	r1, [r3, #0]
 8006352:	2308      	movs	r3, #8
 8006354:	2203      	movs	r2, #3
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f002 fac7 	bl	80088ea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800635c:	4b25      	ldr	r3, [pc, #148]	; (80063f4 <USBD_CDC_Init+0x1ec>)
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	f003 020f 	and.w	r2, r3, #15
 8006364:	6879      	ldr	r1, [r7, #4]
 8006366:	4613      	mov	r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	440b      	add	r3, r1
 8006370:	3324      	adds	r3, #36	; 0x24
 8006372:	2201      	movs	r2, #1
 8006374:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	33b0      	adds	r3, #176	; 0xb0
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80063ac:	2302      	movs	r3, #2
 80063ae:	e018      	b.n	80063e2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	7c1b      	ldrb	r3, [r3, #16]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10a      	bne.n	80063ce <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80063b8:	4b0d      	ldr	r3, [pc, #52]	; (80063f0 <USBD_CDC_Init+0x1e8>)
 80063ba:	7819      	ldrb	r1, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f002 fb7e 	bl	8008ac8 <USBD_LL_PrepareReceive>
 80063cc:	e008      	b.n	80063e0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80063ce:	4b08      	ldr	r3, [pc, #32]	; (80063f0 <USBD_CDC_Init+0x1e8>)
 80063d0:	7819      	ldrb	r1, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063d8:	2340      	movs	r3, #64	; 0x40
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f002 fb74 	bl	8008ac8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	200000a3 	.word	0x200000a3
 80063f0:	200000a4 	.word	0x200000a4
 80063f4:	200000a5 	.word	0x200000a5

080063f8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	460b      	mov	r3, r1
 8006402:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006404:	4b3a      	ldr	r3, [pc, #232]	; (80064f0 <USBD_CDC_DeInit+0xf8>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	4619      	mov	r1, r3
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f002 fa93 	bl	8008936 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006410:	4b37      	ldr	r3, [pc, #220]	; (80064f0 <USBD_CDC_DeInit+0xf8>)
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	f003 020f 	and.w	r2, r3, #15
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	4613      	mov	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	440b      	add	r3, r1
 8006424:	3324      	adds	r3, #36	; 0x24
 8006426:	2200      	movs	r2, #0
 8006428:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800642a:	4b32      	ldr	r3, [pc, #200]	; (80064f4 <USBD_CDC_DeInit+0xfc>)
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	4619      	mov	r1, r3
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f002 fa80 	bl	8008936 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006436:	4b2f      	ldr	r3, [pc, #188]	; (80064f4 <USBD_CDC_DeInit+0xfc>)
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	f003 020f 	and.w	r2, r3, #15
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	4613      	mov	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	440b      	add	r3, r1
 800644a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800644e:	2200      	movs	r2, #0
 8006450:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006452:	4b29      	ldr	r3, [pc, #164]	; (80064f8 <USBD_CDC_DeInit+0x100>)
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	4619      	mov	r1, r3
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f002 fa6c 	bl	8008936 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800645e:	4b26      	ldr	r3, [pc, #152]	; (80064f8 <USBD_CDC_DeInit+0x100>)
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	f003 020f 	and.w	r2, r3, #15
 8006466:	6879      	ldr	r1, [r7, #4]
 8006468:	4613      	mov	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	440b      	add	r3, r1
 8006472:	3324      	adds	r3, #36	; 0x24
 8006474:	2200      	movs	r2, #0
 8006476:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006478:	4b1f      	ldr	r3, [pc, #124]	; (80064f8 <USBD_CDC_DeInit+0x100>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	f003 020f 	and.w	r2, r3, #15
 8006480:	6879      	ldr	r1, [r7, #4]
 8006482:	4613      	mov	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	440b      	add	r3, r1
 800648c:	3326      	adds	r3, #38	; 0x26
 800648e:	2200      	movs	r2, #0
 8006490:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	32b0      	adds	r2, #176	; 0xb0
 800649c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d01f      	beq.n	80064e4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	33b0      	adds	r3, #176	; 0xb0
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	32b0      	adds	r2, #176	; 0xb0
 80064c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f002 fb40 	bl	8008b4c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	32b0      	adds	r2, #176	; 0xb0
 80064d6:	2100      	movs	r1, #0
 80064d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	200000a3 	.word	0x200000a3
 80064f4:	200000a4 	.word	0x200000a4
 80064f8:	200000a5 	.word	0x200000a5

080064fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	32b0      	adds	r2, #176	; 0xb0
 8006510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006514:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006516:	2300      	movs	r3, #0
 8006518:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800651e:	2300      	movs	r3, #0
 8006520:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006528:	2303      	movs	r3, #3
 800652a:	e0bf      	b.n	80066ac <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006534:	2b00      	cmp	r3, #0
 8006536:	d050      	beq.n	80065da <USBD_CDC_Setup+0xde>
 8006538:	2b20      	cmp	r3, #32
 800653a:	f040 80af 	bne.w	800669c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	88db      	ldrh	r3, [r3, #6]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d03a      	beq.n	80065bc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	b25b      	sxtb	r3, r3
 800654c:	2b00      	cmp	r3, #0
 800654e:	da1b      	bge.n	8006588 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	33b0      	adds	r3, #176	; 0xb0
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006566:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	88d2      	ldrh	r2, [r2, #6]
 800656c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	88db      	ldrh	r3, [r3, #6]
 8006572:	2b07      	cmp	r3, #7
 8006574:	bf28      	it	cs
 8006576:	2307      	movcs	r3, #7
 8006578:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	89fa      	ldrh	r2, [r7, #14]
 800657e:	4619      	mov	r1, r3
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f001 fd89 	bl	8008098 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006586:	e090      	b.n	80066aa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	785a      	ldrb	r2, [r3, #1]
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	88db      	ldrh	r3, [r3, #6]
 8006596:	2b3f      	cmp	r3, #63	; 0x3f
 8006598:	d803      	bhi.n	80065a2 <USBD_CDC_Setup+0xa6>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	88db      	ldrh	r3, [r3, #6]
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	e000      	b.n	80065a4 <USBD_CDC_Setup+0xa8>
 80065a2:	2240      	movs	r2, #64	; 0x40
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80065aa:	6939      	ldr	r1, [r7, #16]
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80065b2:	461a      	mov	r2, r3
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f001 fd9b 	bl	80080f0 <USBD_CtlPrepareRx>
      break;
 80065ba:	e076      	b.n	80066aa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	33b0      	adds	r3, #176	; 0xb0
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	7850      	ldrb	r0, [r2, #1]
 80065d2:	2200      	movs	r2, #0
 80065d4:	6839      	ldr	r1, [r7, #0]
 80065d6:	4798      	blx	r3
      break;
 80065d8:	e067      	b.n	80066aa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	785b      	ldrb	r3, [r3, #1]
 80065de:	2b0b      	cmp	r3, #11
 80065e0:	d851      	bhi.n	8006686 <USBD_CDC_Setup+0x18a>
 80065e2:	a201      	add	r2, pc, #4	; (adr r2, 80065e8 <USBD_CDC_Setup+0xec>)
 80065e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e8:	08006619 	.word	0x08006619
 80065ec:	08006695 	.word	0x08006695
 80065f0:	08006687 	.word	0x08006687
 80065f4:	08006687 	.word	0x08006687
 80065f8:	08006687 	.word	0x08006687
 80065fc:	08006687 	.word	0x08006687
 8006600:	08006687 	.word	0x08006687
 8006604:	08006687 	.word	0x08006687
 8006608:	08006687 	.word	0x08006687
 800660c:	08006687 	.word	0x08006687
 8006610:	08006643 	.word	0x08006643
 8006614:	0800666d 	.word	0x0800666d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b03      	cmp	r3, #3
 8006622:	d107      	bne.n	8006634 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006624:	f107 030a 	add.w	r3, r7, #10
 8006628:	2202      	movs	r2, #2
 800662a:	4619      	mov	r1, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f001 fd33 	bl	8008098 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006632:	e032      	b.n	800669a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006634:	6839      	ldr	r1, [r7, #0]
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f001 fcbd 	bl	8007fb6 <USBD_CtlError>
            ret = USBD_FAIL;
 800663c:	2303      	movs	r3, #3
 800663e:	75fb      	strb	r3, [r7, #23]
          break;
 8006640:	e02b      	b.n	800669a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b03      	cmp	r3, #3
 800664c:	d107      	bne.n	800665e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800664e:	f107 030d 	add.w	r3, r7, #13
 8006652:	2201      	movs	r2, #1
 8006654:	4619      	mov	r1, r3
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f001 fd1e 	bl	8008098 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800665c:	e01d      	b.n	800669a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800665e:	6839      	ldr	r1, [r7, #0]
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f001 fca8 	bl	8007fb6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006666:	2303      	movs	r3, #3
 8006668:	75fb      	strb	r3, [r7, #23]
          break;
 800666a:	e016      	b.n	800669a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b03      	cmp	r3, #3
 8006676:	d00f      	beq.n	8006698 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f001 fc9b 	bl	8007fb6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006680:	2303      	movs	r3, #3
 8006682:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006684:	e008      	b.n	8006698 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f001 fc94 	bl	8007fb6 <USBD_CtlError>
          ret = USBD_FAIL;
 800668e:	2303      	movs	r3, #3
 8006690:	75fb      	strb	r3, [r7, #23]
          break;
 8006692:	e002      	b.n	800669a <USBD_CDC_Setup+0x19e>
          break;
 8006694:	bf00      	nop
 8006696:	e008      	b.n	80066aa <USBD_CDC_Setup+0x1ae>
          break;
 8006698:	bf00      	nop
      }
      break;
 800669a:	e006      	b.n	80066aa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800669c:	6839      	ldr	r1, [r7, #0]
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f001 fc89 	bl	8007fb6 <USBD_CtlError>
      ret = USBD_FAIL;
 80066a4:	2303      	movs	r3, #3
 80066a6:	75fb      	strb	r3, [r7, #23]
      break;
 80066a8:	bf00      	nop
  }

  return (uint8_t)ret;
 80066aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3718      	adds	r7, #24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80066c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	32b0      	adds	r2, #176	; 0xb0
 80066d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80066da:	2303      	movs	r3, #3
 80066dc:	e065      	b.n	80067aa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	32b0      	adds	r2, #176	; 0xb0
 80066e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80066ee:	78fb      	ldrb	r3, [r7, #3]
 80066f0:	f003 020f 	and.w	r2, r3, #15
 80066f4:	6879      	ldr	r1, [r7, #4]
 80066f6:	4613      	mov	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	440b      	add	r3, r1
 8006700:	3318      	adds	r3, #24
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d02f      	beq.n	8006768 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006708:	78fb      	ldrb	r3, [r7, #3]
 800670a:	f003 020f 	and.w	r2, r3, #15
 800670e:	6879      	ldr	r1, [r7, #4]
 8006710:	4613      	mov	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	440b      	add	r3, r1
 800671a:	3318      	adds	r3, #24
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	78fb      	ldrb	r3, [r7, #3]
 8006720:	f003 010f 	and.w	r1, r3, #15
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	460b      	mov	r3, r1
 8006728:	00db      	lsls	r3, r3, #3
 800672a:	440b      	add	r3, r1
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4403      	add	r3, r0
 8006730:	3348      	adds	r3, #72	; 0x48
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	fbb2 f1f3 	udiv	r1, r2, r3
 8006738:	fb01 f303 	mul.w	r3, r1, r3
 800673c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800673e:	2b00      	cmp	r3, #0
 8006740:	d112      	bne.n	8006768 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006742:	78fb      	ldrb	r3, [r7, #3]
 8006744:	f003 020f 	and.w	r2, r3, #15
 8006748:	6879      	ldr	r1, [r7, #4]
 800674a:	4613      	mov	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	440b      	add	r3, r1
 8006754:	3318      	adds	r3, #24
 8006756:	2200      	movs	r2, #0
 8006758:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800675a:	78f9      	ldrb	r1, [r7, #3]
 800675c:	2300      	movs	r3, #0
 800675e:	2200      	movs	r2, #0
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f002 f990 	bl	8008a86 <USBD_LL_Transmit>
 8006766:	e01f      	b.n	80067a8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2200      	movs	r2, #0
 800676c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	33b0      	adds	r3, #176	; 0xb0
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d010      	beq.n	80067a8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	33b0      	adds	r3, #176	; 0xb0
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80067a4:	78fa      	ldrb	r2, [r7, #3]
 80067a6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b084      	sub	sp, #16
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	460b      	mov	r3, r1
 80067bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	32b0      	adds	r2, #176	; 0xb0
 80067c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	32b0      	adds	r2, #176	; 0xb0
 80067d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e01a      	b.n	800681a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80067e4:	78fb      	ldrb	r3, [r7, #3]
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f002 f98e 	bl	8008b0a <USBD_LL_GetRxDataSize>
 80067ee:	4602      	mov	r2, r0
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	33b0      	adds	r3, #176	; 0xb0
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006814:	4611      	mov	r1, r2
 8006816:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	32b0      	adds	r2, #176	; 0xb0
 8006834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006838:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006840:	2303      	movs	r3, #3
 8006842:	e025      	b.n	8006890 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	33b0      	adds	r3, #176	; 0xb0
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d01a      	beq.n	800688e <USBD_CDC_EP0_RxReady+0x6c>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800685e:	2bff      	cmp	r3, #255	; 0xff
 8006860:	d015      	beq.n	800688e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	33b0      	adds	r3, #176	; 0xb0
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800687a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006882:	b292      	uxth	r2, r2
 8006884:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	22ff      	movs	r2, #255	; 0xff
 800688a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80068a0:	2182      	movs	r1, #130	; 0x82
 80068a2:	4818      	ldr	r0, [pc, #96]	; (8006904 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80068a4:	f000 fd4f 	bl	8007346 <USBD_GetEpDesc>
 80068a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80068aa:	2101      	movs	r1, #1
 80068ac:	4815      	ldr	r0, [pc, #84]	; (8006904 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80068ae:	f000 fd4a 	bl	8007346 <USBD_GetEpDesc>
 80068b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80068b4:	2181      	movs	r1, #129	; 0x81
 80068b6:	4813      	ldr	r0, [pc, #76]	; (8006904 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80068b8:	f000 fd45 	bl	8007346 <USBD_GetEpDesc>
 80068bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d002      	beq.n	80068ca <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	2210      	movs	r2, #16
 80068c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d006      	beq.n	80068de <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068d8:	711a      	strb	r2, [r3, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d006      	beq.n	80068f2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068ec:	711a      	strb	r2, [r3, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2243      	movs	r2, #67	; 0x43
 80068f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80068f8:	4b02      	ldr	r3, [pc, #8]	; (8006904 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3718      	adds	r7, #24
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	20000060 	.word	0x20000060

08006908 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006910:	2182      	movs	r1, #130	; 0x82
 8006912:	4818      	ldr	r0, [pc, #96]	; (8006974 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006914:	f000 fd17 	bl	8007346 <USBD_GetEpDesc>
 8006918:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800691a:	2101      	movs	r1, #1
 800691c:	4815      	ldr	r0, [pc, #84]	; (8006974 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800691e:	f000 fd12 	bl	8007346 <USBD_GetEpDesc>
 8006922:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006924:	2181      	movs	r1, #129	; 0x81
 8006926:	4813      	ldr	r0, [pc, #76]	; (8006974 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006928:	f000 fd0d 	bl	8007346 <USBD_GetEpDesc>
 800692c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	2210      	movs	r2, #16
 8006938:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d006      	beq.n	800694e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	2200      	movs	r2, #0
 8006944:	711a      	strb	r2, [r3, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f042 0202 	orr.w	r2, r2, #2
 800694c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d006      	beq.n	8006962 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	711a      	strb	r2, [r3, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f042 0202 	orr.w	r2, r2, #2
 8006960:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2243      	movs	r2, #67	; 0x43
 8006966:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006968:	4b02      	ldr	r3, [pc, #8]	; (8006974 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800696a:	4618      	mov	r0, r3
 800696c:	3718      	adds	r7, #24
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20000060 	.word	0x20000060

08006978 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006980:	2182      	movs	r1, #130	; 0x82
 8006982:	4818      	ldr	r0, [pc, #96]	; (80069e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006984:	f000 fcdf 	bl	8007346 <USBD_GetEpDesc>
 8006988:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800698a:	2101      	movs	r1, #1
 800698c:	4815      	ldr	r0, [pc, #84]	; (80069e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800698e:	f000 fcda 	bl	8007346 <USBD_GetEpDesc>
 8006992:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006994:	2181      	movs	r1, #129	; 0x81
 8006996:	4813      	ldr	r0, [pc, #76]	; (80069e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006998:	f000 fcd5 	bl	8007346 <USBD_GetEpDesc>
 800699c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	2210      	movs	r2, #16
 80069a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d006      	beq.n	80069be <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069b8:	711a      	strb	r2, [r3, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d006      	beq.n	80069d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069cc:	711a      	strb	r2, [r3, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2243      	movs	r2, #67	; 0x43
 80069d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80069d8:	4b02      	ldr	r3, [pc, #8]	; (80069e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	20000060 	.word	0x20000060

080069e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	220a      	movs	r2, #10
 80069f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80069f6:	4b03      	ldr	r3, [pc, #12]	; (8006a04 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	2000001c 	.word	0x2000001c

08006a08 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e009      	b.n	8006a30 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	33b0      	adds	r3, #176	; 0xb0
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b087      	sub	sp, #28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	32b0      	adds	r2, #176	; 0xb0
 8006a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a56:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e008      	b.n	8006a74 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	371c      	adds	r7, #28
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	32b0      	adds	r2, #176	; 0xb0
 8006a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a98:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d101      	bne.n	8006aa4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e004      	b.n	8006aae <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
	...

08006abc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	32b0      	adds	r2, #176	; 0xb0
 8006ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	32b0      	adds	r2, #176	; 0xb0
 8006ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e025      	b.n	8006b3a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d11f      	bne.n	8006b38 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006b00:	4b10      	ldr	r3, [pc, #64]	; (8006b44 <USBD_CDC_TransmitPacket+0x88>)
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	f003 020f 	and.w	r2, r3, #15
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	4613      	mov	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4403      	add	r3, r0
 8006b1a:	3318      	adds	r3, #24
 8006b1c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006b1e:	4b09      	ldr	r3, [pc, #36]	; (8006b44 <USBD_CDC_TransmitPacket+0x88>)
 8006b20:	7819      	ldrb	r1, [r3, #0]
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f001 ffa9 	bl	8008a86 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006b34:	2300      	movs	r3, #0
 8006b36:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	200000a3 	.word	0x200000a3

08006b48 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	32b0      	adds	r2, #176	; 0xb0
 8006b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b5e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	32b0      	adds	r2, #176	; 0xb0
 8006b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e018      	b.n	8006ba8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	7c1b      	ldrb	r3, [r3, #16]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10a      	bne.n	8006b94 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b7e:	4b0c      	ldr	r3, [pc, #48]	; (8006bb0 <USBD_CDC_ReceivePacket+0x68>)
 8006b80:	7819      	ldrb	r1, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 ff9b 	bl	8008ac8 <USBD_LL_PrepareReceive>
 8006b92:	e008      	b.n	8006ba6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b94:	4b06      	ldr	r3, [pc, #24]	; (8006bb0 <USBD_CDC_ReceivePacket+0x68>)
 8006b96:	7819      	ldrb	r1, [r3, #0]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b9e:	2340      	movs	r3, #64	; 0x40
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f001 ff91 	bl	8008ac8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	200000a4 	.word	0x200000a4

08006bb4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e01f      	b.n	8006c0c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	79fa      	ldrb	r2, [r7, #7]
 8006bfe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f001 fe0b 	bl	800881c <USBD_LL_Init>
 8006c06:	4603      	mov	r3, r0
 8006c08:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3718      	adds	r7, #24
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e025      	b.n	8006c78 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	32ae      	adds	r2, #174	; 0xae
 8006c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00f      	beq.n	8006c68 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	32ae      	adds	r2, #174	; 0xae
 8006c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c58:	f107 020e 	add.w	r2, r7, #14
 8006c5c:	4610      	mov	r0, r2
 8006c5e:	4798      	blx	r3
 8006c60:	4602      	mov	r2, r0
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f001 fe13 	bl	80088b4 <USBD_LL_Start>
 8006c8e:	4603      	mov	r3, r0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3708      	adds	r7, #8
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ca0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b084      	sub	sp, #16
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d009      	beq.n	8006cdc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	78fa      	ldrb	r2, [r7, #3]
 8006cd2:	4611      	mov	r1, r2
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	4798      	blx	r3
 8006cd8:	4603      	mov	r3, r0
 8006cda:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b084      	sub	sp, #16
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	460b      	mov	r3, r1
 8006cf0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	78fa      	ldrb	r2, [r7, #3]
 8006d00:	4611      	mov	r1, r2
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	4798      	blx	r3
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f001 f908 	bl	8007f42 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006d40:	461a      	mov	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d4e:	f003 031f 	and.w	r3, r3, #31
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d01a      	beq.n	8006d8c <USBD_LL_SetupStage+0x72>
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d822      	bhi.n	8006da0 <USBD_LL_SetupStage+0x86>
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d002      	beq.n	8006d64 <USBD_LL_SetupStage+0x4a>
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d00a      	beq.n	8006d78 <USBD_LL_SetupStage+0x5e>
 8006d62:	e01d      	b.n	8006da0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fb5f 	bl	8007430 <USBD_StdDevReq>
 8006d72:	4603      	mov	r3, r0
 8006d74:	73fb      	strb	r3, [r7, #15]
      break;
 8006d76:	e020      	b.n	8006dba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d7e:	4619      	mov	r1, r3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fbc7 	bl	8007514 <USBD_StdItfReq>
 8006d86:	4603      	mov	r3, r0
 8006d88:	73fb      	strb	r3, [r7, #15]
      break;
 8006d8a:	e016      	b.n	8006dba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d92:	4619      	mov	r1, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fc29 	bl	80075ec <USBD_StdEPReq>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d9e:	e00c      	b.n	8006dba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006da6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	4619      	mov	r1, r3
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f001 fde0 	bl	8008974 <USBD_LL_StallEP>
 8006db4:	4603      	mov	r3, r0
 8006db6:	73fb      	strb	r3, [r7, #15]
      break;
 8006db8:	bf00      	nop
  }

  return ret;
 8006dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	607a      	str	r2, [r7, #4]
 8006dd0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006dd6:	7afb      	ldrb	r3, [r7, #11]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d16e      	bne.n	8006eba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006de2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	f040 8098 	bne.w	8006f20 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	689a      	ldr	r2, [r3, #8]
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d913      	bls.n	8006e24 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	1ad2      	subs	r2, r2, r3
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	4293      	cmp	r3, r2
 8006e14:	bf28      	it	cs
 8006e16:	4613      	movcs	r3, r2
 8006e18:	461a      	mov	r2, r3
 8006e1a:	6879      	ldr	r1, [r7, #4]
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f001 f984 	bl	800812a <USBD_CtlContinueRx>
 8006e22:	e07d      	b.n	8006f20 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e2a:	f003 031f 	and.w	r3, r3, #31
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d014      	beq.n	8006e5c <USBD_LL_DataOutStage+0x98>
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d81d      	bhi.n	8006e72 <USBD_LL_DataOutStage+0xae>
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d002      	beq.n	8006e40 <USBD_LL_DataOutStage+0x7c>
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d003      	beq.n	8006e46 <USBD_LL_DataOutStage+0x82>
 8006e3e:	e018      	b.n	8006e72 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006e40:	2300      	movs	r3, #0
 8006e42:	75bb      	strb	r3, [r7, #22]
            break;
 8006e44:	e018      	b.n	8006e78 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	4619      	mov	r1, r3
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 fa5e 	bl	8007312 <USBD_CoreFindIF>
 8006e56:	4603      	mov	r3, r0
 8006e58:	75bb      	strb	r3, [r7, #22]
            break;
 8006e5a:	e00d      	b.n	8006e78 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	4619      	mov	r1, r3
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f000 fa60 	bl	800732c <USBD_CoreFindEP>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	75bb      	strb	r3, [r7, #22]
            break;
 8006e70:	e002      	b.n	8006e78 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	75bb      	strb	r3, [r7, #22]
            break;
 8006e76:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006e78:	7dbb      	ldrb	r3, [r7, #22]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d119      	bne.n	8006eb2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b03      	cmp	r3, #3
 8006e88:	d113      	bne.n	8006eb2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006e8a:	7dba      	ldrb	r2, [r7, #22]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	32ae      	adds	r2, #174	; 0xae
 8006e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00b      	beq.n	8006eb2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006e9a:	7dba      	ldrb	r2, [r7, #22]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006ea2:	7dba      	ldrb	r2, [r7, #22]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	32ae      	adds	r2, #174	; 0xae
 8006ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f001 f94a 	bl	800814c <USBD_CtlSendStatus>
 8006eb8:	e032      	b.n	8006f20 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006eba:	7afb      	ldrb	r3, [r7, #11]
 8006ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 fa31 	bl	800732c <USBD_CoreFindEP>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ece:	7dbb      	ldrb	r3, [r7, #22]
 8006ed0:	2bff      	cmp	r3, #255	; 0xff
 8006ed2:	d025      	beq.n	8006f20 <USBD_LL_DataOutStage+0x15c>
 8006ed4:	7dbb      	ldrb	r3, [r7, #22]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d122      	bne.n	8006f20 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	d117      	bne.n	8006f16 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006ee6:	7dba      	ldrb	r2, [r7, #22]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	32ae      	adds	r2, #174	; 0xae
 8006eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00f      	beq.n	8006f16 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006ef6:	7dba      	ldrb	r2, [r7, #22]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006efe:	7dba      	ldrb	r2, [r7, #22]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	32ae      	adds	r2, #174	; 0xae
 8006f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	7afa      	ldrb	r2, [r7, #11]
 8006f0c:	4611      	mov	r1, r2
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	4798      	blx	r3
 8006f12:	4603      	mov	r3, r0
 8006f14:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006f16:	7dfb      	ldrb	r3, [r7, #23]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006f1c:	7dfb      	ldrb	r3, [r7, #23]
 8006f1e:	e000      	b.n	8006f22 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3718      	adds	r7, #24
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b086      	sub	sp, #24
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	60f8      	str	r0, [r7, #12]
 8006f32:	460b      	mov	r3, r1
 8006f34:	607a      	str	r2, [r7, #4]
 8006f36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006f38:	7afb      	ldrb	r3, [r7, #11]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d16f      	bne.n	800701e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	3314      	adds	r3, #20
 8006f42:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d15a      	bne.n	8007004 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	689a      	ldr	r2, [r3, #8]
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d914      	bls.n	8006f84 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	689a      	ldr	r2, [r3, #8]
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	1ad2      	subs	r2, r2, r3
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	6879      	ldr	r1, [r7, #4]
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f001 f8ac 	bl	80080ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f76:	2300      	movs	r3, #0
 8006f78:	2200      	movs	r2, #0
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f001 fda3 	bl	8008ac8 <USBD_LL_PrepareReceive>
 8006f82:	e03f      	b.n	8007004 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	68da      	ldr	r2, [r3, #12]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d11c      	bne.n	8006fca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d316      	bcc.n	8006fca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d20f      	bcs.n	8006fca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006faa:	2200      	movs	r2, #0
 8006fac:	2100      	movs	r1, #0
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f001 f88d 	bl	80080ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f001 fd80 	bl	8008ac8 <USBD_LL_PrepareReceive>
 8006fc8:	e01c      	b.n	8007004 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b03      	cmp	r3, #3
 8006fd4:	d10f      	bne.n	8006ff6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d009      	beq.n	8006ff6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ff6:	2180      	movs	r1, #128	; 0x80
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f001 fcbb 	bl	8008974 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f001 f8b7 	bl	8008172 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d03a      	beq.n	8007084 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f7ff fe42 	bl	8006c98 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800701c:	e032      	b.n	8007084 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800701e:	7afb      	ldrb	r3, [r7, #11]
 8007020:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007024:	b2db      	uxtb	r3, r3
 8007026:	4619      	mov	r1, r3
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f000 f97f 	bl	800732c <USBD_CoreFindEP>
 800702e:	4603      	mov	r3, r0
 8007030:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007032:	7dfb      	ldrb	r3, [r7, #23]
 8007034:	2bff      	cmp	r3, #255	; 0xff
 8007036:	d025      	beq.n	8007084 <USBD_LL_DataInStage+0x15a>
 8007038:	7dfb      	ldrb	r3, [r7, #23]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d122      	bne.n	8007084 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b03      	cmp	r3, #3
 8007048:	d11c      	bne.n	8007084 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800704a:	7dfa      	ldrb	r2, [r7, #23]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	32ae      	adds	r2, #174	; 0xae
 8007050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d014      	beq.n	8007084 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800705a:	7dfa      	ldrb	r2, [r7, #23]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007062:	7dfa      	ldrb	r2, [r7, #23]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	32ae      	adds	r2, #174	; 0xae
 8007068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	7afa      	ldrb	r2, [r7, #11]
 8007070:	4611      	mov	r1, r2
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	4798      	blx	r3
 8007076:	4603      	mov	r3, r0
 8007078:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800707a:	7dbb      	ldrb	r3, [r7, #22]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007080:	7dbb      	ldrb	r3, [r7, #22]
 8007082:	e000      	b.n	8007086 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3718      	adds	r7, #24
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b084      	sub	sp, #16
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007096:	2300      	movs	r3, #0
 8007098:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d014      	beq.n	80070f4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00e      	beq.n	80070f4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	6852      	ldr	r2, [r2, #4]
 80070e2:	b2d2      	uxtb	r2, r2
 80070e4:	4611      	mov	r1, r2
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	4798      	blx	r3
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80070f0:	2303      	movs	r3, #3
 80070f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070f4:	2340      	movs	r3, #64	; 0x40
 80070f6:	2200      	movs	r2, #0
 80070f8:	2100      	movs	r1, #0
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f001 fbf5 	bl	80088ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2240      	movs	r2, #64	; 0x40
 800710c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007110:	2340      	movs	r3, #64	; 0x40
 8007112:	2200      	movs	r2, #0
 8007114:	2180      	movs	r1, #128	; 0x80
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f001 fbe7 	bl	80088ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2240      	movs	r2, #64	; 0x40
 8007126:	621a      	str	r2, [r3, #32]

  return ret;
 8007128:	7bfb      	ldrb	r3, [r7, #15]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007132:	b480      	push	{r7}
 8007134:	b083      	sub	sp, #12
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	460b      	mov	r3, r1
 800713c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	78fa      	ldrb	r2, [r7, #3]
 8007142:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007152:	b480      	push	{r7}
 8007154:	b083      	sub	sp, #12
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007160:	b2da      	uxtb	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2204      	movs	r2, #4
 800716c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800717e:	b480      	push	{r7}
 8007180:	b083      	sub	sp, #12
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b04      	cmp	r3, #4
 8007190:	d106      	bne.n	80071a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007198:	b2da      	uxtb	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b082      	sub	sp, #8
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b03      	cmp	r3, #3
 80071c0:	d110      	bne.n	80071e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00b      	beq.n	80071e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071d2:	69db      	ldr	r3, [r3, #28]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d005      	beq.n	80071e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071de:	69db      	ldr	r3, [r3, #28]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b082      	sub	sp, #8
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	460b      	mov	r3, r1
 80071f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	32ae      	adds	r2, #174	; 0xae
 8007204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800720c:	2303      	movs	r3, #3
 800720e:	e01c      	b.n	800724a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b03      	cmp	r3, #3
 800721a:	d115      	bne.n	8007248 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	32ae      	adds	r2, #174	; 0xae
 8007226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800722a:	6a1b      	ldr	r3, [r3, #32]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00b      	beq.n	8007248 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	32ae      	adds	r2, #174	; 0xae
 800723a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	78fa      	ldrb	r2, [r7, #3]
 8007242:	4611      	mov	r1, r2
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b082      	sub	sp, #8
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	460b      	mov	r3, r1
 800725c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	32ae      	adds	r2, #174	; 0xae
 8007268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d101      	bne.n	8007274 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007270:	2303      	movs	r3, #3
 8007272:	e01c      	b.n	80072ae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b03      	cmp	r3, #3
 800727e:	d115      	bne.n	80072ac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	32ae      	adds	r2, #174	; 0xae
 800728a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00b      	beq.n	80072ac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	32ae      	adds	r2, #174	; 0xae
 800729e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a4:	78fa      	ldrb	r2, [r7, #3]
 80072a6:	4611      	mov	r1, r2
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b083      	sub	sp, #12
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00e      	beq.n	8007308 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	6852      	ldr	r2, [r2, #4]
 80072f6:	b2d2      	uxtb	r2, r2
 80072f8:	4611      	mov	r1, r2
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	4798      	blx	r3
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007304:	2303      	movs	r3, #3
 8007306:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007308:	7bfb      	ldrb	r3, [r7, #15]
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007312:	b480      	push	{r7}
 8007314:	b083      	sub	sp, #12
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	460b      	mov	r3, r1
 800731c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800731e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007320:	4618      	mov	r0, r3
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	460b      	mov	r3, r1
 8007336:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007338:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800733a:	4618      	mov	r0, r3
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b086      	sub	sp, #24
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	460b      	mov	r3, r1
 8007350:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800735a:	2300      	movs	r3, #0
 800735c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	885b      	ldrh	r3, [r3, #2]
 8007362:	b29a      	uxth	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	b29b      	uxth	r3, r3
 800736a:	429a      	cmp	r2, r3
 800736c:	d920      	bls.n	80073b0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	b29b      	uxth	r3, r3
 8007374:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007376:	e013      	b.n	80073a0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007378:	f107 030a 	add.w	r3, r7, #10
 800737c:	4619      	mov	r1, r3
 800737e:	6978      	ldr	r0, [r7, #20]
 8007380:	f000 f81b 	bl	80073ba <USBD_GetNextDesc>
 8007384:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	785b      	ldrb	r3, [r3, #1]
 800738a:	2b05      	cmp	r3, #5
 800738c:	d108      	bne.n	80073a0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	789b      	ldrb	r3, [r3, #2]
 8007396:	78fa      	ldrb	r2, [r7, #3]
 8007398:	429a      	cmp	r2, r3
 800739a:	d008      	beq.n	80073ae <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800739c:	2300      	movs	r3, #0
 800739e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	885b      	ldrh	r3, [r3, #2]
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	897b      	ldrh	r3, [r7, #10]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d8e5      	bhi.n	8007378 <USBD_GetEpDesc+0x32>
 80073ac:	e000      	b.n	80073b0 <USBD_GetEpDesc+0x6a>
          break;
 80073ae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80073b0:	693b      	ldr	r3, [r7, #16]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3718      	adds	r7, #24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b085      	sub	sp, #20
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	881a      	ldrh	r2, [r3, #0]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	4413      	add	r3, r2
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	461a      	mov	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4413      	add	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80073e6:	68fb      	ldr	r3, [r7, #12]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3714      	adds	r7, #20
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b087      	sub	sp, #28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	3301      	adds	r3, #1
 800740a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007412:	8a3b      	ldrh	r3, [r7, #16]
 8007414:	021b      	lsls	r3, r3, #8
 8007416:	b21a      	sxth	r2, r3
 8007418:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800741c:	4313      	orrs	r3, r2
 800741e:	b21b      	sxth	r3, r3
 8007420:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007422:	89fb      	ldrh	r3, [r7, #14]
}
 8007424:	4618      	mov	r0, r3
 8007426:	371c      	adds	r7, #28
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007446:	2b40      	cmp	r3, #64	; 0x40
 8007448:	d005      	beq.n	8007456 <USBD_StdDevReq+0x26>
 800744a:	2b40      	cmp	r3, #64	; 0x40
 800744c:	d857      	bhi.n	80074fe <USBD_StdDevReq+0xce>
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00f      	beq.n	8007472 <USBD_StdDevReq+0x42>
 8007452:	2b20      	cmp	r3, #32
 8007454:	d153      	bne.n	80074fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	32ae      	adds	r2, #174	; 0xae
 8007460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	4798      	blx	r3
 800746c:	4603      	mov	r3, r0
 800746e:	73fb      	strb	r3, [r7, #15]
      break;
 8007470:	e04a      	b.n	8007508 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	785b      	ldrb	r3, [r3, #1]
 8007476:	2b09      	cmp	r3, #9
 8007478:	d83b      	bhi.n	80074f2 <USBD_StdDevReq+0xc2>
 800747a:	a201      	add	r2, pc, #4	; (adr r2, 8007480 <USBD_StdDevReq+0x50>)
 800747c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007480:	080074d5 	.word	0x080074d5
 8007484:	080074e9 	.word	0x080074e9
 8007488:	080074f3 	.word	0x080074f3
 800748c:	080074df 	.word	0x080074df
 8007490:	080074f3 	.word	0x080074f3
 8007494:	080074b3 	.word	0x080074b3
 8007498:	080074a9 	.word	0x080074a9
 800749c:	080074f3 	.word	0x080074f3
 80074a0:	080074cb 	.word	0x080074cb
 80074a4:	080074bd 	.word	0x080074bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80074a8:	6839      	ldr	r1, [r7, #0]
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fa3c 	bl	8007928 <USBD_GetDescriptor>
          break;
 80074b0:	e024      	b.n	80074fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80074b2:	6839      	ldr	r1, [r7, #0]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fba1 	bl	8007bfc <USBD_SetAddress>
          break;
 80074ba:	e01f      	b.n	80074fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80074bc:	6839      	ldr	r1, [r7, #0]
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fbe0 	bl	8007c84 <USBD_SetConfig>
 80074c4:	4603      	mov	r3, r0
 80074c6:	73fb      	strb	r3, [r7, #15]
          break;
 80074c8:	e018      	b.n	80074fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fc83 	bl	8007dd8 <USBD_GetConfig>
          break;
 80074d2:	e013      	b.n	80074fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80074d4:	6839      	ldr	r1, [r7, #0]
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fcb4 	bl	8007e44 <USBD_GetStatus>
          break;
 80074dc:	e00e      	b.n	80074fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80074de:	6839      	ldr	r1, [r7, #0]
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fce3 	bl	8007eac <USBD_SetFeature>
          break;
 80074e6:	e009      	b.n	80074fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80074e8:	6839      	ldr	r1, [r7, #0]
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fd07 	bl	8007efe <USBD_ClrFeature>
          break;
 80074f0:	e004      	b.n	80074fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80074f2:	6839      	ldr	r1, [r7, #0]
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fd5e 	bl	8007fb6 <USBD_CtlError>
          break;
 80074fa:	bf00      	nop
      }
      break;
 80074fc:	e004      	b.n	8007508 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80074fe:	6839      	ldr	r1, [r7, #0]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fd58 	bl	8007fb6 <USBD_CtlError>
      break;
 8007506:	bf00      	nop
  }

  return ret;
 8007508:	7bfb      	ldrb	r3, [r7, #15]
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop

08007514 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800751e:	2300      	movs	r3, #0
 8007520:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800752a:	2b40      	cmp	r3, #64	; 0x40
 800752c:	d005      	beq.n	800753a <USBD_StdItfReq+0x26>
 800752e:	2b40      	cmp	r3, #64	; 0x40
 8007530:	d852      	bhi.n	80075d8 <USBD_StdItfReq+0xc4>
 8007532:	2b00      	cmp	r3, #0
 8007534:	d001      	beq.n	800753a <USBD_StdItfReq+0x26>
 8007536:	2b20      	cmp	r3, #32
 8007538:	d14e      	bne.n	80075d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007540:	b2db      	uxtb	r3, r3
 8007542:	3b01      	subs	r3, #1
 8007544:	2b02      	cmp	r3, #2
 8007546:	d840      	bhi.n	80075ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	889b      	ldrh	r3, [r3, #4]
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b01      	cmp	r3, #1
 8007550:	d836      	bhi.n	80075c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	889b      	ldrh	r3, [r3, #4]
 8007556:	b2db      	uxtb	r3, r3
 8007558:	4619      	mov	r1, r3
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7ff fed9 	bl	8007312 <USBD_CoreFindIF>
 8007560:	4603      	mov	r3, r0
 8007562:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007564:	7bbb      	ldrb	r3, [r7, #14]
 8007566:	2bff      	cmp	r3, #255	; 0xff
 8007568:	d01d      	beq.n	80075a6 <USBD_StdItfReq+0x92>
 800756a:	7bbb      	ldrb	r3, [r7, #14]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d11a      	bne.n	80075a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007570:	7bba      	ldrb	r2, [r7, #14]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	32ae      	adds	r2, #174	; 0xae
 8007576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00f      	beq.n	80075a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007580:	7bba      	ldrb	r2, [r7, #14]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007588:	7bba      	ldrb	r2, [r7, #14]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	32ae      	adds	r2, #174	; 0xae
 800758e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	6839      	ldr	r1, [r7, #0]
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	4798      	blx	r3
 800759a:	4603      	mov	r3, r0
 800759c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800759e:	e004      	b.n	80075aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80075a0:	2303      	movs	r3, #3
 80075a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80075a4:	e001      	b.n	80075aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80075a6:	2303      	movs	r3, #3
 80075a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	88db      	ldrh	r3, [r3, #6]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d110      	bne.n	80075d4 <USBD_StdItfReq+0xc0>
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10d      	bne.n	80075d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fdc7 	bl	800814c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80075be:	e009      	b.n	80075d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fcf7 	bl	8007fb6 <USBD_CtlError>
          break;
 80075c8:	e004      	b.n	80075d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fcf2 	bl	8007fb6 <USBD_CtlError>
          break;
 80075d2:	e000      	b.n	80075d6 <USBD_StdItfReq+0xc2>
          break;
 80075d4:	bf00      	nop
      }
      break;
 80075d6:	e004      	b.n	80075e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fceb 	bl	8007fb6 <USBD_CtlError>
      break;
 80075e0:	bf00      	nop
  }

  return ret;
 80075e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	889b      	ldrh	r3, [r3, #4]
 80075fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007608:	2b40      	cmp	r3, #64	; 0x40
 800760a:	d007      	beq.n	800761c <USBD_StdEPReq+0x30>
 800760c:	2b40      	cmp	r3, #64	; 0x40
 800760e:	f200 817f 	bhi.w	8007910 <USBD_StdEPReq+0x324>
 8007612:	2b00      	cmp	r3, #0
 8007614:	d02a      	beq.n	800766c <USBD_StdEPReq+0x80>
 8007616:	2b20      	cmp	r3, #32
 8007618:	f040 817a 	bne.w	8007910 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800761c:	7bbb      	ldrb	r3, [r7, #14]
 800761e:	4619      	mov	r1, r3
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7ff fe83 	bl	800732c <USBD_CoreFindEP>
 8007626:	4603      	mov	r3, r0
 8007628:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800762a:	7b7b      	ldrb	r3, [r7, #13]
 800762c:	2bff      	cmp	r3, #255	; 0xff
 800762e:	f000 8174 	beq.w	800791a <USBD_StdEPReq+0x32e>
 8007632:	7b7b      	ldrb	r3, [r7, #13]
 8007634:	2b00      	cmp	r3, #0
 8007636:	f040 8170 	bne.w	800791a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800763a:	7b7a      	ldrb	r2, [r7, #13]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007642:	7b7a      	ldrb	r2, [r7, #13]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	32ae      	adds	r2, #174	; 0xae
 8007648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	2b00      	cmp	r3, #0
 8007650:	f000 8163 	beq.w	800791a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007654:	7b7a      	ldrb	r2, [r7, #13]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	32ae      	adds	r2, #174	; 0xae
 800765a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	4798      	blx	r3
 8007666:	4603      	mov	r3, r0
 8007668:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800766a:	e156      	b.n	800791a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	785b      	ldrb	r3, [r3, #1]
 8007670:	2b03      	cmp	r3, #3
 8007672:	d008      	beq.n	8007686 <USBD_StdEPReq+0x9a>
 8007674:	2b03      	cmp	r3, #3
 8007676:	f300 8145 	bgt.w	8007904 <USBD_StdEPReq+0x318>
 800767a:	2b00      	cmp	r3, #0
 800767c:	f000 809b 	beq.w	80077b6 <USBD_StdEPReq+0x1ca>
 8007680:	2b01      	cmp	r3, #1
 8007682:	d03c      	beq.n	80076fe <USBD_StdEPReq+0x112>
 8007684:	e13e      	b.n	8007904 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b02      	cmp	r3, #2
 8007690:	d002      	beq.n	8007698 <USBD_StdEPReq+0xac>
 8007692:	2b03      	cmp	r3, #3
 8007694:	d016      	beq.n	80076c4 <USBD_StdEPReq+0xd8>
 8007696:	e02c      	b.n	80076f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007698:	7bbb      	ldrb	r3, [r7, #14]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00d      	beq.n	80076ba <USBD_StdEPReq+0xce>
 800769e:	7bbb      	ldrb	r3, [r7, #14]
 80076a0:	2b80      	cmp	r3, #128	; 0x80
 80076a2:	d00a      	beq.n	80076ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076a4:	7bbb      	ldrb	r3, [r7, #14]
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f001 f963 	bl	8008974 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076ae:	2180      	movs	r1, #128	; 0x80
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f001 f95f 	bl	8008974 <USBD_LL_StallEP>
 80076b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076b8:	e020      	b.n	80076fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fc7a 	bl	8007fb6 <USBD_CtlError>
              break;
 80076c2:	e01b      	b.n	80076fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	885b      	ldrh	r3, [r3, #2]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10e      	bne.n	80076ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80076cc:	7bbb      	ldrb	r3, [r7, #14]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00b      	beq.n	80076ea <USBD_StdEPReq+0xfe>
 80076d2:	7bbb      	ldrb	r3, [r7, #14]
 80076d4:	2b80      	cmp	r3, #128	; 0x80
 80076d6:	d008      	beq.n	80076ea <USBD_StdEPReq+0xfe>
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	88db      	ldrh	r3, [r3, #6]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d104      	bne.n	80076ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80076e0:	7bbb      	ldrb	r3, [r7, #14]
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 f945 	bl	8008974 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fd2e 	bl	800814c <USBD_CtlSendStatus>

              break;
 80076f0:	e004      	b.n	80076fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80076f2:	6839      	ldr	r1, [r7, #0]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fc5e 	bl	8007fb6 <USBD_CtlError>
              break;
 80076fa:	bf00      	nop
          }
          break;
 80076fc:	e107      	b.n	800790e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b02      	cmp	r3, #2
 8007708:	d002      	beq.n	8007710 <USBD_StdEPReq+0x124>
 800770a:	2b03      	cmp	r3, #3
 800770c:	d016      	beq.n	800773c <USBD_StdEPReq+0x150>
 800770e:	e04b      	b.n	80077a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007710:	7bbb      	ldrb	r3, [r7, #14]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00d      	beq.n	8007732 <USBD_StdEPReq+0x146>
 8007716:	7bbb      	ldrb	r3, [r7, #14]
 8007718:	2b80      	cmp	r3, #128	; 0x80
 800771a:	d00a      	beq.n	8007732 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800771c:	7bbb      	ldrb	r3, [r7, #14]
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f001 f927 	bl	8008974 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007726:	2180      	movs	r1, #128	; 0x80
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f001 f923 	bl	8008974 <USBD_LL_StallEP>
 800772e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007730:	e040      	b.n	80077b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007732:	6839      	ldr	r1, [r7, #0]
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fc3e 	bl	8007fb6 <USBD_CtlError>
              break;
 800773a:	e03b      	b.n	80077b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	885b      	ldrh	r3, [r3, #2]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d136      	bne.n	80077b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007744:	7bbb      	ldrb	r3, [r7, #14]
 8007746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800774a:	2b00      	cmp	r3, #0
 800774c:	d004      	beq.n	8007758 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800774e:	7bbb      	ldrb	r3, [r7, #14]
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f001 f92d 	bl	80089b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fcf7 	bl	800814c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800775e:	7bbb      	ldrb	r3, [r7, #14]
 8007760:	4619      	mov	r1, r3
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7ff fde2 	bl	800732c <USBD_CoreFindEP>
 8007768:	4603      	mov	r3, r0
 800776a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800776c:	7b7b      	ldrb	r3, [r7, #13]
 800776e:	2bff      	cmp	r3, #255	; 0xff
 8007770:	d01f      	beq.n	80077b2 <USBD_StdEPReq+0x1c6>
 8007772:	7b7b      	ldrb	r3, [r7, #13]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d11c      	bne.n	80077b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007778:	7b7a      	ldrb	r2, [r7, #13]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007780:	7b7a      	ldrb	r2, [r7, #13]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	32ae      	adds	r2, #174	; 0xae
 8007786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d010      	beq.n	80077b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007790:	7b7a      	ldrb	r2, [r7, #13]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	32ae      	adds	r2, #174	; 0xae
 8007796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	4798      	blx	r3
 80077a2:	4603      	mov	r3, r0
 80077a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80077a6:	e004      	b.n	80077b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fc03 	bl	8007fb6 <USBD_CtlError>
              break;
 80077b0:	e000      	b.n	80077b4 <USBD_StdEPReq+0x1c8>
              break;
 80077b2:	bf00      	nop
          }
          break;
 80077b4:	e0ab      	b.n	800790e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d002      	beq.n	80077c8 <USBD_StdEPReq+0x1dc>
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d032      	beq.n	800782c <USBD_StdEPReq+0x240>
 80077c6:	e097      	b.n	80078f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077c8:	7bbb      	ldrb	r3, [r7, #14]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d007      	beq.n	80077de <USBD_StdEPReq+0x1f2>
 80077ce:	7bbb      	ldrb	r3, [r7, #14]
 80077d0:	2b80      	cmp	r3, #128	; 0x80
 80077d2:	d004      	beq.n	80077de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fbed 	bl	8007fb6 <USBD_CtlError>
                break;
 80077dc:	e091      	b.n	8007902 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	da0b      	bge.n	80077fe <USBD_StdEPReq+0x212>
 80077e6:	7bbb      	ldrb	r3, [r7, #14]
 80077e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077ec:	4613      	mov	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	4413      	add	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	3310      	adds	r3, #16
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	4413      	add	r3, r2
 80077fa:	3304      	adds	r3, #4
 80077fc:	e00b      	b.n	8007816 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077fe:	7bbb      	ldrb	r3, [r7, #14]
 8007800:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007804:	4613      	mov	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4413      	add	r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	4413      	add	r3, r2
 8007814:	3304      	adds	r3, #4
 8007816:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2200      	movs	r2, #0
 800781c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	2202      	movs	r2, #2
 8007822:	4619      	mov	r1, r3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fc37 	bl	8008098 <USBD_CtlSendData>
              break;
 800782a:	e06a      	b.n	8007902 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800782c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007830:	2b00      	cmp	r3, #0
 8007832:	da11      	bge.n	8007858 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007834:	7bbb      	ldrb	r3, [r7, #14]
 8007836:	f003 020f 	and.w	r2, r3, #15
 800783a:	6879      	ldr	r1, [r7, #4]
 800783c:	4613      	mov	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	440b      	add	r3, r1
 8007846:	3324      	adds	r3, #36	; 0x24
 8007848:	881b      	ldrh	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d117      	bne.n	800787e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fbb0 	bl	8007fb6 <USBD_CtlError>
                  break;
 8007856:	e054      	b.n	8007902 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007858:	7bbb      	ldrb	r3, [r7, #14]
 800785a:	f003 020f 	and.w	r2, r3, #15
 800785e:	6879      	ldr	r1, [r7, #4]
 8007860:	4613      	mov	r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4413      	add	r3, r2
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	440b      	add	r3, r1
 800786a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800786e:	881b      	ldrh	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d104      	bne.n	800787e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007874:	6839      	ldr	r1, [r7, #0]
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fb9d 	bl	8007fb6 <USBD_CtlError>
                  break;
 800787c:	e041      	b.n	8007902 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800787e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007882:	2b00      	cmp	r3, #0
 8007884:	da0b      	bge.n	800789e <USBD_StdEPReq+0x2b2>
 8007886:	7bbb      	ldrb	r3, [r7, #14]
 8007888:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800788c:	4613      	mov	r3, r2
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	4413      	add	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	3310      	adds	r3, #16
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	4413      	add	r3, r2
 800789a:	3304      	adds	r3, #4
 800789c:	e00b      	b.n	80078b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800789e:	7bbb      	ldrb	r3, [r7, #14]
 80078a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078a4:	4613      	mov	r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	4413      	add	r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	4413      	add	r3, r2
 80078b4:	3304      	adds	r3, #4
 80078b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80078b8:	7bbb      	ldrb	r3, [r7, #14]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d002      	beq.n	80078c4 <USBD_StdEPReq+0x2d8>
 80078be:	7bbb      	ldrb	r3, [r7, #14]
 80078c0:	2b80      	cmp	r3, #128	; 0x80
 80078c2:	d103      	bne.n	80078cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2200      	movs	r2, #0
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	e00e      	b.n	80078ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80078cc:	7bbb      	ldrb	r3, [r7, #14]
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f001 f88d 	bl	80089f0 <USBD_LL_IsStallEP>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d003      	beq.n	80078e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	2201      	movs	r2, #1
 80078e0:	601a      	str	r2, [r3, #0]
 80078e2:	e002      	b.n	80078ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	2200      	movs	r2, #0
 80078e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	2202      	movs	r2, #2
 80078ee:	4619      	mov	r1, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fbd1 	bl	8008098 <USBD_CtlSendData>
              break;
 80078f6:	e004      	b.n	8007902 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fb5b 	bl	8007fb6 <USBD_CtlError>
              break;
 8007900:	bf00      	nop
          }
          break;
 8007902:	e004      	b.n	800790e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fb55 	bl	8007fb6 <USBD_CtlError>
          break;
 800790c:	bf00      	nop
      }
      break;
 800790e:	e005      	b.n	800791c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fb4f 	bl	8007fb6 <USBD_CtlError>
      break;
 8007918:	e000      	b.n	800791c <USBD_StdEPReq+0x330>
      break;
 800791a:	bf00      	nop
  }

  return ret;
 800791c:	7bfb      	ldrb	r3, [r7, #15]
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
	...

08007928 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007932:	2300      	movs	r3, #0
 8007934:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007936:	2300      	movs	r3, #0
 8007938:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800793a:	2300      	movs	r3, #0
 800793c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	885b      	ldrh	r3, [r3, #2]
 8007942:	0a1b      	lsrs	r3, r3, #8
 8007944:	b29b      	uxth	r3, r3
 8007946:	3b01      	subs	r3, #1
 8007948:	2b06      	cmp	r3, #6
 800794a:	f200 8128 	bhi.w	8007b9e <USBD_GetDescriptor+0x276>
 800794e:	a201      	add	r2, pc, #4	; (adr r2, 8007954 <USBD_GetDescriptor+0x2c>)
 8007950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007954:	08007971 	.word	0x08007971
 8007958:	08007989 	.word	0x08007989
 800795c:	080079c9 	.word	0x080079c9
 8007960:	08007b9f 	.word	0x08007b9f
 8007964:	08007b9f 	.word	0x08007b9f
 8007968:	08007b3f 	.word	0x08007b3f
 800796c:	08007b6b 	.word	0x08007b6b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	7c12      	ldrb	r2, [r2, #16]
 800797c:	f107 0108 	add.w	r1, r7, #8
 8007980:	4610      	mov	r0, r2
 8007982:	4798      	blx	r3
 8007984:	60f8      	str	r0, [r7, #12]
      break;
 8007986:	e112      	b.n	8007bae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	7c1b      	ldrb	r3, [r3, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d10d      	bne.n	80079ac <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007998:	f107 0208 	add.w	r2, r7, #8
 800799c:	4610      	mov	r0, r2
 800799e:	4798      	blx	r3
 80079a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	3301      	adds	r3, #1
 80079a6:	2202      	movs	r2, #2
 80079a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80079aa:	e100      	b.n	8007bae <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b4:	f107 0208 	add.w	r2, r7, #8
 80079b8:	4610      	mov	r0, r2
 80079ba:	4798      	blx	r3
 80079bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	3301      	adds	r3, #1
 80079c2:	2202      	movs	r2, #2
 80079c4:	701a      	strb	r2, [r3, #0]
      break;
 80079c6:	e0f2      	b.n	8007bae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	885b      	ldrh	r3, [r3, #2]
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b05      	cmp	r3, #5
 80079d0:	f200 80ac 	bhi.w	8007b2c <USBD_GetDescriptor+0x204>
 80079d4:	a201      	add	r2, pc, #4	; (adr r2, 80079dc <USBD_GetDescriptor+0xb4>)
 80079d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079da:	bf00      	nop
 80079dc:	080079f5 	.word	0x080079f5
 80079e0:	08007a29 	.word	0x08007a29
 80079e4:	08007a5d 	.word	0x08007a5d
 80079e8:	08007a91 	.word	0x08007a91
 80079ec:	08007ac5 	.word	0x08007ac5
 80079f0:	08007af9 	.word	0x08007af9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00b      	beq.n	8007a18 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	7c12      	ldrb	r2, [r2, #16]
 8007a0c:	f107 0108 	add.w	r1, r7, #8
 8007a10:	4610      	mov	r0, r2
 8007a12:	4798      	blx	r3
 8007a14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a16:	e091      	b.n	8007b3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a18:	6839      	ldr	r1, [r7, #0]
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 facb 	bl	8007fb6 <USBD_CtlError>
            err++;
 8007a20:	7afb      	ldrb	r3, [r7, #11]
 8007a22:	3301      	adds	r3, #1
 8007a24:	72fb      	strb	r3, [r7, #11]
          break;
 8007a26:	e089      	b.n	8007b3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00b      	beq.n	8007a4c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	7c12      	ldrb	r2, [r2, #16]
 8007a40:	f107 0108 	add.w	r1, r7, #8
 8007a44:	4610      	mov	r0, r2
 8007a46:	4798      	blx	r3
 8007a48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a4a:	e077      	b.n	8007b3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fab1 	bl	8007fb6 <USBD_CtlError>
            err++;
 8007a54:	7afb      	ldrb	r3, [r7, #11]
 8007a56:	3301      	adds	r3, #1
 8007a58:	72fb      	strb	r3, [r7, #11]
          break;
 8007a5a:	e06f      	b.n	8007b3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00b      	beq.n	8007a80 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	7c12      	ldrb	r2, [r2, #16]
 8007a74:	f107 0108 	add.w	r1, r7, #8
 8007a78:	4610      	mov	r0, r2
 8007a7a:	4798      	blx	r3
 8007a7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a7e:	e05d      	b.n	8007b3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a80:	6839      	ldr	r1, [r7, #0]
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fa97 	bl	8007fb6 <USBD_CtlError>
            err++;
 8007a88:	7afb      	ldrb	r3, [r7, #11]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a8e:	e055      	b.n	8007b3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00b      	beq.n	8007ab4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	7c12      	ldrb	r2, [r2, #16]
 8007aa8:	f107 0108 	add.w	r1, r7, #8
 8007aac:	4610      	mov	r0, r2
 8007aae:	4798      	blx	r3
 8007ab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ab2:	e043      	b.n	8007b3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fa7d 	bl	8007fb6 <USBD_CtlError>
            err++;
 8007abc:	7afb      	ldrb	r3, [r7, #11]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ac2:	e03b      	b.n	8007b3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00b      	beq.n	8007ae8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ad6:	695b      	ldr	r3, [r3, #20]
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	7c12      	ldrb	r2, [r2, #16]
 8007adc:	f107 0108 	add.w	r1, r7, #8
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	4798      	blx	r3
 8007ae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ae6:	e029      	b.n	8007b3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ae8:	6839      	ldr	r1, [r7, #0]
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 fa63 	bl	8007fb6 <USBD_CtlError>
            err++;
 8007af0:	7afb      	ldrb	r3, [r7, #11]
 8007af2:	3301      	adds	r3, #1
 8007af4:	72fb      	strb	r3, [r7, #11]
          break;
 8007af6:	e021      	b.n	8007b3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00b      	beq.n	8007b1c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	7c12      	ldrb	r2, [r2, #16]
 8007b10:	f107 0108 	add.w	r1, r7, #8
 8007b14:	4610      	mov	r0, r2
 8007b16:	4798      	blx	r3
 8007b18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b1a:	e00f      	b.n	8007b3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 fa49 	bl	8007fb6 <USBD_CtlError>
            err++;
 8007b24:	7afb      	ldrb	r3, [r7, #11]
 8007b26:	3301      	adds	r3, #1
 8007b28:	72fb      	strb	r3, [r7, #11]
          break;
 8007b2a:	e007      	b.n	8007b3c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007b2c:	6839      	ldr	r1, [r7, #0]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fa41 	bl	8007fb6 <USBD_CtlError>
          err++;
 8007b34:	7afb      	ldrb	r3, [r7, #11]
 8007b36:	3301      	adds	r3, #1
 8007b38:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007b3a:	bf00      	nop
      }
      break;
 8007b3c:	e037      	b.n	8007bae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	7c1b      	ldrb	r3, [r3, #16]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d109      	bne.n	8007b5a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b4e:	f107 0208 	add.w	r2, r7, #8
 8007b52:	4610      	mov	r0, r2
 8007b54:	4798      	blx	r3
 8007b56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b58:	e029      	b.n	8007bae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fa2a 	bl	8007fb6 <USBD_CtlError>
        err++;
 8007b62:	7afb      	ldrb	r3, [r7, #11]
 8007b64:	3301      	adds	r3, #1
 8007b66:	72fb      	strb	r3, [r7, #11]
      break;
 8007b68:	e021      	b.n	8007bae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	7c1b      	ldrb	r3, [r3, #16]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10d      	bne.n	8007b8e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7a:	f107 0208 	add.w	r2, r7, #8
 8007b7e:	4610      	mov	r0, r2
 8007b80:	4798      	blx	r3
 8007b82:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	3301      	adds	r3, #1
 8007b88:	2207      	movs	r2, #7
 8007b8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b8c:	e00f      	b.n	8007bae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fa10 	bl	8007fb6 <USBD_CtlError>
        err++;
 8007b96:	7afb      	ldrb	r3, [r7, #11]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	72fb      	strb	r3, [r7, #11]
      break;
 8007b9c:	e007      	b.n	8007bae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fa08 	bl	8007fb6 <USBD_CtlError>
      err++;
 8007ba6:	7afb      	ldrb	r3, [r7, #11]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	72fb      	strb	r3, [r7, #11]
      break;
 8007bac:	bf00      	nop
  }

  if (err != 0U)
 8007bae:	7afb      	ldrb	r3, [r7, #11]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d11e      	bne.n	8007bf2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	88db      	ldrh	r3, [r3, #6]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d016      	beq.n	8007bea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007bbc:	893b      	ldrh	r3, [r7, #8]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00e      	beq.n	8007be0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	88da      	ldrh	r2, [r3, #6]
 8007bc6:	893b      	ldrh	r3, [r7, #8]
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	bf28      	it	cs
 8007bcc:	4613      	movcs	r3, r2
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007bd2:	893b      	ldrh	r3, [r7, #8]
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	68f9      	ldr	r1, [r7, #12]
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fa5d 	bl	8008098 <USBD_CtlSendData>
 8007bde:	e009      	b.n	8007bf4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f9e7 	bl	8007fb6 <USBD_CtlError>
 8007be8:	e004      	b.n	8007bf4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 faae 	bl	800814c <USBD_CtlSendStatus>
 8007bf0:	e000      	b.n	8007bf4 <USBD_GetDescriptor+0x2cc>
    return;
 8007bf2:	bf00      	nop
  }
}
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop

08007bfc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	889b      	ldrh	r3, [r3, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d131      	bne.n	8007c72 <USBD_SetAddress+0x76>
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	88db      	ldrh	r3, [r3, #6]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d12d      	bne.n	8007c72 <USBD_SetAddress+0x76>
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	885b      	ldrh	r3, [r3, #2]
 8007c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8007c1c:	d829      	bhi.n	8007c72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	885b      	ldrh	r3, [r3, #2]
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b03      	cmp	r3, #3
 8007c34:	d104      	bne.n	8007c40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007c36:	6839      	ldr	r1, [r7, #0]
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f9bc 	bl	8007fb6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c3e:	e01d      	b.n	8007c7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	7bfa      	ldrb	r2, [r7, #15]
 8007c44:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fefb 	bl	8008a48 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fa7a 	bl	800814c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c58:	7bfb      	ldrb	r3, [r7, #15]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d004      	beq.n	8007c68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2202      	movs	r2, #2
 8007c62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c66:	e009      	b.n	8007c7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c70:	e004      	b.n	8007c7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f99e 	bl	8007fb6 <USBD_CtlError>
  }
}
 8007c7a:	bf00      	nop
 8007c7c:	bf00      	nop
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	885b      	ldrh	r3, [r3, #2]
 8007c96:	b2da      	uxtb	r2, r3
 8007c98:	4b4e      	ldr	r3, [pc, #312]	; (8007dd4 <USBD_SetConfig+0x150>)
 8007c9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c9c:	4b4d      	ldr	r3, [pc, #308]	; (8007dd4 <USBD_SetConfig+0x150>)
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d905      	bls.n	8007cb0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f985 	bl	8007fb6 <USBD_CtlError>
    return USBD_FAIL;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e08c      	b.n	8007dca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d002      	beq.n	8007cc2 <USBD_SetConfig+0x3e>
 8007cbc:	2b03      	cmp	r3, #3
 8007cbe:	d029      	beq.n	8007d14 <USBD_SetConfig+0x90>
 8007cc0:	e075      	b.n	8007dae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007cc2:	4b44      	ldr	r3, [pc, #272]	; (8007dd4 <USBD_SetConfig+0x150>)
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d020      	beq.n	8007d0c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007cca:	4b42      	ldr	r3, [pc, #264]	; (8007dd4 <USBD_SetConfig+0x150>)
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007cd4:	4b3f      	ldr	r3, [pc, #252]	; (8007dd4 <USBD_SetConfig+0x150>)
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	4619      	mov	r1, r3
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f7fe ffe7 	bl	8006cae <USBD_SetClassConfig>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d008      	beq.n	8007cfc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007cea:	6839      	ldr	r1, [r7, #0]
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 f962 	bl	8007fb6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2202      	movs	r2, #2
 8007cf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007cfa:	e065      	b.n	8007dc8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fa25 	bl	800814c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2203      	movs	r2, #3
 8007d06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007d0a:	e05d      	b.n	8007dc8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fa1d 	bl	800814c <USBD_CtlSendStatus>
      break;
 8007d12:	e059      	b.n	8007dc8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007d14:	4b2f      	ldr	r3, [pc, #188]	; (8007dd4 <USBD_SetConfig+0x150>)
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d112      	bne.n	8007d42 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007d24:	4b2b      	ldr	r3, [pc, #172]	; (8007dd4 <USBD_SetConfig+0x150>)
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	461a      	mov	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d2e:	4b29      	ldr	r3, [pc, #164]	; (8007dd4 <USBD_SetConfig+0x150>)
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f7fe ffd6 	bl	8006ce6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fa06 	bl	800814c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d40:	e042      	b.n	8007dc8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007d42:	4b24      	ldr	r3, [pc, #144]	; (8007dd4 <USBD_SetConfig+0x150>)
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	461a      	mov	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d02a      	beq.n	8007da6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	4619      	mov	r1, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7fe ffc4 	bl	8006ce6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007d5e:	4b1d      	ldr	r3, [pc, #116]	; (8007dd4 <USBD_SetConfig+0x150>)
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	461a      	mov	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d68:	4b1a      	ldr	r3, [pc, #104]	; (8007dd4 <USBD_SetConfig+0x150>)
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f7fe ff9d 	bl	8006cae <USBD_SetClassConfig>
 8007d74:	4603      	mov	r3, r0
 8007d76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00f      	beq.n	8007d9e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007d7e:	6839      	ldr	r1, [r7, #0]
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 f918 	bl	8007fb6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f7fe ffa9 	bl	8006ce6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2202      	movs	r2, #2
 8007d98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007d9c:	e014      	b.n	8007dc8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f9d4 	bl	800814c <USBD_CtlSendStatus>
      break;
 8007da4:	e010      	b.n	8007dc8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f9d0 	bl	800814c <USBD_CtlSendStatus>
      break;
 8007dac:	e00c      	b.n	8007dc8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 f900 	bl	8007fb6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007db6:	4b07      	ldr	r3, [pc, #28]	; (8007dd4 <USBD_SetConfig+0x150>)
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f7fe ff92 	bl	8006ce6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	73fb      	strb	r3, [r7, #15]
      break;
 8007dc6:	bf00      	nop
  }

  return ret;
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	20009f04 	.word	0x20009f04

08007dd8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	88db      	ldrh	r3, [r3, #6]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d004      	beq.n	8007df4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f8e2 	bl	8007fb6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007df2:	e023      	b.n	8007e3c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	dc02      	bgt.n	8007e06 <USBD_GetConfig+0x2e>
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	dc03      	bgt.n	8007e0c <USBD_GetConfig+0x34>
 8007e04:	e015      	b.n	8007e32 <USBD_GetConfig+0x5a>
 8007e06:	2b03      	cmp	r3, #3
 8007e08:	d00b      	beq.n	8007e22 <USBD_GetConfig+0x4a>
 8007e0a:	e012      	b.n	8007e32 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	3308      	adds	r3, #8
 8007e16:	2201      	movs	r2, #1
 8007e18:	4619      	mov	r1, r3
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f93c 	bl	8008098 <USBD_CtlSendData>
        break;
 8007e20:	e00c      	b.n	8007e3c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	3304      	adds	r3, #4
 8007e26:	2201      	movs	r2, #1
 8007e28:	4619      	mov	r1, r3
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f934 	bl	8008098 <USBD_CtlSendData>
        break;
 8007e30:	e004      	b.n	8007e3c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007e32:	6839      	ldr	r1, [r7, #0]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f8be 	bl	8007fb6 <USBD_CtlError>
        break;
 8007e3a:	bf00      	nop
}
 8007e3c:	bf00      	nop
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	3b01      	subs	r3, #1
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d81e      	bhi.n	8007e9a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	88db      	ldrh	r3, [r3, #6]
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d004      	beq.n	8007e6e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007e64:	6839      	ldr	r1, [r7, #0]
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f8a5 	bl	8007fb6 <USBD_CtlError>
        break;
 8007e6c:	e01a      	b.n	8007ea4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2201      	movs	r2, #1
 8007e72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d005      	beq.n	8007e8a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	f043 0202 	orr.w	r2, r3, #2
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	330c      	adds	r3, #12
 8007e8e:	2202      	movs	r2, #2
 8007e90:	4619      	mov	r1, r3
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f900 	bl	8008098 <USBD_CtlSendData>
      break;
 8007e98:	e004      	b.n	8007ea4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007e9a:	6839      	ldr	r1, [r7, #0]
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f88a 	bl	8007fb6 <USBD_CtlError>
      break;
 8007ea2:	bf00      	nop
  }
}
 8007ea4:	bf00      	nop
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	885b      	ldrh	r3, [r3, #2]
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d107      	bne.n	8007ece <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f940 	bl	800814c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007ecc:	e013      	b.n	8007ef6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	885b      	ldrh	r3, [r3, #2]
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d10b      	bne.n	8007eee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	889b      	ldrh	r3, [r3, #4]
 8007eda:	0a1b      	lsrs	r3, r3, #8
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	b2da      	uxtb	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f930 	bl	800814c <USBD_CtlSendStatus>
}
 8007eec:	e003      	b.n	8007ef6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007eee:	6839      	ldr	r1, [r7, #0]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f860 	bl	8007fb6 <USBD_CtlError>
}
 8007ef6:	bf00      	nop
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b082      	sub	sp, #8
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
 8007f06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	3b01      	subs	r3, #1
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d80b      	bhi.n	8007f2e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	885b      	ldrh	r3, [r3, #2]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d10c      	bne.n	8007f38 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f910 	bl	800814c <USBD_CtlSendStatus>
      }
      break;
 8007f2c:	e004      	b.n	8007f38 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007f2e:	6839      	ldr	r1, [r7, #0]
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f840 	bl	8007fb6 <USBD_CtlError>
      break;
 8007f36:	e000      	b.n	8007f3a <USBD_ClrFeature+0x3c>
      break;
 8007f38:	bf00      	nop
  }
}
 8007f3a:	bf00      	nop
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b084      	sub	sp, #16
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	781a      	ldrb	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	781a      	ldrb	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f7ff fa41 	bl	80073f4 <SWAPBYTE>
 8007f72:	4603      	mov	r3, r0
 8007f74:	461a      	mov	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	3301      	adds	r3, #1
 8007f84:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f7ff fa34 	bl	80073f4 <SWAPBYTE>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	461a      	mov	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	3301      	adds	r3, #1
 8007f98:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f7ff fa27 	bl	80073f4 <SWAPBYTE>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	461a      	mov	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	80da      	strh	r2, [r3, #6]
}
 8007fae:	bf00      	nop
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b082      	sub	sp, #8
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fc0:	2180      	movs	r1, #128	; 0x80
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fcd6 	bl	8008974 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007fc8:	2100      	movs	r1, #0
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fcd2 	bl	8008974 <USBD_LL_StallEP>
}
 8007fd0:	bf00      	nop
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b086      	sub	sp, #24
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d036      	beq.n	800805c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007ff2:	6938      	ldr	r0, [r7, #16]
 8007ff4:	f000 f836 	bl	8008064 <USBD_GetLen>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	005b      	lsls	r3, r3, #1
 8008000:	b29a      	uxth	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008006:	7dfb      	ldrb	r3, [r7, #23]
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	4413      	add	r3, r2
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	7812      	ldrb	r2, [r2, #0]
 8008010:	701a      	strb	r2, [r3, #0]
  idx++;
 8008012:	7dfb      	ldrb	r3, [r7, #23]
 8008014:	3301      	adds	r3, #1
 8008016:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008018:	7dfb      	ldrb	r3, [r7, #23]
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	4413      	add	r3, r2
 800801e:	2203      	movs	r2, #3
 8008020:	701a      	strb	r2, [r3, #0]
  idx++;
 8008022:	7dfb      	ldrb	r3, [r7, #23]
 8008024:	3301      	adds	r3, #1
 8008026:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008028:	e013      	b.n	8008052 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800802a:	7dfb      	ldrb	r3, [r7, #23]
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	4413      	add	r3, r2
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	7812      	ldrb	r2, [r2, #0]
 8008034:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	3301      	adds	r3, #1
 800803a:	613b      	str	r3, [r7, #16]
    idx++;
 800803c:	7dfb      	ldrb	r3, [r7, #23]
 800803e:	3301      	adds	r3, #1
 8008040:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008042:	7dfb      	ldrb	r3, [r7, #23]
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	4413      	add	r3, r2
 8008048:	2200      	movs	r2, #0
 800804a:	701a      	strb	r2, [r3, #0]
    idx++;
 800804c:	7dfb      	ldrb	r3, [r7, #23]
 800804e:	3301      	adds	r3, #1
 8008050:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1e7      	bne.n	800802a <USBD_GetString+0x52>
 800805a:	e000      	b.n	800805e <USBD_GetString+0x86>
    return;
 800805c:	bf00      	nop
  }
}
 800805e:	3718      	adds	r7, #24
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800806c:	2300      	movs	r3, #0
 800806e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008074:	e005      	b.n	8008082 <USBD_GetLen+0x1e>
  {
    len++;
 8008076:	7bfb      	ldrb	r3, [r7, #15]
 8008078:	3301      	adds	r3, #1
 800807a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	3301      	adds	r3, #1
 8008080:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1f5      	bne.n	8008076 <USBD_GetLen+0x12>
  }

  return len;
 800808a:	7bfb      	ldrb	r3, [r7, #15]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2202      	movs	r2, #2
 80080a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	2100      	movs	r1, #0
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f000 fce1 	bl	8008a86 <USBD_LL_Transmit>

  return USBD_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b084      	sub	sp, #16
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	60f8      	str	r0, [r7, #12]
 80080d6:	60b9      	str	r1, [r7, #8]
 80080d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	2100      	movs	r1, #0
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f000 fcd0 	bl	8008a86 <USBD_LL_Transmit>

  return USBD_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2203      	movs	r2, #3
 8008100:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	2100      	movs	r1, #0
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f000 fcd4 	bl	8008ac8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b084      	sub	sp, #16
 800812e:	af00      	add	r7, sp, #0
 8008130:	60f8      	str	r0, [r7, #12]
 8008132:	60b9      	str	r1, [r7, #8]
 8008134:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	68ba      	ldr	r2, [r7, #8]
 800813a:	2100      	movs	r1, #0
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f000 fcc3 	bl	8008ac8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2204      	movs	r2, #4
 8008158:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800815c:	2300      	movs	r3, #0
 800815e:	2200      	movs	r2, #0
 8008160:	2100      	movs	r1, #0
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fc8f 	bl	8008a86 <USBD_LL_Transmit>

  return USBD_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b082      	sub	sp, #8
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2205      	movs	r2, #5
 800817e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008182:	2300      	movs	r3, #0
 8008184:	2200      	movs	r2, #0
 8008186:	2100      	movs	r1, #0
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fc9d 	bl	8008ac8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800819c:	2200      	movs	r2, #0
 800819e:	4912      	ldr	r1, [pc, #72]	; (80081e8 <MX_USB_DEVICE_Init+0x50>)
 80081a0:	4812      	ldr	r0, [pc, #72]	; (80081ec <MX_USB_DEVICE_Init+0x54>)
 80081a2:	f7fe fd07 	bl	8006bb4 <USBD_Init>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d001      	beq.n	80081b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80081ac:	f7f8 fcd8 	bl	8000b60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80081b0:	490f      	ldr	r1, [pc, #60]	; (80081f0 <MX_USB_DEVICE_Init+0x58>)
 80081b2:	480e      	ldr	r0, [pc, #56]	; (80081ec <MX_USB_DEVICE_Init+0x54>)
 80081b4:	f7fe fd2e 	bl	8006c14 <USBD_RegisterClass>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d001      	beq.n	80081c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80081be:	f7f8 fccf 	bl	8000b60 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80081c2:	490c      	ldr	r1, [pc, #48]	; (80081f4 <MX_USB_DEVICE_Init+0x5c>)
 80081c4:	4809      	ldr	r0, [pc, #36]	; (80081ec <MX_USB_DEVICE_Init+0x54>)
 80081c6:	f7fe fc1f 	bl	8006a08 <USBD_CDC_RegisterInterface>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d001      	beq.n	80081d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80081d0:	f7f8 fcc6 	bl	8000b60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80081d4:	4805      	ldr	r0, [pc, #20]	; (80081ec <MX_USB_DEVICE_Init+0x54>)
 80081d6:	f7fe fd53 	bl	8006c80 <USBD_Start>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d001      	beq.n	80081e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80081e0:	f7f8 fcbe 	bl	8000b60 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80081e4:	bf00      	nop
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	200000bc 	.word	0x200000bc
 80081ec:	20009f08 	.word	0x20009f08
 80081f0:	20000028 	.word	0x20000028
 80081f4:	200000a8 	.word	0x200000a8

080081f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80081fc:	2200      	movs	r2, #0
 80081fe:	4905      	ldr	r1, [pc, #20]	; (8008214 <CDC_Init_FS+0x1c>)
 8008200:	4805      	ldr	r0, [pc, #20]	; (8008218 <CDC_Init_FS+0x20>)
 8008202:	f7fe fc1b 	bl	8006a3c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008206:	4905      	ldr	r1, [pc, #20]	; (800821c <CDC_Init_FS+0x24>)
 8008208:	4803      	ldr	r0, [pc, #12]	; (8008218 <CDC_Init_FS+0x20>)
 800820a:	f7fe fc39 	bl	8006a80 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800820e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008210:	4618      	mov	r0, r3
 8008212:	bd80      	pop	{r7, pc}
 8008214:	2000a5e4 	.word	0x2000a5e4
 8008218:	20009f08 	.word	0x20009f08
 800821c:	2000a1e4 	.word	0x2000a1e4

08008220 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008220:	b480      	push	{r7}
 8008222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008224:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008226:	4618      	mov	r0, r3
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	4603      	mov	r3, r0
 8008238:	6039      	str	r1, [r7, #0]
 800823a:	71fb      	strb	r3, [r7, #7]
 800823c:	4613      	mov	r3, r2
 800823e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008240:	79fb      	ldrb	r3, [r7, #7]
 8008242:	2b23      	cmp	r3, #35	; 0x23
 8008244:	d84a      	bhi.n	80082dc <CDC_Control_FS+0xac>
 8008246:	a201      	add	r2, pc, #4	; (adr r2, 800824c <CDC_Control_FS+0x1c>)
 8008248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824c:	080082dd 	.word	0x080082dd
 8008250:	080082dd 	.word	0x080082dd
 8008254:	080082dd 	.word	0x080082dd
 8008258:	080082dd 	.word	0x080082dd
 800825c:	080082dd 	.word	0x080082dd
 8008260:	080082dd 	.word	0x080082dd
 8008264:	080082dd 	.word	0x080082dd
 8008268:	080082dd 	.word	0x080082dd
 800826c:	080082dd 	.word	0x080082dd
 8008270:	080082dd 	.word	0x080082dd
 8008274:	080082dd 	.word	0x080082dd
 8008278:	080082dd 	.word	0x080082dd
 800827c:	080082dd 	.word	0x080082dd
 8008280:	080082dd 	.word	0x080082dd
 8008284:	080082dd 	.word	0x080082dd
 8008288:	080082dd 	.word	0x080082dd
 800828c:	080082dd 	.word	0x080082dd
 8008290:	080082dd 	.word	0x080082dd
 8008294:	080082dd 	.word	0x080082dd
 8008298:	080082dd 	.word	0x080082dd
 800829c:	080082dd 	.word	0x080082dd
 80082a0:	080082dd 	.word	0x080082dd
 80082a4:	080082dd 	.word	0x080082dd
 80082a8:	080082dd 	.word	0x080082dd
 80082ac:	080082dd 	.word	0x080082dd
 80082b0:	080082dd 	.word	0x080082dd
 80082b4:	080082dd 	.word	0x080082dd
 80082b8:	080082dd 	.word	0x080082dd
 80082bc:	080082dd 	.word	0x080082dd
 80082c0:	080082dd 	.word	0x080082dd
 80082c4:	080082dd 	.word	0x080082dd
 80082c8:	080082dd 	.word	0x080082dd
 80082cc:	080082dd 	.word	0x080082dd
 80082d0:	080082dd 	.word	0x080082dd
 80082d4:	080082dd 	.word	0x080082dd
 80082d8:	080082dd 	.word	0x080082dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80082dc:	bf00      	nop
  }

  return (USBD_OK);
 80082de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80082f6:	6879      	ldr	r1, [r7, #4]
 80082f8:	4805      	ldr	r0, [pc, #20]	; (8008310 <CDC_Receive_FS+0x24>)
 80082fa:	f7fe fbc1 	bl	8006a80 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80082fe:	4804      	ldr	r0, [pc, #16]	; (8008310 <CDC_Receive_FS+0x24>)
 8008300:	f7fe fc22 	bl	8006b48 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008304:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	20009f08 	.word	0x20009f08

08008314 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	460b      	mov	r3, r1
 800831e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008324:	4b0d      	ldr	r3, [pc, #52]	; (800835c <CDC_Transmit_FS+0x48>)
 8008326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800832a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008336:	2301      	movs	r3, #1
 8008338:	e00b      	b.n	8008352 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800833a:	887b      	ldrh	r3, [r7, #2]
 800833c:	461a      	mov	r2, r3
 800833e:	6879      	ldr	r1, [r7, #4]
 8008340:	4806      	ldr	r0, [pc, #24]	; (800835c <CDC_Transmit_FS+0x48>)
 8008342:	f7fe fb7b 	bl	8006a3c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008346:	4805      	ldr	r0, [pc, #20]	; (800835c <CDC_Transmit_FS+0x48>)
 8008348:	f7fe fbb8 	bl	8006abc <USBD_CDC_TransmitPacket>
 800834c:	4603      	mov	r3, r0
 800834e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008350:	7bfb      	ldrb	r3, [r7, #15]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	20009f08 	.word	0x20009f08

08008360 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008360:	b480      	push	{r7}
 8008362:	b087      	sub	sp, #28
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	4613      	mov	r3, r2
 800836c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008372:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008376:	4618      	mov	r0, r3
 8008378:	371c      	adds	r7, #28
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
	...

08008384 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	4603      	mov	r3, r0
 800838c:	6039      	str	r1, [r7, #0]
 800838e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	2212      	movs	r2, #18
 8008394:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008396:	4b03      	ldr	r3, [pc, #12]	; (80083a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008398:	4618      	mov	r0, r3
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	200000d8 	.word	0x200000d8

080083a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	4603      	mov	r3, r0
 80083b0:	6039      	str	r1, [r7, #0]
 80083b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	2204      	movs	r2, #4
 80083b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80083ba:	4b03      	ldr	r3, [pc, #12]	; (80083c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80083bc:	4618      	mov	r0, r3
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr
 80083c8:	200000ec 	.word	0x200000ec

080083cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	4603      	mov	r3, r0
 80083d4:	6039      	str	r1, [r7, #0]
 80083d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083d8:	79fb      	ldrb	r3, [r7, #7]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d105      	bne.n	80083ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083de:	683a      	ldr	r2, [r7, #0]
 80083e0:	4907      	ldr	r1, [pc, #28]	; (8008400 <USBD_FS_ProductStrDescriptor+0x34>)
 80083e2:	4808      	ldr	r0, [pc, #32]	; (8008404 <USBD_FS_ProductStrDescriptor+0x38>)
 80083e4:	f7ff fdf8 	bl	8007fd8 <USBD_GetString>
 80083e8:	e004      	b.n	80083f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083ea:	683a      	ldr	r2, [r7, #0]
 80083ec:	4904      	ldr	r1, [pc, #16]	; (8008400 <USBD_FS_ProductStrDescriptor+0x34>)
 80083ee:	4805      	ldr	r0, [pc, #20]	; (8008404 <USBD_FS_ProductStrDescriptor+0x38>)
 80083f0:	f7ff fdf2 	bl	8007fd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083f4:	4b02      	ldr	r3, [pc, #8]	; (8008400 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3708      	adds	r7, #8
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	2000a9e4 	.word	0x2000a9e4
 8008404:	08009530 	.word	0x08009530

08008408 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	4603      	mov	r3, r0
 8008410:	6039      	str	r1, [r7, #0]
 8008412:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008414:	683a      	ldr	r2, [r7, #0]
 8008416:	4904      	ldr	r1, [pc, #16]	; (8008428 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008418:	4804      	ldr	r0, [pc, #16]	; (800842c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800841a:	f7ff fddd 	bl	8007fd8 <USBD_GetString>
  return USBD_StrDesc;
 800841e:	4b02      	ldr	r3, [pc, #8]	; (8008428 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008420:	4618      	mov	r0, r3
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	2000a9e4 	.word	0x2000a9e4
 800842c:	08009548 	.word	0x08009548

08008430 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	4603      	mov	r3, r0
 8008438:	6039      	str	r1, [r7, #0]
 800843a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	221a      	movs	r2, #26
 8008440:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008442:	f000 f843 	bl	80084cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008446:	4b02      	ldr	r3, [pc, #8]	; (8008450 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008448:	4618      	mov	r0, r3
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	200000f0 	.word	0x200000f0

08008454 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	4603      	mov	r3, r0
 800845c:	6039      	str	r1, [r7, #0]
 800845e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008460:	79fb      	ldrb	r3, [r7, #7]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d105      	bne.n	8008472 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	4907      	ldr	r1, [pc, #28]	; (8008488 <USBD_FS_ConfigStrDescriptor+0x34>)
 800846a:	4808      	ldr	r0, [pc, #32]	; (800848c <USBD_FS_ConfigStrDescriptor+0x38>)
 800846c:	f7ff fdb4 	bl	8007fd8 <USBD_GetString>
 8008470:	e004      	b.n	800847c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	4904      	ldr	r1, [pc, #16]	; (8008488 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008476:	4805      	ldr	r0, [pc, #20]	; (800848c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008478:	f7ff fdae 	bl	8007fd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800847c:	4b02      	ldr	r3, [pc, #8]	; (8008488 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800847e:	4618      	mov	r0, r3
 8008480:	3708      	adds	r7, #8
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	2000a9e4 	.word	0x2000a9e4
 800848c:	0800955c 	.word	0x0800955c

08008490 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	4603      	mov	r3, r0
 8008498:	6039      	str	r1, [r7, #0]
 800849a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800849c:	79fb      	ldrb	r3, [r7, #7]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d105      	bne.n	80084ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	4907      	ldr	r1, [pc, #28]	; (80084c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084a6:	4808      	ldr	r0, [pc, #32]	; (80084c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084a8:	f7ff fd96 	bl	8007fd8 <USBD_GetString>
 80084ac:	e004      	b.n	80084b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	4904      	ldr	r1, [pc, #16]	; (80084c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084b2:	4805      	ldr	r0, [pc, #20]	; (80084c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084b4:	f7ff fd90 	bl	8007fd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084b8:	4b02      	ldr	r3, [pc, #8]	; (80084c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3708      	adds	r7, #8
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	2000a9e4 	.word	0x2000a9e4
 80084c8:	08009568 	.word	0x08009568

080084cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80084d2:	4b0f      	ldr	r3, [pc, #60]	; (8008510 <Get_SerialNum+0x44>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80084d8:	4b0e      	ldr	r3, [pc, #56]	; (8008514 <Get_SerialNum+0x48>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80084de:	4b0e      	ldr	r3, [pc, #56]	; (8008518 <Get_SerialNum+0x4c>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4413      	add	r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d009      	beq.n	8008506 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80084f2:	2208      	movs	r2, #8
 80084f4:	4909      	ldr	r1, [pc, #36]	; (800851c <Get_SerialNum+0x50>)
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f000 f814 	bl	8008524 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80084fc:	2204      	movs	r2, #4
 80084fe:	4908      	ldr	r1, [pc, #32]	; (8008520 <Get_SerialNum+0x54>)
 8008500:	68b8      	ldr	r0, [r7, #8]
 8008502:	f000 f80f 	bl	8008524 <IntToUnicode>
  }
}
 8008506:	bf00      	nop
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	1fff7a10 	.word	0x1fff7a10
 8008514:	1fff7a14 	.word	0x1fff7a14
 8008518:	1fff7a18 	.word	0x1fff7a18
 800851c:	200000f2 	.word	0x200000f2
 8008520:	20000102 	.word	0x20000102

08008524 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008524:	b480      	push	{r7}
 8008526:	b087      	sub	sp, #28
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	4613      	mov	r3, r2
 8008530:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008532:	2300      	movs	r3, #0
 8008534:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008536:	2300      	movs	r3, #0
 8008538:	75fb      	strb	r3, [r7, #23]
 800853a:	e027      	b.n	800858c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	0f1b      	lsrs	r3, r3, #28
 8008540:	2b09      	cmp	r3, #9
 8008542:	d80b      	bhi.n	800855c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	0f1b      	lsrs	r3, r3, #28
 8008548:	b2da      	uxtb	r2, r3
 800854a:	7dfb      	ldrb	r3, [r7, #23]
 800854c:	005b      	lsls	r3, r3, #1
 800854e:	4619      	mov	r1, r3
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	440b      	add	r3, r1
 8008554:	3230      	adds	r2, #48	; 0x30
 8008556:	b2d2      	uxtb	r2, r2
 8008558:	701a      	strb	r2, [r3, #0]
 800855a:	e00a      	b.n	8008572 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	0f1b      	lsrs	r3, r3, #28
 8008560:	b2da      	uxtb	r2, r3
 8008562:	7dfb      	ldrb	r3, [r7, #23]
 8008564:	005b      	lsls	r3, r3, #1
 8008566:	4619      	mov	r1, r3
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	440b      	add	r3, r1
 800856c:	3237      	adds	r2, #55	; 0x37
 800856e:	b2d2      	uxtb	r2, r2
 8008570:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	011b      	lsls	r3, r3, #4
 8008576:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008578:	7dfb      	ldrb	r3, [r7, #23]
 800857a:	005b      	lsls	r3, r3, #1
 800857c:	3301      	adds	r3, #1
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	4413      	add	r3, r2
 8008582:	2200      	movs	r2, #0
 8008584:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008586:	7dfb      	ldrb	r3, [r7, #23]
 8008588:	3301      	adds	r3, #1
 800858a:	75fb      	strb	r3, [r7, #23]
 800858c:	7dfa      	ldrb	r2, [r7, #23]
 800858e:	79fb      	ldrb	r3, [r7, #7]
 8008590:	429a      	cmp	r2, r3
 8008592:	d3d3      	bcc.n	800853c <IntToUnicode+0x18>
  }
}
 8008594:	bf00      	nop
 8008596:	bf00      	nop
 8008598:	371c      	adds	r7, #28
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
	...

080085a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b08a      	sub	sp, #40	; 0x28
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085ac:	f107 0314 	add.w	r3, r7, #20
 80085b0:	2200      	movs	r2, #0
 80085b2:	601a      	str	r2, [r3, #0]
 80085b4:	605a      	str	r2, [r3, #4]
 80085b6:	609a      	str	r2, [r3, #8]
 80085b8:	60da      	str	r2, [r3, #12]
 80085ba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085c4:	d13a      	bne.n	800863c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085c6:	2300      	movs	r3, #0
 80085c8:	613b      	str	r3, [r7, #16]
 80085ca:	4b1e      	ldr	r3, [pc, #120]	; (8008644 <HAL_PCD_MspInit+0xa0>)
 80085cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ce:	4a1d      	ldr	r2, [pc, #116]	; (8008644 <HAL_PCD_MspInit+0xa0>)
 80085d0:	f043 0301 	orr.w	r3, r3, #1
 80085d4:	6313      	str	r3, [r2, #48]	; 0x30
 80085d6:	4b1b      	ldr	r3, [pc, #108]	; (8008644 <HAL_PCD_MspInit+0xa0>)
 80085d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085da:	f003 0301 	and.w	r3, r3, #1
 80085de:	613b      	str	r3, [r7, #16]
 80085e0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80085e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80085e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085e8:	2302      	movs	r3, #2
 80085ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ec:	2300      	movs	r3, #0
 80085ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085f0:	2303      	movs	r3, #3
 80085f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80085f4:	230a      	movs	r3, #10
 80085f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085f8:	f107 0314 	add.w	r3, r7, #20
 80085fc:	4619      	mov	r1, r3
 80085fe:	4812      	ldr	r0, [pc, #72]	; (8008648 <HAL_PCD_MspInit+0xa4>)
 8008600:	f7f9 fe70 	bl	80022e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008604:	4b0f      	ldr	r3, [pc, #60]	; (8008644 <HAL_PCD_MspInit+0xa0>)
 8008606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008608:	4a0e      	ldr	r2, [pc, #56]	; (8008644 <HAL_PCD_MspInit+0xa0>)
 800860a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800860e:	6353      	str	r3, [r2, #52]	; 0x34
 8008610:	2300      	movs	r3, #0
 8008612:	60fb      	str	r3, [r7, #12]
 8008614:	4b0b      	ldr	r3, [pc, #44]	; (8008644 <HAL_PCD_MspInit+0xa0>)
 8008616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008618:	4a0a      	ldr	r2, [pc, #40]	; (8008644 <HAL_PCD_MspInit+0xa0>)
 800861a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800861e:	6453      	str	r3, [r2, #68]	; 0x44
 8008620:	4b08      	ldr	r3, [pc, #32]	; (8008644 <HAL_PCD_MspInit+0xa0>)
 8008622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008628:	60fb      	str	r3, [r7, #12]
 800862a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800862c:	2200      	movs	r2, #0
 800862e:	2100      	movs	r1, #0
 8008630:	2043      	movs	r0, #67	; 0x43
 8008632:	f7f9 fab0 	bl	8001b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008636:	2043      	movs	r0, #67	; 0x43
 8008638:	f7f9 fac9 	bl	8001bce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800863c:	bf00      	nop
 800863e:	3728      	adds	r7, #40	; 0x28
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	40023800 	.word	0x40023800
 8008648:	40020000 	.word	0x40020000

0800864c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008660:	4619      	mov	r1, r3
 8008662:	4610      	mov	r0, r2
 8008664:	f7fe fb59 	bl	8006d1a <USBD_LL_SetupStage>
}
 8008668:	bf00      	nop
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	460b      	mov	r3, r1
 800867a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008682:	78fa      	ldrb	r2, [r7, #3]
 8008684:	6879      	ldr	r1, [r7, #4]
 8008686:	4613      	mov	r3, r2
 8008688:	00db      	lsls	r3, r3, #3
 800868a:	4413      	add	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	440b      	add	r3, r1
 8008690:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	78fb      	ldrb	r3, [r7, #3]
 8008698:	4619      	mov	r1, r3
 800869a:	f7fe fb93 	bl	8006dc4 <USBD_LL_DataOutStage>
}
 800869e:	bf00      	nop
 80086a0:	3708      	adds	r7, #8
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b082      	sub	sp, #8
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
 80086ae:	460b      	mov	r3, r1
 80086b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80086b8:	78fa      	ldrb	r2, [r7, #3]
 80086ba:	6879      	ldr	r1, [r7, #4]
 80086bc:	4613      	mov	r3, r2
 80086be:	00db      	lsls	r3, r3, #3
 80086c0:	4413      	add	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	440b      	add	r3, r1
 80086c6:	334c      	adds	r3, #76	; 0x4c
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	78fb      	ldrb	r3, [r7, #3]
 80086cc:	4619      	mov	r1, r3
 80086ce:	f7fe fc2c 	bl	8006f2a <USBD_LL_DataInStage>
}
 80086d2:	bf00      	nop
 80086d4:	3708      	adds	r7, #8
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b082      	sub	sp, #8
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fe fd60 	bl	80071ae <USBD_LL_SOF>
}
 80086ee:	bf00      	nop
 80086f0:	3708      	adds	r7, #8
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b084      	sub	sp, #16
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80086fe:	2301      	movs	r3, #1
 8008700:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	2b02      	cmp	r3, #2
 8008708:	d001      	beq.n	800870e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800870a:	f7f8 fa29 	bl	8000b60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008714:	7bfa      	ldrb	r2, [r7, #15]
 8008716:	4611      	mov	r1, r2
 8008718:	4618      	mov	r0, r3
 800871a:	f7fe fd0a 	bl	8007132 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008724:	4618      	mov	r0, r3
 8008726:	f7fe fcb2 	bl	800708e <USBD_LL_Reset>
}
 800872a:	bf00      	nop
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
	...

08008734 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008742:	4618      	mov	r0, r3
 8008744:	f7fe fd05 	bl	8007152 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	6812      	ldr	r2, [r2, #0]
 8008756:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800875a:	f043 0301 	orr.w	r3, r3, #1
 800875e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a1b      	ldr	r3, [r3, #32]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d005      	beq.n	8008774 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008768:	4b04      	ldr	r3, [pc, #16]	; (800877c <HAL_PCD_SuspendCallback+0x48>)
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	4a03      	ldr	r2, [pc, #12]	; (800877c <HAL_PCD_SuspendCallback+0x48>)
 800876e:	f043 0306 	orr.w	r3, r3, #6
 8008772:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008774:	bf00      	nop
 8008776:	3708      	adds	r7, #8
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	e000ed00 	.word	0xe000ed00

08008780 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800878e:	4618      	mov	r0, r3
 8008790:	f7fe fcf5 	bl	800717e <USBD_LL_Resume>
}
 8008794:	bf00      	nop
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	460b      	mov	r3, r1
 80087a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087ae:	78fa      	ldrb	r2, [r7, #3]
 80087b0:	4611      	mov	r1, r2
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7fe fd4d 	bl	8007252 <USBD_LL_IsoOUTIncomplete>
}
 80087b8:	bf00      	nop
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	460b      	mov	r3, r1
 80087ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087d2:	78fa      	ldrb	r2, [r7, #3]
 80087d4:	4611      	mov	r1, r2
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7fe fd09 	bl	80071ee <USBD_LL_IsoINIncomplete>
}
 80087dc:	bf00      	nop
 80087de:	3708      	adds	r7, #8
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7fe fd5f 	bl	80072b6 <USBD_LL_DevConnected>
}
 80087f8:	bf00      	nop
 80087fa:	3708      	adds	r7, #8
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800880e:	4618      	mov	r0, r3
 8008810:	f7fe fd5c 	bl	80072cc <USBD_LL_DevDisconnected>
}
 8008814:	bf00      	nop
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d13c      	bne.n	80088a6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800882c:	4a20      	ldr	r2, [pc, #128]	; (80088b0 <USBD_LL_Init+0x94>)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a1e      	ldr	r2, [pc, #120]	; (80088b0 <USBD_LL_Init+0x94>)
 8008838:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800883c:	4b1c      	ldr	r3, [pc, #112]	; (80088b0 <USBD_LL_Init+0x94>)
 800883e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008842:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008844:	4b1a      	ldr	r3, [pc, #104]	; (80088b0 <USBD_LL_Init+0x94>)
 8008846:	2204      	movs	r2, #4
 8008848:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800884a:	4b19      	ldr	r3, [pc, #100]	; (80088b0 <USBD_LL_Init+0x94>)
 800884c:	2202      	movs	r2, #2
 800884e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008850:	4b17      	ldr	r3, [pc, #92]	; (80088b0 <USBD_LL_Init+0x94>)
 8008852:	2200      	movs	r2, #0
 8008854:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008856:	4b16      	ldr	r3, [pc, #88]	; (80088b0 <USBD_LL_Init+0x94>)
 8008858:	2202      	movs	r2, #2
 800885a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800885c:	4b14      	ldr	r3, [pc, #80]	; (80088b0 <USBD_LL_Init+0x94>)
 800885e:	2200      	movs	r2, #0
 8008860:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008862:	4b13      	ldr	r3, [pc, #76]	; (80088b0 <USBD_LL_Init+0x94>)
 8008864:	2200      	movs	r2, #0
 8008866:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008868:	4b11      	ldr	r3, [pc, #68]	; (80088b0 <USBD_LL_Init+0x94>)
 800886a:	2200      	movs	r2, #0
 800886c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800886e:	4b10      	ldr	r3, [pc, #64]	; (80088b0 <USBD_LL_Init+0x94>)
 8008870:	2200      	movs	r2, #0
 8008872:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008874:	4b0e      	ldr	r3, [pc, #56]	; (80088b0 <USBD_LL_Init+0x94>)
 8008876:	2200      	movs	r2, #0
 8008878:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800887a:	480d      	ldr	r0, [pc, #52]	; (80088b0 <USBD_LL_Init+0x94>)
 800887c:	f7f9 fecf 	bl	800261e <HAL_PCD_Init>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d001      	beq.n	800888a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008886:	f7f8 f96b 	bl	8000b60 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800888a:	2180      	movs	r1, #128	; 0x80
 800888c:	4808      	ldr	r0, [pc, #32]	; (80088b0 <USBD_LL_Init+0x94>)
 800888e:	f7fb f926 	bl	8003ade <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008892:	2240      	movs	r2, #64	; 0x40
 8008894:	2100      	movs	r1, #0
 8008896:	4806      	ldr	r0, [pc, #24]	; (80088b0 <USBD_LL_Init+0x94>)
 8008898:	f7fb f8da 	bl	8003a50 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800889c:	2280      	movs	r2, #128	; 0x80
 800889e:	2101      	movs	r1, #1
 80088a0:	4803      	ldr	r0, [pc, #12]	; (80088b0 <USBD_LL_Init+0x94>)
 80088a2:	f7fb f8d5 	bl	8003a50 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	2000abe4 	.word	0x2000abe4

080088b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088bc:	2300      	movs	r3, #0
 80088be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7f9 ffc4 	bl	8002858 <HAL_PCD_Start>
 80088d0:	4603      	mov	r3, r0
 80088d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088d4:	7bfb      	ldrb	r3, [r7, #15]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 f942 	bl	8008b60 <USBD_Get_USB_Status>
 80088dc:	4603      	mov	r3, r0
 80088de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b084      	sub	sp, #16
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	4608      	mov	r0, r1
 80088f4:	4611      	mov	r1, r2
 80088f6:	461a      	mov	r2, r3
 80088f8:	4603      	mov	r3, r0
 80088fa:	70fb      	strb	r3, [r7, #3]
 80088fc:	460b      	mov	r3, r1
 80088fe:	70bb      	strb	r3, [r7, #2]
 8008900:	4613      	mov	r3, r2
 8008902:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008904:	2300      	movs	r3, #0
 8008906:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008908:	2300      	movs	r3, #0
 800890a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008912:	78bb      	ldrb	r3, [r7, #2]
 8008914:	883a      	ldrh	r2, [r7, #0]
 8008916:	78f9      	ldrb	r1, [r7, #3]
 8008918:	f7fa fc95 	bl	8003246 <HAL_PCD_EP_Open>
 800891c:	4603      	mov	r3, r0
 800891e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008920:	7bfb      	ldrb	r3, [r7, #15]
 8008922:	4618      	mov	r0, r3
 8008924:	f000 f91c 	bl	8008b60 <USBD_Get_USB_Status>
 8008928:	4603      	mov	r3, r0
 800892a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800892c:	7bbb      	ldrb	r3, [r7, #14]
}
 800892e:	4618      	mov	r0, r3
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b084      	sub	sp, #16
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	460b      	mov	r3, r1
 8008940:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008942:	2300      	movs	r3, #0
 8008944:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008950:	78fa      	ldrb	r2, [r7, #3]
 8008952:	4611      	mov	r1, r2
 8008954:	4618      	mov	r0, r3
 8008956:	f7fa fcde 	bl	8003316 <HAL_PCD_EP_Close>
 800895a:	4603      	mov	r3, r0
 800895c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800895e:	7bfb      	ldrb	r3, [r7, #15]
 8008960:	4618      	mov	r0, r3
 8008962:	f000 f8fd 	bl	8008b60 <USBD_Get_USB_Status>
 8008966:	4603      	mov	r3, r0
 8008968:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800896a:	7bbb      	ldrb	r3, [r7, #14]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	460b      	mov	r3, r1
 800897e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008980:	2300      	movs	r3, #0
 8008982:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800898e:	78fa      	ldrb	r2, [r7, #3]
 8008990:	4611      	mov	r1, r2
 8008992:	4618      	mov	r0, r3
 8008994:	f7fa fdb6 	bl	8003504 <HAL_PCD_EP_SetStall>
 8008998:	4603      	mov	r3, r0
 800899a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800899c:	7bfb      	ldrb	r3, [r7, #15]
 800899e:	4618      	mov	r0, r3
 80089a0:	f000 f8de 	bl	8008b60 <USBD_Get_USB_Status>
 80089a4:	4603      	mov	r3, r0
 80089a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b084      	sub	sp, #16
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	460b      	mov	r3, r1
 80089bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089be:	2300      	movs	r3, #0
 80089c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089c2:	2300      	movs	r3, #0
 80089c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089cc:	78fa      	ldrb	r2, [r7, #3]
 80089ce:	4611      	mov	r1, r2
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7fa fdfb 	bl	80035cc <HAL_PCD_EP_ClrStall>
 80089d6:	4603      	mov	r3, r0
 80089d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089da:	7bfb      	ldrb	r3, [r7, #15]
 80089dc:	4618      	mov	r0, r3
 80089de:	f000 f8bf 	bl	8008b60 <USBD_Get_USB_Status>
 80089e2:	4603      	mov	r3, r0
 80089e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	460b      	mov	r3, r1
 80089fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008a04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	da0b      	bge.n	8008a24 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008a0c:	78fb      	ldrb	r3, [r7, #3]
 8008a0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a12:	68f9      	ldr	r1, [r7, #12]
 8008a14:	4613      	mov	r3, r2
 8008a16:	00db      	lsls	r3, r3, #3
 8008a18:	4413      	add	r3, r2
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	440b      	add	r3, r1
 8008a1e:	333e      	adds	r3, #62	; 0x3e
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	e00b      	b.n	8008a3c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008a24:	78fb      	ldrb	r3, [r7, #3]
 8008a26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a2a:	68f9      	ldr	r1, [r7, #12]
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	00db      	lsls	r3, r3, #3
 8008a30:	4413      	add	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	440b      	add	r3, r1
 8008a36:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008a3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	460b      	mov	r3, r1
 8008a52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a62:	78fa      	ldrb	r2, [r7, #3]
 8008a64:	4611      	mov	r1, r2
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fa fbc8 	bl	80031fc <HAL_PCD_SetAddress>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 f874 	bl	8008b60 <USBD_Get_USB_Status>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b086      	sub	sp, #24
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	60f8      	str	r0, [r7, #12]
 8008a8e:	607a      	str	r2, [r7, #4]
 8008a90:	603b      	str	r3, [r7, #0]
 8008a92:	460b      	mov	r3, r1
 8008a94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008aa4:	7af9      	ldrb	r1, [r7, #11]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	f7fa fce1 	bl	8003470 <HAL_PCD_EP_Transmit>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ab2:	7dfb      	ldrb	r3, [r7, #23]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f000 f853 	bl	8008b60 <USBD_Get_USB_Status>
 8008aba:	4603      	mov	r3, r0
 8008abc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008abe:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3718      	adds	r7, #24
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b086      	sub	sp, #24
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	607a      	str	r2, [r7, #4]
 8008ad2:	603b      	str	r3, [r7, #0]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008adc:	2300      	movs	r3, #0
 8008ade:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008ae6:	7af9      	ldrb	r1, [r7, #11]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	f7fa fc5d 	bl	80033aa <HAL_PCD_EP_Receive>
 8008af0:	4603      	mov	r3, r0
 8008af2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008af4:	7dfb      	ldrb	r3, [r7, #23]
 8008af6:	4618      	mov	r0, r3
 8008af8:	f000 f832 	bl	8008b60 <USBD_Get_USB_Status>
 8008afc:	4603      	mov	r3, r0
 8008afe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b00:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3718      	adds	r7, #24
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b082      	sub	sp, #8
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	460b      	mov	r3, r1
 8008b14:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b1c:	78fa      	ldrb	r2, [r7, #3]
 8008b1e:	4611      	mov	r1, r2
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7fa fc8d 	bl	8003440 <HAL_PCD_EP_GetRxCount>
 8008b26:	4603      	mov	r3, r0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008b38:	4b03      	ldr	r3, [pc, #12]	; (8008b48 <USBD_static_malloc+0x18>)
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	370c      	adds	r7, #12
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	2000b0f0 	.word	0x2000b0f0

08008b4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]

}
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	4603      	mov	r3, r0
 8008b68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b6e:	79fb      	ldrb	r3, [r7, #7]
 8008b70:	2b03      	cmp	r3, #3
 8008b72:	d817      	bhi.n	8008ba4 <USBD_Get_USB_Status+0x44>
 8008b74:	a201      	add	r2, pc, #4	; (adr r2, 8008b7c <USBD_Get_USB_Status+0x1c>)
 8008b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7a:	bf00      	nop
 8008b7c:	08008b8d 	.word	0x08008b8d
 8008b80:	08008b93 	.word	0x08008b93
 8008b84:	08008b99 	.word	0x08008b99
 8008b88:	08008b9f 	.word	0x08008b9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b90:	e00b      	b.n	8008baa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b92:	2303      	movs	r3, #3
 8008b94:	73fb      	strb	r3, [r7, #15]
    break;
 8008b96:	e008      	b.n	8008baa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b9c:	e005      	b.n	8008baa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ba2:	e002      	b.n	8008baa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ba8:	bf00      	nop
  }
  return usb_status;
 8008baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3714      	adds	r7, #20
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <siprintf>:
 8008bb8:	b40e      	push	{r1, r2, r3}
 8008bba:	b500      	push	{lr}
 8008bbc:	b09c      	sub	sp, #112	; 0x70
 8008bbe:	ab1d      	add	r3, sp, #116	; 0x74
 8008bc0:	9002      	str	r0, [sp, #8]
 8008bc2:	9006      	str	r0, [sp, #24]
 8008bc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008bc8:	4809      	ldr	r0, [pc, #36]	; (8008bf0 <siprintf+0x38>)
 8008bca:	9107      	str	r1, [sp, #28]
 8008bcc:	9104      	str	r1, [sp, #16]
 8008bce:	4909      	ldr	r1, [pc, #36]	; (8008bf4 <siprintf+0x3c>)
 8008bd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bd4:	9105      	str	r1, [sp, #20]
 8008bd6:	6800      	ldr	r0, [r0, #0]
 8008bd8:	9301      	str	r3, [sp, #4]
 8008bda:	a902      	add	r1, sp, #8
 8008bdc:	f000 f992 	bl	8008f04 <_svfiprintf_r>
 8008be0:	9b02      	ldr	r3, [sp, #8]
 8008be2:	2200      	movs	r2, #0
 8008be4:	701a      	strb	r2, [r3, #0]
 8008be6:	b01c      	add	sp, #112	; 0x70
 8008be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bec:	b003      	add	sp, #12
 8008bee:	4770      	bx	lr
 8008bf0:	20000158 	.word	0x20000158
 8008bf4:	ffff0208 	.word	0xffff0208

08008bf8 <memset>:
 8008bf8:	4402      	add	r2, r0
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d100      	bne.n	8008c02 <memset+0xa>
 8008c00:	4770      	bx	lr
 8008c02:	f803 1b01 	strb.w	r1, [r3], #1
 8008c06:	e7f9      	b.n	8008bfc <memset+0x4>

08008c08 <__errno>:
 8008c08:	4b01      	ldr	r3, [pc, #4]	; (8008c10 <__errno+0x8>)
 8008c0a:	6818      	ldr	r0, [r3, #0]
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	20000158 	.word	0x20000158

08008c14 <__libc_init_array>:
 8008c14:	b570      	push	{r4, r5, r6, lr}
 8008c16:	4d0d      	ldr	r5, [pc, #52]	; (8008c4c <__libc_init_array+0x38>)
 8008c18:	4c0d      	ldr	r4, [pc, #52]	; (8008c50 <__libc_init_array+0x3c>)
 8008c1a:	1b64      	subs	r4, r4, r5
 8008c1c:	10a4      	asrs	r4, r4, #2
 8008c1e:	2600      	movs	r6, #0
 8008c20:	42a6      	cmp	r6, r4
 8008c22:	d109      	bne.n	8008c38 <__libc_init_array+0x24>
 8008c24:	4d0b      	ldr	r5, [pc, #44]	; (8008c54 <__libc_init_array+0x40>)
 8008c26:	4c0c      	ldr	r4, [pc, #48]	; (8008c58 <__libc_init_array+0x44>)
 8008c28:	f000 fc6a 	bl	8009500 <_init>
 8008c2c:	1b64      	subs	r4, r4, r5
 8008c2e:	10a4      	asrs	r4, r4, #2
 8008c30:	2600      	movs	r6, #0
 8008c32:	42a6      	cmp	r6, r4
 8008c34:	d105      	bne.n	8008c42 <__libc_init_array+0x2e>
 8008c36:	bd70      	pop	{r4, r5, r6, pc}
 8008c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c3c:	4798      	blx	r3
 8008c3e:	3601      	adds	r6, #1
 8008c40:	e7ee      	b.n	8008c20 <__libc_init_array+0xc>
 8008c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c46:	4798      	blx	r3
 8008c48:	3601      	adds	r6, #1
 8008c4a:	e7f2      	b.n	8008c32 <__libc_init_array+0x1e>
 8008c4c:	080095cc 	.word	0x080095cc
 8008c50:	080095cc 	.word	0x080095cc
 8008c54:	080095cc 	.word	0x080095cc
 8008c58:	080095d0 	.word	0x080095d0

08008c5c <__retarget_lock_acquire_recursive>:
 8008c5c:	4770      	bx	lr

08008c5e <__retarget_lock_release_recursive>:
 8008c5e:	4770      	bx	lr

08008c60 <_free_r>:
 8008c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c62:	2900      	cmp	r1, #0
 8008c64:	d044      	beq.n	8008cf0 <_free_r+0x90>
 8008c66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c6a:	9001      	str	r0, [sp, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f1a1 0404 	sub.w	r4, r1, #4
 8008c72:	bfb8      	it	lt
 8008c74:	18e4      	addlt	r4, r4, r3
 8008c76:	f000 f8df 	bl	8008e38 <__malloc_lock>
 8008c7a:	4a1e      	ldr	r2, [pc, #120]	; (8008cf4 <_free_r+0x94>)
 8008c7c:	9801      	ldr	r0, [sp, #4]
 8008c7e:	6813      	ldr	r3, [r2, #0]
 8008c80:	b933      	cbnz	r3, 8008c90 <_free_r+0x30>
 8008c82:	6063      	str	r3, [r4, #4]
 8008c84:	6014      	str	r4, [r2, #0]
 8008c86:	b003      	add	sp, #12
 8008c88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c8c:	f000 b8da 	b.w	8008e44 <__malloc_unlock>
 8008c90:	42a3      	cmp	r3, r4
 8008c92:	d908      	bls.n	8008ca6 <_free_r+0x46>
 8008c94:	6825      	ldr	r5, [r4, #0]
 8008c96:	1961      	adds	r1, r4, r5
 8008c98:	428b      	cmp	r3, r1
 8008c9a:	bf01      	itttt	eq
 8008c9c:	6819      	ldreq	r1, [r3, #0]
 8008c9e:	685b      	ldreq	r3, [r3, #4]
 8008ca0:	1949      	addeq	r1, r1, r5
 8008ca2:	6021      	streq	r1, [r4, #0]
 8008ca4:	e7ed      	b.n	8008c82 <_free_r+0x22>
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	b10b      	cbz	r3, 8008cb0 <_free_r+0x50>
 8008cac:	42a3      	cmp	r3, r4
 8008cae:	d9fa      	bls.n	8008ca6 <_free_r+0x46>
 8008cb0:	6811      	ldr	r1, [r2, #0]
 8008cb2:	1855      	adds	r5, r2, r1
 8008cb4:	42a5      	cmp	r5, r4
 8008cb6:	d10b      	bne.n	8008cd0 <_free_r+0x70>
 8008cb8:	6824      	ldr	r4, [r4, #0]
 8008cba:	4421      	add	r1, r4
 8008cbc:	1854      	adds	r4, r2, r1
 8008cbe:	42a3      	cmp	r3, r4
 8008cc0:	6011      	str	r1, [r2, #0]
 8008cc2:	d1e0      	bne.n	8008c86 <_free_r+0x26>
 8008cc4:	681c      	ldr	r4, [r3, #0]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	6053      	str	r3, [r2, #4]
 8008cca:	440c      	add	r4, r1
 8008ccc:	6014      	str	r4, [r2, #0]
 8008cce:	e7da      	b.n	8008c86 <_free_r+0x26>
 8008cd0:	d902      	bls.n	8008cd8 <_free_r+0x78>
 8008cd2:	230c      	movs	r3, #12
 8008cd4:	6003      	str	r3, [r0, #0]
 8008cd6:	e7d6      	b.n	8008c86 <_free_r+0x26>
 8008cd8:	6825      	ldr	r5, [r4, #0]
 8008cda:	1961      	adds	r1, r4, r5
 8008cdc:	428b      	cmp	r3, r1
 8008cde:	bf04      	itt	eq
 8008ce0:	6819      	ldreq	r1, [r3, #0]
 8008ce2:	685b      	ldreq	r3, [r3, #4]
 8008ce4:	6063      	str	r3, [r4, #4]
 8008ce6:	bf04      	itt	eq
 8008ce8:	1949      	addeq	r1, r1, r5
 8008cea:	6021      	streq	r1, [r4, #0]
 8008cec:	6054      	str	r4, [r2, #4]
 8008cee:	e7ca      	b.n	8008c86 <_free_r+0x26>
 8008cf0:	b003      	add	sp, #12
 8008cf2:	bd30      	pop	{r4, r5, pc}
 8008cf4:	2000b450 	.word	0x2000b450

08008cf8 <sbrk_aligned>:
 8008cf8:	b570      	push	{r4, r5, r6, lr}
 8008cfa:	4e0e      	ldr	r6, [pc, #56]	; (8008d34 <sbrk_aligned+0x3c>)
 8008cfc:	460c      	mov	r4, r1
 8008cfe:	6831      	ldr	r1, [r6, #0]
 8008d00:	4605      	mov	r5, r0
 8008d02:	b911      	cbnz	r1, 8008d0a <sbrk_aligned+0x12>
 8008d04:	f000 fba6 	bl	8009454 <_sbrk_r>
 8008d08:	6030      	str	r0, [r6, #0]
 8008d0a:	4621      	mov	r1, r4
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	f000 fba1 	bl	8009454 <_sbrk_r>
 8008d12:	1c43      	adds	r3, r0, #1
 8008d14:	d00a      	beq.n	8008d2c <sbrk_aligned+0x34>
 8008d16:	1cc4      	adds	r4, r0, #3
 8008d18:	f024 0403 	bic.w	r4, r4, #3
 8008d1c:	42a0      	cmp	r0, r4
 8008d1e:	d007      	beq.n	8008d30 <sbrk_aligned+0x38>
 8008d20:	1a21      	subs	r1, r4, r0
 8008d22:	4628      	mov	r0, r5
 8008d24:	f000 fb96 	bl	8009454 <_sbrk_r>
 8008d28:	3001      	adds	r0, #1
 8008d2a:	d101      	bne.n	8008d30 <sbrk_aligned+0x38>
 8008d2c:	f04f 34ff 	mov.w	r4, #4294967295
 8008d30:	4620      	mov	r0, r4
 8008d32:	bd70      	pop	{r4, r5, r6, pc}
 8008d34:	2000b454 	.word	0x2000b454

08008d38 <_malloc_r>:
 8008d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d3c:	1ccd      	adds	r5, r1, #3
 8008d3e:	f025 0503 	bic.w	r5, r5, #3
 8008d42:	3508      	adds	r5, #8
 8008d44:	2d0c      	cmp	r5, #12
 8008d46:	bf38      	it	cc
 8008d48:	250c      	movcc	r5, #12
 8008d4a:	2d00      	cmp	r5, #0
 8008d4c:	4607      	mov	r7, r0
 8008d4e:	db01      	blt.n	8008d54 <_malloc_r+0x1c>
 8008d50:	42a9      	cmp	r1, r5
 8008d52:	d905      	bls.n	8008d60 <_malloc_r+0x28>
 8008d54:	230c      	movs	r3, #12
 8008d56:	603b      	str	r3, [r7, #0]
 8008d58:	2600      	movs	r6, #0
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008e34 <_malloc_r+0xfc>
 8008d64:	f000 f868 	bl	8008e38 <__malloc_lock>
 8008d68:	f8d8 3000 	ldr.w	r3, [r8]
 8008d6c:	461c      	mov	r4, r3
 8008d6e:	bb5c      	cbnz	r4, 8008dc8 <_malloc_r+0x90>
 8008d70:	4629      	mov	r1, r5
 8008d72:	4638      	mov	r0, r7
 8008d74:	f7ff ffc0 	bl	8008cf8 <sbrk_aligned>
 8008d78:	1c43      	adds	r3, r0, #1
 8008d7a:	4604      	mov	r4, r0
 8008d7c:	d155      	bne.n	8008e2a <_malloc_r+0xf2>
 8008d7e:	f8d8 4000 	ldr.w	r4, [r8]
 8008d82:	4626      	mov	r6, r4
 8008d84:	2e00      	cmp	r6, #0
 8008d86:	d145      	bne.n	8008e14 <_malloc_r+0xdc>
 8008d88:	2c00      	cmp	r4, #0
 8008d8a:	d048      	beq.n	8008e1e <_malloc_r+0xe6>
 8008d8c:	6823      	ldr	r3, [r4, #0]
 8008d8e:	4631      	mov	r1, r6
 8008d90:	4638      	mov	r0, r7
 8008d92:	eb04 0903 	add.w	r9, r4, r3
 8008d96:	f000 fb5d 	bl	8009454 <_sbrk_r>
 8008d9a:	4581      	cmp	r9, r0
 8008d9c:	d13f      	bne.n	8008e1e <_malloc_r+0xe6>
 8008d9e:	6821      	ldr	r1, [r4, #0]
 8008da0:	1a6d      	subs	r5, r5, r1
 8008da2:	4629      	mov	r1, r5
 8008da4:	4638      	mov	r0, r7
 8008da6:	f7ff ffa7 	bl	8008cf8 <sbrk_aligned>
 8008daa:	3001      	adds	r0, #1
 8008dac:	d037      	beq.n	8008e1e <_malloc_r+0xe6>
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	442b      	add	r3, r5
 8008db2:	6023      	str	r3, [r4, #0]
 8008db4:	f8d8 3000 	ldr.w	r3, [r8]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d038      	beq.n	8008e2e <_malloc_r+0xf6>
 8008dbc:	685a      	ldr	r2, [r3, #4]
 8008dbe:	42a2      	cmp	r2, r4
 8008dc0:	d12b      	bne.n	8008e1a <_malloc_r+0xe2>
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	605a      	str	r2, [r3, #4]
 8008dc6:	e00f      	b.n	8008de8 <_malloc_r+0xb0>
 8008dc8:	6822      	ldr	r2, [r4, #0]
 8008dca:	1b52      	subs	r2, r2, r5
 8008dcc:	d41f      	bmi.n	8008e0e <_malloc_r+0xd6>
 8008dce:	2a0b      	cmp	r2, #11
 8008dd0:	d917      	bls.n	8008e02 <_malloc_r+0xca>
 8008dd2:	1961      	adds	r1, r4, r5
 8008dd4:	42a3      	cmp	r3, r4
 8008dd6:	6025      	str	r5, [r4, #0]
 8008dd8:	bf18      	it	ne
 8008dda:	6059      	strne	r1, [r3, #4]
 8008ddc:	6863      	ldr	r3, [r4, #4]
 8008dde:	bf08      	it	eq
 8008de0:	f8c8 1000 	streq.w	r1, [r8]
 8008de4:	5162      	str	r2, [r4, r5]
 8008de6:	604b      	str	r3, [r1, #4]
 8008de8:	4638      	mov	r0, r7
 8008dea:	f104 060b 	add.w	r6, r4, #11
 8008dee:	f000 f829 	bl	8008e44 <__malloc_unlock>
 8008df2:	f026 0607 	bic.w	r6, r6, #7
 8008df6:	1d23      	adds	r3, r4, #4
 8008df8:	1af2      	subs	r2, r6, r3
 8008dfa:	d0ae      	beq.n	8008d5a <_malloc_r+0x22>
 8008dfc:	1b9b      	subs	r3, r3, r6
 8008dfe:	50a3      	str	r3, [r4, r2]
 8008e00:	e7ab      	b.n	8008d5a <_malloc_r+0x22>
 8008e02:	42a3      	cmp	r3, r4
 8008e04:	6862      	ldr	r2, [r4, #4]
 8008e06:	d1dd      	bne.n	8008dc4 <_malloc_r+0x8c>
 8008e08:	f8c8 2000 	str.w	r2, [r8]
 8008e0c:	e7ec      	b.n	8008de8 <_malloc_r+0xb0>
 8008e0e:	4623      	mov	r3, r4
 8008e10:	6864      	ldr	r4, [r4, #4]
 8008e12:	e7ac      	b.n	8008d6e <_malloc_r+0x36>
 8008e14:	4634      	mov	r4, r6
 8008e16:	6876      	ldr	r6, [r6, #4]
 8008e18:	e7b4      	b.n	8008d84 <_malloc_r+0x4c>
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	e7cc      	b.n	8008db8 <_malloc_r+0x80>
 8008e1e:	230c      	movs	r3, #12
 8008e20:	603b      	str	r3, [r7, #0]
 8008e22:	4638      	mov	r0, r7
 8008e24:	f000 f80e 	bl	8008e44 <__malloc_unlock>
 8008e28:	e797      	b.n	8008d5a <_malloc_r+0x22>
 8008e2a:	6025      	str	r5, [r4, #0]
 8008e2c:	e7dc      	b.n	8008de8 <_malloc_r+0xb0>
 8008e2e:	605b      	str	r3, [r3, #4]
 8008e30:	deff      	udf	#255	; 0xff
 8008e32:	bf00      	nop
 8008e34:	2000b450 	.word	0x2000b450

08008e38 <__malloc_lock>:
 8008e38:	4801      	ldr	r0, [pc, #4]	; (8008e40 <__malloc_lock+0x8>)
 8008e3a:	f7ff bf0f 	b.w	8008c5c <__retarget_lock_acquire_recursive>
 8008e3e:	bf00      	nop
 8008e40:	2000b44c 	.word	0x2000b44c

08008e44 <__malloc_unlock>:
 8008e44:	4801      	ldr	r0, [pc, #4]	; (8008e4c <__malloc_unlock+0x8>)
 8008e46:	f7ff bf0a 	b.w	8008c5e <__retarget_lock_release_recursive>
 8008e4a:	bf00      	nop
 8008e4c:	2000b44c 	.word	0x2000b44c

08008e50 <__ssputs_r>:
 8008e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e54:	688e      	ldr	r6, [r1, #8]
 8008e56:	461f      	mov	r7, r3
 8008e58:	42be      	cmp	r6, r7
 8008e5a:	680b      	ldr	r3, [r1, #0]
 8008e5c:	4682      	mov	sl, r0
 8008e5e:	460c      	mov	r4, r1
 8008e60:	4690      	mov	r8, r2
 8008e62:	d82c      	bhi.n	8008ebe <__ssputs_r+0x6e>
 8008e64:	898a      	ldrh	r2, [r1, #12]
 8008e66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e6a:	d026      	beq.n	8008eba <__ssputs_r+0x6a>
 8008e6c:	6965      	ldr	r5, [r4, #20]
 8008e6e:	6909      	ldr	r1, [r1, #16]
 8008e70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e74:	eba3 0901 	sub.w	r9, r3, r1
 8008e78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e7c:	1c7b      	adds	r3, r7, #1
 8008e7e:	444b      	add	r3, r9
 8008e80:	106d      	asrs	r5, r5, #1
 8008e82:	429d      	cmp	r5, r3
 8008e84:	bf38      	it	cc
 8008e86:	461d      	movcc	r5, r3
 8008e88:	0553      	lsls	r3, r2, #21
 8008e8a:	d527      	bpl.n	8008edc <__ssputs_r+0x8c>
 8008e8c:	4629      	mov	r1, r5
 8008e8e:	f7ff ff53 	bl	8008d38 <_malloc_r>
 8008e92:	4606      	mov	r6, r0
 8008e94:	b360      	cbz	r0, 8008ef0 <__ssputs_r+0xa0>
 8008e96:	6921      	ldr	r1, [r4, #16]
 8008e98:	464a      	mov	r2, r9
 8008e9a:	f000 faeb 	bl	8009474 <memcpy>
 8008e9e:	89a3      	ldrh	r3, [r4, #12]
 8008ea0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea8:	81a3      	strh	r3, [r4, #12]
 8008eaa:	6126      	str	r6, [r4, #16]
 8008eac:	6165      	str	r5, [r4, #20]
 8008eae:	444e      	add	r6, r9
 8008eb0:	eba5 0509 	sub.w	r5, r5, r9
 8008eb4:	6026      	str	r6, [r4, #0]
 8008eb6:	60a5      	str	r5, [r4, #8]
 8008eb8:	463e      	mov	r6, r7
 8008eba:	42be      	cmp	r6, r7
 8008ebc:	d900      	bls.n	8008ec0 <__ssputs_r+0x70>
 8008ebe:	463e      	mov	r6, r7
 8008ec0:	6820      	ldr	r0, [r4, #0]
 8008ec2:	4632      	mov	r2, r6
 8008ec4:	4641      	mov	r1, r8
 8008ec6:	f000 faab 	bl	8009420 <memmove>
 8008eca:	68a3      	ldr	r3, [r4, #8]
 8008ecc:	1b9b      	subs	r3, r3, r6
 8008ece:	60a3      	str	r3, [r4, #8]
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	4433      	add	r3, r6
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	2000      	movs	r0, #0
 8008ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008edc:	462a      	mov	r2, r5
 8008ede:	f000 fad7 	bl	8009490 <_realloc_r>
 8008ee2:	4606      	mov	r6, r0
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	d1e0      	bne.n	8008eaa <__ssputs_r+0x5a>
 8008ee8:	6921      	ldr	r1, [r4, #16]
 8008eea:	4650      	mov	r0, sl
 8008eec:	f7ff feb8 	bl	8008c60 <_free_r>
 8008ef0:	230c      	movs	r3, #12
 8008ef2:	f8ca 3000 	str.w	r3, [sl]
 8008ef6:	89a3      	ldrh	r3, [r4, #12]
 8008ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008efc:	81a3      	strh	r3, [r4, #12]
 8008efe:	f04f 30ff 	mov.w	r0, #4294967295
 8008f02:	e7e9      	b.n	8008ed8 <__ssputs_r+0x88>

08008f04 <_svfiprintf_r>:
 8008f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f08:	4698      	mov	r8, r3
 8008f0a:	898b      	ldrh	r3, [r1, #12]
 8008f0c:	061b      	lsls	r3, r3, #24
 8008f0e:	b09d      	sub	sp, #116	; 0x74
 8008f10:	4607      	mov	r7, r0
 8008f12:	460d      	mov	r5, r1
 8008f14:	4614      	mov	r4, r2
 8008f16:	d50e      	bpl.n	8008f36 <_svfiprintf_r+0x32>
 8008f18:	690b      	ldr	r3, [r1, #16]
 8008f1a:	b963      	cbnz	r3, 8008f36 <_svfiprintf_r+0x32>
 8008f1c:	2140      	movs	r1, #64	; 0x40
 8008f1e:	f7ff ff0b 	bl	8008d38 <_malloc_r>
 8008f22:	6028      	str	r0, [r5, #0]
 8008f24:	6128      	str	r0, [r5, #16]
 8008f26:	b920      	cbnz	r0, 8008f32 <_svfiprintf_r+0x2e>
 8008f28:	230c      	movs	r3, #12
 8008f2a:	603b      	str	r3, [r7, #0]
 8008f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f30:	e0d0      	b.n	80090d4 <_svfiprintf_r+0x1d0>
 8008f32:	2340      	movs	r3, #64	; 0x40
 8008f34:	616b      	str	r3, [r5, #20]
 8008f36:	2300      	movs	r3, #0
 8008f38:	9309      	str	r3, [sp, #36]	; 0x24
 8008f3a:	2320      	movs	r3, #32
 8008f3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f40:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f44:	2330      	movs	r3, #48	; 0x30
 8008f46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80090ec <_svfiprintf_r+0x1e8>
 8008f4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f4e:	f04f 0901 	mov.w	r9, #1
 8008f52:	4623      	mov	r3, r4
 8008f54:	469a      	mov	sl, r3
 8008f56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f5a:	b10a      	cbz	r2, 8008f60 <_svfiprintf_r+0x5c>
 8008f5c:	2a25      	cmp	r2, #37	; 0x25
 8008f5e:	d1f9      	bne.n	8008f54 <_svfiprintf_r+0x50>
 8008f60:	ebba 0b04 	subs.w	fp, sl, r4
 8008f64:	d00b      	beq.n	8008f7e <_svfiprintf_r+0x7a>
 8008f66:	465b      	mov	r3, fp
 8008f68:	4622      	mov	r2, r4
 8008f6a:	4629      	mov	r1, r5
 8008f6c:	4638      	mov	r0, r7
 8008f6e:	f7ff ff6f 	bl	8008e50 <__ssputs_r>
 8008f72:	3001      	adds	r0, #1
 8008f74:	f000 80a9 	beq.w	80090ca <_svfiprintf_r+0x1c6>
 8008f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f7a:	445a      	add	r2, fp
 8008f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8008f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f000 80a1 	beq.w	80090ca <_svfiprintf_r+0x1c6>
 8008f88:	2300      	movs	r3, #0
 8008f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f92:	f10a 0a01 	add.w	sl, sl, #1
 8008f96:	9304      	str	r3, [sp, #16]
 8008f98:	9307      	str	r3, [sp, #28]
 8008f9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f9e:	931a      	str	r3, [sp, #104]	; 0x68
 8008fa0:	4654      	mov	r4, sl
 8008fa2:	2205      	movs	r2, #5
 8008fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fa8:	4850      	ldr	r0, [pc, #320]	; (80090ec <_svfiprintf_r+0x1e8>)
 8008faa:	f7f7 f921 	bl	80001f0 <memchr>
 8008fae:	9a04      	ldr	r2, [sp, #16]
 8008fb0:	b9d8      	cbnz	r0, 8008fea <_svfiprintf_r+0xe6>
 8008fb2:	06d0      	lsls	r0, r2, #27
 8008fb4:	bf44      	itt	mi
 8008fb6:	2320      	movmi	r3, #32
 8008fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fbc:	0711      	lsls	r1, r2, #28
 8008fbe:	bf44      	itt	mi
 8008fc0:	232b      	movmi	r3, #43	; 0x2b
 8008fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8008fca:	2b2a      	cmp	r3, #42	; 0x2a
 8008fcc:	d015      	beq.n	8008ffa <_svfiprintf_r+0xf6>
 8008fce:	9a07      	ldr	r2, [sp, #28]
 8008fd0:	4654      	mov	r4, sl
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	f04f 0c0a 	mov.w	ip, #10
 8008fd8:	4621      	mov	r1, r4
 8008fda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fde:	3b30      	subs	r3, #48	; 0x30
 8008fe0:	2b09      	cmp	r3, #9
 8008fe2:	d94d      	bls.n	8009080 <_svfiprintf_r+0x17c>
 8008fe4:	b1b0      	cbz	r0, 8009014 <_svfiprintf_r+0x110>
 8008fe6:	9207      	str	r2, [sp, #28]
 8008fe8:	e014      	b.n	8009014 <_svfiprintf_r+0x110>
 8008fea:	eba0 0308 	sub.w	r3, r0, r8
 8008fee:	fa09 f303 	lsl.w	r3, r9, r3
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	9304      	str	r3, [sp, #16]
 8008ff6:	46a2      	mov	sl, r4
 8008ff8:	e7d2      	b.n	8008fa0 <_svfiprintf_r+0x9c>
 8008ffa:	9b03      	ldr	r3, [sp, #12]
 8008ffc:	1d19      	adds	r1, r3, #4
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	9103      	str	r1, [sp, #12]
 8009002:	2b00      	cmp	r3, #0
 8009004:	bfbb      	ittet	lt
 8009006:	425b      	neglt	r3, r3
 8009008:	f042 0202 	orrlt.w	r2, r2, #2
 800900c:	9307      	strge	r3, [sp, #28]
 800900e:	9307      	strlt	r3, [sp, #28]
 8009010:	bfb8      	it	lt
 8009012:	9204      	strlt	r2, [sp, #16]
 8009014:	7823      	ldrb	r3, [r4, #0]
 8009016:	2b2e      	cmp	r3, #46	; 0x2e
 8009018:	d10c      	bne.n	8009034 <_svfiprintf_r+0x130>
 800901a:	7863      	ldrb	r3, [r4, #1]
 800901c:	2b2a      	cmp	r3, #42	; 0x2a
 800901e:	d134      	bne.n	800908a <_svfiprintf_r+0x186>
 8009020:	9b03      	ldr	r3, [sp, #12]
 8009022:	1d1a      	adds	r2, r3, #4
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	9203      	str	r2, [sp, #12]
 8009028:	2b00      	cmp	r3, #0
 800902a:	bfb8      	it	lt
 800902c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009030:	3402      	adds	r4, #2
 8009032:	9305      	str	r3, [sp, #20]
 8009034:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80090fc <_svfiprintf_r+0x1f8>
 8009038:	7821      	ldrb	r1, [r4, #0]
 800903a:	2203      	movs	r2, #3
 800903c:	4650      	mov	r0, sl
 800903e:	f7f7 f8d7 	bl	80001f0 <memchr>
 8009042:	b138      	cbz	r0, 8009054 <_svfiprintf_r+0x150>
 8009044:	9b04      	ldr	r3, [sp, #16]
 8009046:	eba0 000a 	sub.w	r0, r0, sl
 800904a:	2240      	movs	r2, #64	; 0x40
 800904c:	4082      	lsls	r2, r0
 800904e:	4313      	orrs	r3, r2
 8009050:	3401      	adds	r4, #1
 8009052:	9304      	str	r3, [sp, #16]
 8009054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009058:	4825      	ldr	r0, [pc, #148]	; (80090f0 <_svfiprintf_r+0x1ec>)
 800905a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800905e:	2206      	movs	r2, #6
 8009060:	f7f7 f8c6 	bl	80001f0 <memchr>
 8009064:	2800      	cmp	r0, #0
 8009066:	d038      	beq.n	80090da <_svfiprintf_r+0x1d6>
 8009068:	4b22      	ldr	r3, [pc, #136]	; (80090f4 <_svfiprintf_r+0x1f0>)
 800906a:	bb1b      	cbnz	r3, 80090b4 <_svfiprintf_r+0x1b0>
 800906c:	9b03      	ldr	r3, [sp, #12]
 800906e:	3307      	adds	r3, #7
 8009070:	f023 0307 	bic.w	r3, r3, #7
 8009074:	3308      	adds	r3, #8
 8009076:	9303      	str	r3, [sp, #12]
 8009078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800907a:	4433      	add	r3, r6
 800907c:	9309      	str	r3, [sp, #36]	; 0x24
 800907e:	e768      	b.n	8008f52 <_svfiprintf_r+0x4e>
 8009080:	fb0c 3202 	mla	r2, ip, r2, r3
 8009084:	460c      	mov	r4, r1
 8009086:	2001      	movs	r0, #1
 8009088:	e7a6      	b.n	8008fd8 <_svfiprintf_r+0xd4>
 800908a:	2300      	movs	r3, #0
 800908c:	3401      	adds	r4, #1
 800908e:	9305      	str	r3, [sp, #20]
 8009090:	4619      	mov	r1, r3
 8009092:	f04f 0c0a 	mov.w	ip, #10
 8009096:	4620      	mov	r0, r4
 8009098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800909c:	3a30      	subs	r2, #48	; 0x30
 800909e:	2a09      	cmp	r2, #9
 80090a0:	d903      	bls.n	80090aa <_svfiprintf_r+0x1a6>
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d0c6      	beq.n	8009034 <_svfiprintf_r+0x130>
 80090a6:	9105      	str	r1, [sp, #20]
 80090a8:	e7c4      	b.n	8009034 <_svfiprintf_r+0x130>
 80090aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80090ae:	4604      	mov	r4, r0
 80090b0:	2301      	movs	r3, #1
 80090b2:	e7f0      	b.n	8009096 <_svfiprintf_r+0x192>
 80090b4:	ab03      	add	r3, sp, #12
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	462a      	mov	r2, r5
 80090ba:	4b0f      	ldr	r3, [pc, #60]	; (80090f8 <_svfiprintf_r+0x1f4>)
 80090bc:	a904      	add	r1, sp, #16
 80090be:	4638      	mov	r0, r7
 80090c0:	f3af 8000 	nop.w
 80090c4:	1c42      	adds	r2, r0, #1
 80090c6:	4606      	mov	r6, r0
 80090c8:	d1d6      	bne.n	8009078 <_svfiprintf_r+0x174>
 80090ca:	89ab      	ldrh	r3, [r5, #12]
 80090cc:	065b      	lsls	r3, r3, #25
 80090ce:	f53f af2d 	bmi.w	8008f2c <_svfiprintf_r+0x28>
 80090d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090d4:	b01d      	add	sp, #116	; 0x74
 80090d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090da:	ab03      	add	r3, sp, #12
 80090dc:	9300      	str	r3, [sp, #0]
 80090de:	462a      	mov	r2, r5
 80090e0:	4b05      	ldr	r3, [pc, #20]	; (80090f8 <_svfiprintf_r+0x1f4>)
 80090e2:	a904      	add	r1, sp, #16
 80090e4:	4638      	mov	r0, r7
 80090e6:	f000 f879 	bl	80091dc <_printf_i>
 80090ea:	e7eb      	b.n	80090c4 <_svfiprintf_r+0x1c0>
 80090ec:	08009590 	.word	0x08009590
 80090f0:	0800959a 	.word	0x0800959a
 80090f4:	00000000 	.word	0x00000000
 80090f8:	08008e51 	.word	0x08008e51
 80090fc:	08009596 	.word	0x08009596

08009100 <_printf_common>:
 8009100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009104:	4616      	mov	r6, r2
 8009106:	4699      	mov	r9, r3
 8009108:	688a      	ldr	r2, [r1, #8]
 800910a:	690b      	ldr	r3, [r1, #16]
 800910c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009110:	4293      	cmp	r3, r2
 8009112:	bfb8      	it	lt
 8009114:	4613      	movlt	r3, r2
 8009116:	6033      	str	r3, [r6, #0]
 8009118:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800911c:	4607      	mov	r7, r0
 800911e:	460c      	mov	r4, r1
 8009120:	b10a      	cbz	r2, 8009126 <_printf_common+0x26>
 8009122:	3301      	adds	r3, #1
 8009124:	6033      	str	r3, [r6, #0]
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	0699      	lsls	r1, r3, #26
 800912a:	bf42      	ittt	mi
 800912c:	6833      	ldrmi	r3, [r6, #0]
 800912e:	3302      	addmi	r3, #2
 8009130:	6033      	strmi	r3, [r6, #0]
 8009132:	6825      	ldr	r5, [r4, #0]
 8009134:	f015 0506 	ands.w	r5, r5, #6
 8009138:	d106      	bne.n	8009148 <_printf_common+0x48>
 800913a:	f104 0a19 	add.w	sl, r4, #25
 800913e:	68e3      	ldr	r3, [r4, #12]
 8009140:	6832      	ldr	r2, [r6, #0]
 8009142:	1a9b      	subs	r3, r3, r2
 8009144:	42ab      	cmp	r3, r5
 8009146:	dc26      	bgt.n	8009196 <_printf_common+0x96>
 8009148:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800914c:	1e13      	subs	r3, r2, #0
 800914e:	6822      	ldr	r2, [r4, #0]
 8009150:	bf18      	it	ne
 8009152:	2301      	movne	r3, #1
 8009154:	0692      	lsls	r2, r2, #26
 8009156:	d42b      	bmi.n	80091b0 <_printf_common+0xb0>
 8009158:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800915c:	4649      	mov	r1, r9
 800915e:	4638      	mov	r0, r7
 8009160:	47c0      	blx	r8
 8009162:	3001      	adds	r0, #1
 8009164:	d01e      	beq.n	80091a4 <_printf_common+0xa4>
 8009166:	6823      	ldr	r3, [r4, #0]
 8009168:	6922      	ldr	r2, [r4, #16]
 800916a:	f003 0306 	and.w	r3, r3, #6
 800916e:	2b04      	cmp	r3, #4
 8009170:	bf02      	ittt	eq
 8009172:	68e5      	ldreq	r5, [r4, #12]
 8009174:	6833      	ldreq	r3, [r6, #0]
 8009176:	1aed      	subeq	r5, r5, r3
 8009178:	68a3      	ldr	r3, [r4, #8]
 800917a:	bf0c      	ite	eq
 800917c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009180:	2500      	movne	r5, #0
 8009182:	4293      	cmp	r3, r2
 8009184:	bfc4      	itt	gt
 8009186:	1a9b      	subgt	r3, r3, r2
 8009188:	18ed      	addgt	r5, r5, r3
 800918a:	2600      	movs	r6, #0
 800918c:	341a      	adds	r4, #26
 800918e:	42b5      	cmp	r5, r6
 8009190:	d11a      	bne.n	80091c8 <_printf_common+0xc8>
 8009192:	2000      	movs	r0, #0
 8009194:	e008      	b.n	80091a8 <_printf_common+0xa8>
 8009196:	2301      	movs	r3, #1
 8009198:	4652      	mov	r2, sl
 800919a:	4649      	mov	r1, r9
 800919c:	4638      	mov	r0, r7
 800919e:	47c0      	blx	r8
 80091a0:	3001      	adds	r0, #1
 80091a2:	d103      	bne.n	80091ac <_printf_common+0xac>
 80091a4:	f04f 30ff 	mov.w	r0, #4294967295
 80091a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ac:	3501      	adds	r5, #1
 80091ae:	e7c6      	b.n	800913e <_printf_common+0x3e>
 80091b0:	18e1      	adds	r1, r4, r3
 80091b2:	1c5a      	adds	r2, r3, #1
 80091b4:	2030      	movs	r0, #48	; 0x30
 80091b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091ba:	4422      	add	r2, r4
 80091bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091c4:	3302      	adds	r3, #2
 80091c6:	e7c7      	b.n	8009158 <_printf_common+0x58>
 80091c8:	2301      	movs	r3, #1
 80091ca:	4622      	mov	r2, r4
 80091cc:	4649      	mov	r1, r9
 80091ce:	4638      	mov	r0, r7
 80091d0:	47c0      	blx	r8
 80091d2:	3001      	adds	r0, #1
 80091d4:	d0e6      	beq.n	80091a4 <_printf_common+0xa4>
 80091d6:	3601      	adds	r6, #1
 80091d8:	e7d9      	b.n	800918e <_printf_common+0x8e>
	...

080091dc <_printf_i>:
 80091dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091e0:	7e0f      	ldrb	r7, [r1, #24]
 80091e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80091e4:	2f78      	cmp	r7, #120	; 0x78
 80091e6:	4691      	mov	r9, r2
 80091e8:	4680      	mov	r8, r0
 80091ea:	460c      	mov	r4, r1
 80091ec:	469a      	mov	sl, r3
 80091ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80091f2:	d807      	bhi.n	8009204 <_printf_i+0x28>
 80091f4:	2f62      	cmp	r7, #98	; 0x62
 80091f6:	d80a      	bhi.n	800920e <_printf_i+0x32>
 80091f8:	2f00      	cmp	r7, #0
 80091fa:	f000 80d4 	beq.w	80093a6 <_printf_i+0x1ca>
 80091fe:	2f58      	cmp	r7, #88	; 0x58
 8009200:	f000 80c0 	beq.w	8009384 <_printf_i+0x1a8>
 8009204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009208:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800920c:	e03a      	b.n	8009284 <_printf_i+0xa8>
 800920e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009212:	2b15      	cmp	r3, #21
 8009214:	d8f6      	bhi.n	8009204 <_printf_i+0x28>
 8009216:	a101      	add	r1, pc, #4	; (adr r1, 800921c <_printf_i+0x40>)
 8009218:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800921c:	08009275 	.word	0x08009275
 8009220:	08009289 	.word	0x08009289
 8009224:	08009205 	.word	0x08009205
 8009228:	08009205 	.word	0x08009205
 800922c:	08009205 	.word	0x08009205
 8009230:	08009205 	.word	0x08009205
 8009234:	08009289 	.word	0x08009289
 8009238:	08009205 	.word	0x08009205
 800923c:	08009205 	.word	0x08009205
 8009240:	08009205 	.word	0x08009205
 8009244:	08009205 	.word	0x08009205
 8009248:	0800938d 	.word	0x0800938d
 800924c:	080092b5 	.word	0x080092b5
 8009250:	08009347 	.word	0x08009347
 8009254:	08009205 	.word	0x08009205
 8009258:	08009205 	.word	0x08009205
 800925c:	080093af 	.word	0x080093af
 8009260:	08009205 	.word	0x08009205
 8009264:	080092b5 	.word	0x080092b5
 8009268:	08009205 	.word	0x08009205
 800926c:	08009205 	.word	0x08009205
 8009270:	0800934f 	.word	0x0800934f
 8009274:	682b      	ldr	r3, [r5, #0]
 8009276:	1d1a      	adds	r2, r3, #4
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	602a      	str	r2, [r5, #0]
 800927c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009280:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009284:	2301      	movs	r3, #1
 8009286:	e09f      	b.n	80093c8 <_printf_i+0x1ec>
 8009288:	6820      	ldr	r0, [r4, #0]
 800928a:	682b      	ldr	r3, [r5, #0]
 800928c:	0607      	lsls	r7, r0, #24
 800928e:	f103 0104 	add.w	r1, r3, #4
 8009292:	6029      	str	r1, [r5, #0]
 8009294:	d501      	bpl.n	800929a <_printf_i+0xbe>
 8009296:	681e      	ldr	r6, [r3, #0]
 8009298:	e003      	b.n	80092a2 <_printf_i+0xc6>
 800929a:	0646      	lsls	r6, r0, #25
 800929c:	d5fb      	bpl.n	8009296 <_printf_i+0xba>
 800929e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80092a2:	2e00      	cmp	r6, #0
 80092a4:	da03      	bge.n	80092ae <_printf_i+0xd2>
 80092a6:	232d      	movs	r3, #45	; 0x2d
 80092a8:	4276      	negs	r6, r6
 80092aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092ae:	485a      	ldr	r0, [pc, #360]	; (8009418 <_printf_i+0x23c>)
 80092b0:	230a      	movs	r3, #10
 80092b2:	e012      	b.n	80092da <_printf_i+0xfe>
 80092b4:	682b      	ldr	r3, [r5, #0]
 80092b6:	6820      	ldr	r0, [r4, #0]
 80092b8:	1d19      	adds	r1, r3, #4
 80092ba:	6029      	str	r1, [r5, #0]
 80092bc:	0605      	lsls	r5, r0, #24
 80092be:	d501      	bpl.n	80092c4 <_printf_i+0xe8>
 80092c0:	681e      	ldr	r6, [r3, #0]
 80092c2:	e002      	b.n	80092ca <_printf_i+0xee>
 80092c4:	0641      	lsls	r1, r0, #25
 80092c6:	d5fb      	bpl.n	80092c0 <_printf_i+0xe4>
 80092c8:	881e      	ldrh	r6, [r3, #0]
 80092ca:	4853      	ldr	r0, [pc, #332]	; (8009418 <_printf_i+0x23c>)
 80092cc:	2f6f      	cmp	r7, #111	; 0x6f
 80092ce:	bf0c      	ite	eq
 80092d0:	2308      	moveq	r3, #8
 80092d2:	230a      	movne	r3, #10
 80092d4:	2100      	movs	r1, #0
 80092d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092da:	6865      	ldr	r5, [r4, #4]
 80092dc:	60a5      	str	r5, [r4, #8]
 80092de:	2d00      	cmp	r5, #0
 80092e0:	bfa2      	ittt	ge
 80092e2:	6821      	ldrge	r1, [r4, #0]
 80092e4:	f021 0104 	bicge.w	r1, r1, #4
 80092e8:	6021      	strge	r1, [r4, #0]
 80092ea:	b90e      	cbnz	r6, 80092f0 <_printf_i+0x114>
 80092ec:	2d00      	cmp	r5, #0
 80092ee:	d04b      	beq.n	8009388 <_printf_i+0x1ac>
 80092f0:	4615      	mov	r5, r2
 80092f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80092f6:	fb03 6711 	mls	r7, r3, r1, r6
 80092fa:	5dc7      	ldrb	r7, [r0, r7]
 80092fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009300:	4637      	mov	r7, r6
 8009302:	42bb      	cmp	r3, r7
 8009304:	460e      	mov	r6, r1
 8009306:	d9f4      	bls.n	80092f2 <_printf_i+0x116>
 8009308:	2b08      	cmp	r3, #8
 800930a:	d10b      	bne.n	8009324 <_printf_i+0x148>
 800930c:	6823      	ldr	r3, [r4, #0]
 800930e:	07de      	lsls	r6, r3, #31
 8009310:	d508      	bpl.n	8009324 <_printf_i+0x148>
 8009312:	6923      	ldr	r3, [r4, #16]
 8009314:	6861      	ldr	r1, [r4, #4]
 8009316:	4299      	cmp	r1, r3
 8009318:	bfde      	ittt	le
 800931a:	2330      	movle	r3, #48	; 0x30
 800931c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009320:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009324:	1b52      	subs	r2, r2, r5
 8009326:	6122      	str	r2, [r4, #16]
 8009328:	f8cd a000 	str.w	sl, [sp]
 800932c:	464b      	mov	r3, r9
 800932e:	aa03      	add	r2, sp, #12
 8009330:	4621      	mov	r1, r4
 8009332:	4640      	mov	r0, r8
 8009334:	f7ff fee4 	bl	8009100 <_printf_common>
 8009338:	3001      	adds	r0, #1
 800933a:	d14a      	bne.n	80093d2 <_printf_i+0x1f6>
 800933c:	f04f 30ff 	mov.w	r0, #4294967295
 8009340:	b004      	add	sp, #16
 8009342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009346:	6823      	ldr	r3, [r4, #0]
 8009348:	f043 0320 	orr.w	r3, r3, #32
 800934c:	6023      	str	r3, [r4, #0]
 800934e:	4833      	ldr	r0, [pc, #204]	; (800941c <_printf_i+0x240>)
 8009350:	2778      	movs	r7, #120	; 0x78
 8009352:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009356:	6823      	ldr	r3, [r4, #0]
 8009358:	6829      	ldr	r1, [r5, #0]
 800935a:	061f      	lsls	r7, r3, #24
 800935c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009360:	d402      	bmi.n	8009368 <_printf_i+0x18c>
 8009362:	065f      	lsls	r7, r3, #25
 8009364:	bf48      	it	mi
 8009366:	b2b6      	uxthmi	r6, r6
 8009368:	07df      	lsls	r7, r3, #31
 800936a:	bf48      	it	mi
 800936c:	f043 0320 	orrmi.w	r3, r3, #32
 8009370:	6029      	str	r1, [r5, #0]
 8009372:	bf48      	it	mi
 8009374:	6023      	strmi	r3, [r4, #0]
 8009376:	b91e      	cbnz	r6, 8009380 <_printf_i+0x1a4>
 8009378:	6823      	ldr	r3, [r4, #0]
 800937a:	f023 0320 	bic.w	r3, r3, #32
 800937e:	6023      	str	r3, [r4, #0]
 8009380:	2310      	movs	r3, #16
 8009382:	e7a7      	b.n	80092d4 <_printf_i+0xf8>
 8009384:	4824      	ldr	r0, [pc, #144]	; (8009418 <_printf_i+0x23c>)
 8009386:	e7e4      	b.n	8009352 <_printf_i+0x176>
 8009388:	4615      	mov	r5, r2
 800938a:	e7bd      	b.n	8009308 <_printf_i+0x12c>
 800938c:	682b      	ldr	r3, [r5, #0]
 800938e:	6826      	ldr	r6, [r4, #0]
 8009390:	6961      	ldr	r1, [r4, #20]
 8009392:	1d18      	adds	r0, r3, #4
 8009394:	6028      	str	r0, [r5, #0]
 8009396:	0635      	lsls	r5, r6, #24
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	d501      	bpl.n	80093a0 <_printf_i+0x1c4>
 800939c:	6019      	str	r1, [r3, #0]
 800939e:	e002      	b.n	80093a6 <_printf_i+0x1ca>
 80093a0:	0670      	lsls	r0, r6, #25
 80093a2:	d5fb      	bpl.n	800939c <_printf_i+0x1c0>
 80093a4:	8019      	strh	r1, [r3, #0]
 80093a6:	2300      	movs	r3, #0
 80093a8:	6123      	str	r3, [r4, #16]
 80093aa:	4615      	mov	r5, r2
 80093ac:	e7bc      	b.n	8009328 <_printf_i+0x14c>
 80093ae:	682b      	ldr	r3, [r5, #0]
 80093b0:	1d1a      	adds	r2, r3, #4
 80093b2:	602a      	str	r2, [r5, #0]
 80093b4:	681d      	ldr	r5, [r3, #0]
 80093b6:	6862      	ldr	r2, [r4, #4]
 80093b8:	2100      	movs	r1, #0
 80093ba:	4628      	mov	r0, r5
 80093bc:	f7f6 ff18 	bl	80001f0 <memchr>
 80093c0:	b108      	cbz	r0, 80093c6 <_printf_i+0x1ea>
 80093c2:	1b40      	subs	r0, r0, r5
 80093c4:	6060      	str	r0, [r4, #4]
 80093c6:	6863      	ldr	r3, [r4, #4]
 80093c8:	6123      	str	r3, [r4, #16]
 80093ca:	2300      	movs	r3, #0
 80093cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093d0:	e7aa      	b.n	8009328 <_printf_i+0x14c>
 80093d2:	6923      	ldr	r3, [r4, #16]
 80093d4:	462a      	mov	r2, r5
 80093d6:	4649      	mov	r1, r9
 80093d8:	4640      	mov	r0, r8
 80093da:	47d0      	blx	sl
 80093dc:	3001      	adds	r0, #1
 80093de:	d0ad      	beq.n	800933c <_printf_i+0x160>
 80093e0:	6823      	ldr	r3, [r4, #0]
 80093e2:	079b      	lsls	r3, r3, #30
 80093e4:	d413      	bmi.n	800940e <_printf_i+0x232>
 80093e6:	68e0      	ldr	r0, [r4, #12]
 80093e8:	9b03      	ldr	r3, [sp, #12]
 80093ea:	4298      	cmp	r0, r3
 80093ec:	bfb8      	it	lt
 80093ee:	4618      	movlt	r0, r3
 80093f0:	e7a6      	b.n	8009340 <_printf_i+0x164>
 80093f2:	2301      	movs	r3, #1
 80093f4:	4632      	mov	r2, r6
 80093f6:	4649      	mov	r1, r9
 80093f8:	4640      	mov	r0, r8
 80093fa:	47d0      	blx	sl
 80093fc:	3001      	adds	r0, #1
 80093fe:	d09d      	beq.n	800933c <_printf_i+0x160>
 8009400:	3501      	adds	r5, #1
 8009402:	68e3      	ldr	r3, [r4, #12]
 8009404:	9903      	ldr	r1, [sp, #12]
 8009406:	1a5b      	subs	r3, r3, r1
 8009408:	42ab      	cmp	r3, r5
 800940a:	dcf2      	bgt.n	80093f2 <_printf_i+0x216>
 800940c:	e7eb      	b.n	80093e6 <_printf_i+0x20a>
 800940e:	2500      	movs	r5, #0
 8009410:	f104 0619 	add.w	r6, r4, #25
 8009414:	e7f5      	b.n	8009402 <_printf_i+0x226>
 8009416:	bf00      	nop
 8009418:	080095a1 	.word	0x080095a1
 800941c:	080095b2 	.word	0x080095b2

08009420 <memmove>:
 8009420:	4288      	cmp	r0, r1
 8009422:	b510      	push	{r4, lr}
 8009424:	eb01 0402 	add.w	r4, r1, r2
 8009428:	d902      	bls.n	8009430 <memmove+0x10>
 800942a:	4284      	cmp	r4, r0
 800942c:	4623      	mov	r3, r4
 800942e:	d807      	bhi.n	8009440 <memmove+0x20>
 8009430:	1e43      	subs	r3, r0, #1
 8009432:	42a1      	cmp	r1, r4
 8009434:	d008      	beq.n	8009448 <memmove+0x28>
 8009436:	f811 2b01 	ldrb.w	r2, [r1], #1
 800943a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800943e:	e7f8      	b.n	8009432 <memmove+0x12>
 8009440:	4402      	add	r2, r0
 8009442:	4601      	mov	r1, r0
 8009444:	428a      	cmp	r2, r1
 8009446:	d100      	bne.n	800944a <memmove+0x2a>
 8009448:	bd10      	pop	{r4, pc}
 800944a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800944e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009452:	e7f7      	b.n	8009444 <memmove+0x24>

08009454 <_sbrk_r>:
 8009454:	b538      	push	{r3, r4, r5, lr}
 8009456:	4d06      	ldr	r5, [pc, #24]	; (8009470 <_sbrk_r+0x1c>)
 8009458:	2300      	movs	r3, #0
 800945a:	4604      	mov	r4, r0
 800945c:	4608      	mov	r0, r1
 800945e:	602b      	str	r3, [r5, #0]
 8009460:	f7f7 fcaa 	bl	8000db8 <_sbrk>
 8009464:	1c43      	adds	r3, r0, #1
 8009466:	d102      	bne.n	800946e <_sbrk_r+0x1a>
 8009468:	682b      	ldr	r3, [r5, #0]
 800946a:	b103      	cbz	r3, 800946e <_sbrk_r+0x1a>
 800946c:	6023      	str	r3, [r4, #0]
 800946e:	bd38      	pop	{r3, r4, r5, pc}
 8009470:	2000b448 	.word	0x2000b448

08009474 <memcpy>:
 8009474:	440a      	add	r2, r1
 8009476:	4291      	cmp	r1, r2
 8009478:	f100 33ff 	add.w	r3, r0, #4294967295
 800947c:	d100      	bne.n	8009480 <memcpy+0xc>
 800947e:	4770      	bx	lr
 8009480:	b510      	push	{r4, lr}
 8009482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009486:	f803 4f01 	strb.w	r4, [r3, #1]!
 800948a:	4291      	cmp	r1, r2
 800948c:	d1f9      	bne.n	8009482 <memcpy+0xe>
 800948e:	bd10      	pop	{r4, pc}

08009490 <_realloc_r>:
 8009490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009494:	4680      	mov	r8, r0
 8009496:	4614      	mov	r4, r2
 8009498:	460e      	mov	r6, r1
 800949a:	b921      	cbnz	r1, 80094a6 <_realloc_r+0x16>
 800949c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094a0:	4611      	mov	r1, r2
 80094a2:	f7ff bc49 	b.w	8008d38 <_malloc_r>
 80094a6:	b92a      	cbnz	r2, 80094b4 <_realloc_r+0x24>
 80094a8:	f7ff fbda 	bl	8008c60 <_free_r>
 80094ac:	4625      	mov	r5, r4
 80094ae:	4628      	mov	r0, r5
 80094b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094b4:	f000 f81b 	bl	80094ee <_malloc_usable_size_r>
 80094b8:	4284      	cmp	r4, r0
 80094ba:	4607      	mov	r7, r0
 80094bc:	d802      	bhi.n	80094c4 <_realloc_r+0x34>
 80094be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094c2:	d812      	bhi.n	80094ea <_realloc_r+0x5a>
 80094c4:	4621      	mov	r1, r4
 80094c6:	4640      	mov	r0, r8
 80094c8:	f7ff fc36 	bl	8008d38 <_malloc_r>
 80094cc:	4605      	mov	r5, r0
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d0ed      	beq.n	80094ae <_realloc_r+0x1e>
 80094d2:	42bc      	cmp	r4, r7
 80094d4:	4622      	mov	r2, r4
 80094d6:	4631      	mov	r1, r6
 80094d8:	bf28      	it	cs
 80094da:	463a      	movcs	r2, r7
 80094dc:	f7ff ffca 	bl	8009474 <memcpy>
 80094e0:	4631      	mov	r1, r6
 80094e2:	4640      	mov	r0, r8
 80094e4:	f7ff fbbc 	bl	8008c60 <_free_r>
 80094e8:	e7e1      	b.n	80094ae <_realloc_r+0x1e>
 80094ea:	4635      	mov	r5, r6
 80094ec:	e7df      	b.n	80094ae <_realloc_r+0x1e>

080094ee <_malloc_usable_size_r>:
 80094ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094f2:	1f18      	subs	r0, r3, #4
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	bfbc      	itt	lt
 80094f8:	580b      	ldrlt	r3, [r1, r0]
 80094fa:	18c0      	addlt	r0, r0, r3
 80094fc:	4770      	bx	lr
	...

08009500 <_init>:
 8009500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009502:	bf00      	nop
 8009504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009506:	bc08      	pop	{r3}
 8009508:	469e      	mov	lr, r3
 800950a:	4770      	bx	lr

0800950c <_fini>:
 800950c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950e:	bf00      	nop
 8009510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009512:	bc08      	pop	{r3}
 8009514:	469e      	mov	lr, r3
 8009516:	4770      	bx	lr
