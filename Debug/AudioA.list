
AudioA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000994c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08009aec  08009aec  00019aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b98  08009b98  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  08009b98  08009b98  00019b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ba0  08009ba0  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ba0  08009ba0  00019ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ba4  08009ba4  00019ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  08009ba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b32c  20000150  08009cf8  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b47c  08009cf8  0002b47c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001545e  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038bd  00000000  00000000  00035621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001318  00000000  00000000  00038ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e93  00000000  00000000  0003a1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a650  00000000  00000000  0003b08b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018479  00000000  00000000  000556db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ad1d  00000000  00000000  0006db54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054a0  00000000  00000000  00108874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0010dd14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000150 	.word	0x20000150
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ad4 	.word	0x08009ad4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000154 	.word	0x20000154
 80001dc:	08009ad4 	.word	0x08009ad4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <HAL_ADC_ConvCpltCallback>:
    return kalman_adc;
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	adcConversionComplete = 1;
 8000594:	4b28      	ldr	r3, [pc, #160]	; (8000638 <HAL_ADC_ConvCpltCallback+0xac>)
 8000596:	2201      	movs	r2, #1
 8000598:	601a      	str	r2, [r3, #0]
	conv_rate++;
 800059a:	4b28      	ldr	r3, [pc, #160]	; (800063c <HAL_ADC_ConvCpltCallback+0xb0>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	3301      	adds	r3, #1
 80005a0:	4a26      	ldr	r2, [pc, #152]	; (800063c <HAL_ADC_ConvCpltCallback+0xb0>)
 80005a2:	6013      	str	r3, [r2, #0]
	ad1_audio = ad1_raw[0] / 12; //32;
 80005a4:	4b26      	ldr	r3, [pc, #152]	; (8000640 <HAL_ADC_ConvCpltCallback+0xb4>)
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	4a26      	ldr	r2, [pc, #152]	; (8000644 <HAL_ADC_ConvCpltCallback+0xb8>)
 80005ac:	fba2 2303 	umull	r2, r3, r2, r3
 80005b0:	08db      	lsrs	r3, r3, #3
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b24      	ldr	r3, [pc, #144]	; (8000648 <HAL_ADC_ConvCpltCallback+0xbc>)
 80005b8:	601a      	str	r2, [r3, #0]
	//TIM1->CCR1 = ad1_audio;

	if(buf_num == 1)
 80005ba:	4b24      	ldr	r3, [pc, #144]	; (800064c <HAL_ADC_ConvCpltCallback+0xc0>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d118      	bne.n	80005f4 <HAL_ADC_ConvCpltCallback+0x68>
	{
		if(buf_idx < 2000)
 80005c2:	4b23      	ldr	r3, [pc, #140]	; (8000650 <HAL_ADC_ConvCpltCallback+0xc4>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80005ca:	d20c      	bcs.n	80005e6 <HAL_ADC_ConvCpltCallback+0x5a>
		{
			buf1[buf_idx] = ad1_audio;
 80005cc:	4b20      	ldr	r3, [pc, #128]	; (8000650 <HAL_ADC_ConvCpltCallback+0xc4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a1d      	ldr	r2, [pc, #116]	; (8000648 <HAL_ADC_ConvCpltCallback+0xbc>)
 80005d2:	6812      	ldr	r2, [r2, #0]
 80005d4:	491f      	ldr	r1, [pc, #124]	; (8000654 <HAL_ADC_ConvCpltCallback+0xc8>)
 80005d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// <PWM OUTPUT> TIM1->CCR1 = kalman_filter(buf2[buf_idx]);
			buf_idx++;
 80005da:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <HAL_ADC_ConvCpltCallback+0xc4>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	3301      	adds	r3, #1
 80005e0:	4a1b      	ldr	r2, [pc, #108]	; (8000650 <HAL_ADC_ConvCpltCallback+0xc4>)
 80005e2:	6013      	str	r3, [r2, #0]
			buf_num = 1;
			buf_idx = 0;
		}
	}

}
 80005e4:	e022      	b.n	800062c <HAL_ADC_ConvCpltCallback+0xa0>
			buf_num = 2;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <HAL_ADC_ConvCpltCallback+0xc0>)
 80005e8:	2202      	movs	r2, #2
 80005ea:	701a      	strb	r2, [r3, #0]
			buf_idx = 0;
 80005ec:	4b18      	ldr	r3, [pc, #96]	; (8000650 <HAL_ADC_ConvCpltCallback+0xc4>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
}
 80005f2:	e01b      	b.n	800062c <HAL_ADC_ConvCpltCallback+0xa0>
	else if(buf_num == 2)
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <HAL_ADC_ConvCpltCallback+0xc0>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b02      	cmp	r3, #2
 80005fa:	d117      	bne.n	800062c <HAL_ADC_ConvCpltCallback+0xa0>
		if(buf_idx < 2000)
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <HAL_ADC_ConvCpltCallback+0xc4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000604:	d20c      	bcs.n	8000620 <HAL_ADC_ConvCpltCallback+0x94>
			buf2[buf_idx] = ad1_audio;
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <HAL_ADC_ConvCpltCallback+0xc4>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a0f      	ldr	r2, [pc, #60]	; (8000648 <HAL_ADC_ConvCpltCallback+0xbc>)
 800060c:	6812      	ldr	r2, [r2, #0]
 800060e:	4912      	ldr	r1, [pc, #72]	; (8000658 <HAL_ADC_ConvCpltCallback+0xcc>)
 8000610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			buf_idx++;
 8000614:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <HAL_ADC_ConvCpltCallback+0xc4>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <HAL_ADC_ConvCpltCallback+0xc4>)
 800061c:	6013      	str	r3, [r2, #0]
}
 800061e:	e005      	b.n	800062c <HAL_ADC_ConvCpltCallback+0xa0>
			buf_num = 1;
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <HAL_ADC_ConvCpltCallback+0xc0>)
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
			buf_idx = 0;
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <HAL_ADC_ConvCpltCallback+0xc4>)
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	200002d0 	.word	0x200002d0
 800063c:	200002d4 	.word	0x200002d4
 8000640:	200002c4 	.word	0x200002c4
 8000644:	aaaaaaab 	.word	0xaaaaaaab
 8000648:	200002d8 	.word	0x200002d8
 800064c:	20000000 	.word	0x20000000
 8000650:	200002dc 	.word	0x200002dc
 8000654:	200002e0 	.word	0x200002e0
 8000658:	20005100 	.word	0x20005100

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  uint32_t a_shot = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
  uint32_t b_shot = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066a:	f000 fc1f 	bl	8000eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066e:	f000 f855 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000672:	f000 fa1b 	bl	8000aac <MX_GPIO_Init>
  MX_DMA_Init();
 8000676:	f000 f9f9 	bl	8000a6c <MX_DMA_Init>
  MX_ADC1_Init();
 800067a:	f000 f8b9 	bl	80007f0 <MX_ADC1_Init>
  MX_TIM2_Init();
 800067e:	f000 f9a9 	bl	80009d4 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000682:	f008 f873 	bl	800876c <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000686:	f000 f905 	bl	8000894 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //HAL_DMA_Start_IT(&hdma_adc1, SrcAddress, DstAddress, DataLength);

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ad1_raw, adcChannelCount);
 800068a:	2301      	movs	r3, #1
 800068c:	461a      	mov	r2, r3
 800068e:	491b      	ldr	r1, [pc, #108]	; (80006fc <main+0xa0>)
 8000690:	481b      	ldr	r0, [pc, #108]	; (8000700 <main+0xa4>)
 8000692:	f000 fdf5 	bl	8001280 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim2);
 8000696:	481b      	ldr	r0, [pc, #108]	; (8000704 <main+0xa8>)
 8000698:	f003 feae 	bl	80043f8 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GetTick() > (a_shot + 1000))
 800069c:	f000 fc6c 	bl	8000f78 <HAL_GetTick>
 80006a0:	4602      	mov	r2, r0
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d924      	bls.n	80006f6 <main+0x9a>
	  {
		  a_shot = HAL_GetTick();
 80006ac:	f000 fc64 	bl	8000f78 <HAL_GetTick>
 80006b0:	6078      	str	r0, [r7, #4]
		  if(adcConversionComplete == 1)
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <main+0xac>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d11d      	bne.n	80006f6 <main+0x9a>
		  {
			  adcConversionComplete = 0;
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <main+0xac>)
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
			  //ad1_audio = ad1_raw[0] / 32; // map(ad1_raw[1], 0, 4096, 0, 254);
			  sprintf(strA1, "A1 - %d Rate:%d Map:%d\n", ad1_raw[0], conv_rate, ad1_audio);
 80006c0:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <main+0xa0>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	4619      	mov	r1, r3
 80006c8:	4b10      	ldr	r3, [pc, #64]	; (800070c <main+0xb0>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4b10      	ldr	r3, [pc, #64]	; (8000710 <main+0xb4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	4613      	mov	r3, r2
 80006d4:	460a      	mov	r2, r1
 80006d6:	490f      	ldr	r1, [pc, #60]	; (8000714 <main+0xb8>)
 80006d8:	480f      	ldr	r0, [pc, #60]	; (8000718 <main+0xbc>)
 80006da:	f008 fd57 	bl	800918c <siprintf>
			  CDC_Transmit_FS(strA1, strlen(strA1));
 80006de:	480e      	ldr	r0, [pc, #56]	; (8000718 <main+0xbc>)
 80006e0:	f7ff fd7e 	bl	80001e0 <strlen>
 80006e4:	4603      	mov	r3, r0
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	4619      	mov	r1, r3
 80006ea:	480b      	ldr	r0, [pc, #44]	; (8000718 <main+0xbc>)
 80006ec:	f008 f8fc 	bl	80088e8 <CDC_Transmit_FS>
			  conv_rate = 0;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <main+0xb0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
			  //But my goal is to start the conversion from the trigger of the TIM2
			  //HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ad1_raw, adcChannelCount);
		  }
	  }

	  if(HAL_GetTick() > (b_shot + 10))
 80006f6:	f000 fc3f 	bl	8000f78 <HAL_GetTick>
	  if(HAL_GetTick() > (a_shot + 1000))
 80006fa:	e7cf      	b.n	800069c <main+0x40>
 80006fc:	200002c4 	.word	0x200002c4
 8000700:	2000016c 	.word	0x2000016c
 8000704:	2000025c 	.word	0x2000025c
 8000708:	200002d0 	.word	0x200002d0
 800070c:	200002d4 	.word	0x200002d4
 8000710:	200002d8 	.word	0x200002d8
 8000714:	08009aec 	.word	0x08009aec
 8000718:	200002a4 	.word	0x200002a4

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	; 0x50
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	2230      	movs	r2, #48	; 0x30
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f008 fd4e 	bl	80091cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <SystemClock_Config+0xcc>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	4a27      	ldr	r2, [pc, #156]	; (80007e8 <SystemClock_Config+0xcc>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074e:	6413      	str	r3, [r2, #64]	; 0x40
 8000750:	4b25      	ldr	r3, [pc, #148]	; (80007e8 <SystemClock_Config+0xcc>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	4b22      	ldr	r3, [pc, #136]	; (80007ec <SystemClock_Config+0xd0>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000768:	4a20      	ldr	r2, [pc, #128]	; (80007ec <SystemClock_Config+0xd0>)
 800076a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <SystemClock_Config+0xd0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800077c:	2301      	movs	r3, #1
 800077e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000780:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000786:	2302      	movs	r3, #2
 8000788:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800078e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000790:	230f      	movs	r3, #15
 8000792:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000794:	2390      	movs	r3, #144	; 0x90
 8000796:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000798:	2304      	movs	r3, #4
 800079a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800079c:	2305      	movs	r3, #5
 800079e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 0320 	add.w	r3, r7, #32
 80007a4:	4618      	mov	r0, r3
 80007a6:	f003 f9a7 	bl	8003af8 <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007b0:	f000 f9a4 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	230f      	movs	r3, #15
 80007b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b8:	2302      	movs	r3, #2
 80007ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	2101      	movs	r1, #1
 80007d0:	4618      	mov	r0, r3
 80007d2:	f003 fc09 	bl	8003fe8 <HAL_RCC_ClockConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007dc:	f000 f98e 	bl	8000afc <Error_Handler>
  }
}
 80007e0:	bf00      	nop
 80007e2:	3750      	adds	r7, #80	; 0x50
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40007000 	.word	0x40007000

080007f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007f6:	463b      	mov	r3, r7
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000802:	4b22      	ldr	r3, [pc, #136]	; (800088c <MX_ADC1_Init+0x9c>)
 8000804:	4a22      	ldr	r2, [pc, #136]	; (8000890 <MX_ADC1_Init+0xa0>)
 8000806:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000808:	4b20      	ldr	r3, [pc, #128]	; (800088c <MX_ADC1_Init+0x9c>)
 800080a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800080e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000810:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_ADC1_Init+0x9c>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <MX_ADC1_Init+0x9c>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_ADC1_Init+0x9c>)
 800081e:	2200      	movs	r2, #0
 8000820:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_ADC1_Init+0x9c>)
 8000824:	2200      	movs	r2, #0
 8000826:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_ADC1_Init+0x9c>)
 800082c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000830:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <MX_ADC1_Init+0x9c>)
 8000834:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000838:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_ADC1_Init+0x9c>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_ADC1_Init+0x9c>)
 8000842:	2201      	movs	r2, #1
 8000844:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_ADC1_Init+0x9c>)
 8000848:	2201      	movs	r2, #1
 800084a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_ADC1_Init+0x9c>)
 8000850:	2201      	movs	r2, #1
 8000852:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000854:	480d      	ldr	r0, [pc, #52]	; (800088c <MX_ADC1_Init+0x9c>)
 8000856:	f000 fbbf 	bl	8000fd8 <HAL_ADC_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000860:	f000 f94c 	bl	8000afc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000864:	2301      	movs	r3, #1
 8000866:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000868:	2301      	movs	r3, #1
 800086a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000870:	463b      	mov	r3, r7
 8000872:	4619      	mov	r1, r3
 8000874:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_ADC1_Init+0x9c>)
 8000876:	f000 fe11 	bl	800149c <HAL_ADC_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000880:	f000 f93c 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	2000016c 	.word	0x2000016c
 8000890:	40012000 	.word	0x40012000

08000894 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b096      	sub	sp, #88	; 0x58
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]
 80008c2:	615a      	str	r2, [r3, #20]
 80008c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2220      	movs	r2, #32
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f008 fc7d 	bl	80091cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008d2:	4b3e      	ldr	r3, [pc, #248]	; (80009cc <MX_TIM1_Init+0x138>)
 80008d4:	4a3e      	ldr	r2, [pc, #248]	; (80009d0 <MX_TIM1_Init+0x13c>)
 80008d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32;
 80008d8:	4b3c      	ldr	r3, [pc, #240]	; (80009cc <MX_TIM1_Init+0x138>)
 80008da:	2220      	movs	r2, #32
 80008dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b3b      	ldr	r3, [pc, #236]	; (80009cc <MX_TIM1_Init+0x138>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 254;
 80008e4:	4b39      	ldr	r3, [pc, #228]	; (80009cc <MX_TIM1_Init+0x138>)
 80008e6:	22fe      	movs	r2, #254	; 0xfe
 80008e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ea:	4b38      	ldr	r3, [pc, #224]	; (80009cc <MX_TIM1_Init+0x138>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008f0:	4b36      	ldr	r3, [pc, #216]	; (80009cc <MX_TIM1_Init+0x138>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008f6:	4b35      	ldr	r3, [pc, #212]	; (80009cc <MX_TIM1_Init+0x138>)
 80008f8:	2280      	movs	r2, #128	; 0x80
 80008fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008fc:	4833      	ldr	r0, [pc, #204]	; (80009cc <MX_TIM1_Init+0x138>)
 80008fe:	f003 fd2b 	bl	8004358 <HAL_TIM_Base_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000908:	f000 f8f8 	bl	8000afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000910:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000912:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000916:	4619      	mov	r1, r3
 8000918:	482c      	ldr	r0, [pc, #176]	; (80009cc <MX_TIM1_Init+0x138>)
 800091a:	f003 fee3 	bl	80046e4 <HAL_TIM_ConfigClockSource>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000924:	f000 f8ea 	bl	8000afc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000928:	4828      	ldr	r0, [pc, #160]	; (80009cc <MX_TIM1_Init+0x138>)
 800092a:	f003 fdbf 	bl	80044ac <HAL_TIM_PWM_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000934:	f000 f8e2 	bl	8000afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000940:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000944:	4619      	mov	r1, r3
 8000946:	4821      	ldr	r0, [pc, #132]	; (80009cc <MX_TIM1_Init+0x138>)
 8000948:	f004 fa3a 	bl	8004dc0 <HAL_TIMEx_MasterConfigSynchronization>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000952:	f000 f8d3 	bl	8000afc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000956:	2360      	movs	r3, #96	; 0x60
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 8;
 800095a:	2308      	movs	r3, #8
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800095e:	2300      	movs	r3, #0
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000962:	2300      	movs	r3, #0
 8000964:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800096a:	2300      	movs	r3, #0
 800096c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800096e:	2300      	movs	r3, #0
 8000970:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000976:	2200      	movs	r2, #0
 8000978:	4619      	mov	r1, r3
 800097a:	4814      	ldr	r0, [pc, #80]	; (80009cc <MX_TIM1_Init+0x138>)
 800097c:	f003 fdf0 	bl	8004560 <HAL_TIM_PWM_ConfigChannel>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000986:	f000 f8b9 	bl	8000afc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800099e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	4619      	mov	r1, r3
 80009ac:	4807      	ldr	r0, [pc, #28]	; (80009cc <MX_TIM1_Init+0x138>)
 80009ae:	f004 fa75 	bl	8004e9c <HAL_TIMEx_ConfigBreakDeadTime>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80009b8:	f000 f8a0 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009bc:	4803      	ldr	r0, [pc, #12]	; (80009cc <MX_TIM1_Init+0x138>)
 80009be:	f000 f981 	bl	8000cc4 <HAL_TIM_MspPostInit>

}
 80009c2:	bf00      	nop
 80009c4:	3758      	adds	r7, #88	; 0x58
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000214 	.word	0x20000214
 80009d0:	40010000 	.word	0x40010000

080009d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e8:	463b      	mov	r3, r7
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_TIM2_Init+0x94>)
 80009f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 128;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <MX_TIM2_Init+0x94>)
 80009fa:	2280      	movs	r2, #128	; 0x80
 80009fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_TIM2_Init+0x94>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_TIM2_Init+0x94>)
 8000a06:	2232      	movs	r2, #50	; 0x32
 8000a08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_TIM2_Init+0x94>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_TIM2_Init+0x94>)
 8000a12:	2280      	movs	r2, #128	; 0x80
 8000a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a16:	4814      	ldr	r0, [pc, #80]	; (8000a68 <MX_TIM2_Init+0x94>)
 8000a18:	f003 fc9e 	bl	8004358 <HAL_TIM_Base_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000a22:	f000 f86b 	bl	8000afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a2c:	f107 0308 	add.w	r3, r7, #8
 8000a30:	4619      	mov	r1, r3
 8000a32:	480d      	ldr	r0, [pc, #52]	; (8000a68 <MX_TIM2_Init+0x94>)
 8000a34:	f003 fe56 	bl	80046e4 <HAL_TIM_ConfigClockSource>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000a3e:	f000 f85d 	bl	8000afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a42:	2320      	movs	r3, #32
 8000a44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4806      	ldr	r0, [pc, #24]	; (8000a68 <MX_TIM2_Init+0x94>)
 8000a50:	f004 f9b6 	bl	8004dc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000a5a:	f000 f84f 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	2000025c 	.word	0x2000025c

08000a6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_DMA_Init+0x3c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a0b      	ldr	r2, [pc, #44]	; (8000aa8 <MX_DMA_Init+0x3c>)
 8000a7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_DMA_Init+0x3c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2100      	movs	r1, #0
 8000a92:	2038      	movs	r0, #56	; 0x38
 8000a94:	f001 f887 	bl	8001ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a98:	2038      	movs	r0, #56	; 0x38
 8000a9a:	f001 f8a0 	bl	8001bde <HAL_NVIC_EnableIRQ>

}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800

08000aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <MX_GPIO_Init+0x4c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a0f      	ldr	r2, [pc, #60]	; (8000af8 <MX_GPIO_Init+0x4c>)
 8000abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <MX_GPIO_Init+0x4c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_GPIO_Init+0x4c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <MX_GPIO_Init+0x4c>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_GPIO_Init+0x4c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <Error_Handler+0x8>
	...

08000b08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	4a0f      	ldr	r2, [pc, #60]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a33      	ldr	r2, [pc, #204]	; (8000c44 <HAL_ADC_MspInit+0xec>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d15f      	bne.n	8000c3a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b32      	ldr	r3, [pc, #200]	; (8000c48 <HAL_ADC_MspInit+0xf0>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	4a31      	ldr	r2, [pc, #196]	; (8000c48 <HAL_ADC_MspInit+0xf0>)
 8000b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b88:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8a:	4b2f      	ldr	r3, [pc, #188]	; (8000c48 <HAL_ADC_MspInit+0xf0>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b2b      	ldr	r3, [pc, #172]	; (8000c48 <HAL_ADC_MspInit+0xf0>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a2a      	ldr	r2, [pc, #168]	; (8000c48 <HAL_ADC_MspInit+0xf0>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <HAL_ADC_MspInit+0xf0>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4821      	ldr	r0, [pc, #132]	; (8000c4c <HAL_ADC_MspInit+0xf4>)
 8000bc6:	f001 fb95 	bl	80022f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000bca:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <HAL_ADC_MspInit+0xf8>)
 8000bcc:	4a21      	ldr	r2, [pc, #132]	; (8000c54 <HAL_ADC_MspInit+0xfc>)
 8000bce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <HAL_ADC_MspInit+0xf8>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <HAL_ADC_MspInit+0xf8>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <HAL_ADC_MspInit+0xf8>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000be2:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <HAL_ADC_MspInit+0xf8>)
 8000be4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000be8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <HAL_ADC_MspInit+0xf8>)
 8000bec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bf0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bf2:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <HAL_ADC_MspInit+0xf8>)
 8000bf4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bf8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <HAL_ADC_MspInit+0xf8>)
 8000bfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c00:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <HAL_ADC_MspInit+0xf8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <HAL_ADC_MspInit+0xf8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c0e:	4810      	ldr	r0, [pc, #64]	; (8000c50 <HAL_ADC_MspInit+0xf8>)
 8000c10:	f001 f800 	bl	8001c14 <HAL_DMA_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000c1a:	f7ff ff6f 	bl	8000afc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <HAL_ADC_MspInit+0xf8>)
 8000c22:	639a      	str	r2, [r3, #56]	; 0x38
 8000c24:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <HAL_ADC_MspInit+0xf8>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	2012      	movs	r0, #18
 8000c30:	f000 ffb9 	bl	8001ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000c34:	2012      	movs	r0, #18
 8000c36:	f000 ffd2 	bl	8001bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	3728      	adds	r7, #40	; 0x28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40012000 	.word	0x40012000
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	200001b4 	.word	0x200001b4
 8000c54:	40026410 	.word	0x40026410

08000c58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a15      	ldr	r2, [pc, #84]	; (8000cbc <HAL_TIM_Base_MspInit+0x64>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d10e      	bne.n	8000c88 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <HAL_TIM_Base_MspInit+0x68>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <HAL_TIM_Base_MspInit+0x68>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <HAL_TIM_Base_MspInit+0x68>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c86:	e012      	b.n	8000cae <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c90:	d10d      	bne.n	8000cae <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <HAL_TIM_Base_MspInit+0x68>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a09      	ldr	r2, [pc, #36]	; (8000cc0 <HAL_TIM_Base_MspInit+0x68>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <HAL_TIM_Base_MspInit+0x68>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
}
 8000cae:	bf00      	nop
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40010000 	.word	0x40010000
 8000cc0:	40023800 	.word	0x40023800

08000cc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <HAL_TIM_MspPostInit+0x68>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d11e      	bne.n	8000d24 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_TIM_MspPostInit+0x6c>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a10      	ldr	r2, [pc, #64]	; (8000d30 <HAL_TIM_MspPostInit+0x6c>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <HAL_TIM_MspPostInit+0x6c>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <HAL_TIM_MspPostInit+0x70>)
 8000d20:	f001 fae8 	bl	80022f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d24:	bf00      	nop
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40010000 	.word	0x40010000
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020000 	.word	0x40020000

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <NMI_Handler+0x4>

08000d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d84:	f000 f8e4 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <ADC_IRQHandler+0x10>)
 8000d92:	f000 f964 	bl	800105e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000016c 	.word	0x2000016c

08000da0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <DMA2_Stream0_IRQHandler+0x10>)
 8000da6:	f001 f83b 	bl	8001e20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200001b4 	.word	0x200001b4

08000db4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000db8:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <OTG_FS_IRQHandler+0x10>)
 8000dba:	f001 fd6f 	bl	800289c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	2000ac08 	.word	0x2000ac08

08000dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd0:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <_sbrk+0x5c>)
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <_sbrk+0x60>)
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ddc:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d102      	bne.n	8000dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <_sbrk+0x64>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <_sbrk+0x68>)
 8000de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d207      	bcs.n	8000e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df8:	f008 f9f0 	bl	80091dc <__errno>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	220c      	movs	r2, #12
 8000e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	e009      	b.n	8000e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0e:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <_sbrk+0x64>)
 8000e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20010000 	.word	0x20010000
 8000e28:	00000400 	.word	0x00000400
 8000e2c:	20009f20 	.word	0x20009f20
 8000e30:	2000b480 	.word	0x2000b480

08000e34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <SystemInit+0x20>)
 8000e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <SystemInit+0x20>)
 8000e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e5c:	480d      	ldr	r0, [pc, #52]	; (8000e94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e5e:	490e      	ldr	r1, [pc, #56]	; (8000e98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e60:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e74:	4c0b      	ldr	r4, [pc, #44]	; (8000ea4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e82:	f7ff ffd7 	bl	8000e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e86:	f008 f9af 	bl	80091e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8a:	f7ff fbe7 	bl	800065c <main>
  bx  lr    
 8000e8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e90:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e98:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8000e9c:	08009ba8 	.word	0x08009ba8
  ldr r2, =_sbss
 8000ea0:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000ea4:	2000b47c 	.word	0x2000b47c

08000ea8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <DMA1_Stream0_IRQHandler>
	...

08000eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <HAL_Init+0x40>)
 8000eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <HAL_Init+0x40>)
 8000ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_Init+0x40>)
 8000ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f000 fe5b 	bl	8001b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eda:	200f      	movs	r0, #15
 8000edc:	f000 f808 	bl	8000ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee0:	f7ff fe12 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023c00 	.word	0x40023c00

08000ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_InitTick+0x54>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_InitTick+0x58>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fe73 	bl	8001bfa <HAL_SYSTICK_Config>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00e      	b.n	8000f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d80a      	bhi.n	8000f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f000 fe3b 	bl	8001ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f30:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <HAL_InitTick+0x5c>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e000      	b.n	8000f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000004 	.word	0x20000004
 8000f48:	2000000c 	.word	0x2000000c
 8000f4c:	20000008 	.word	0x20000008

08000f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	2000000c 	.word	0x2000000c
 8000f74:	20009f24 	.word	0x20009f24

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20009f24 	.word	0x20009f24

08000f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff ffee 	bl	8000f78 <HAL_GetTick>
 8000f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa8:	d005      	beq.n	8000fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_Delay+0x44>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb6:	bf00      	nop
 8000fb8:	f7ff ffde 	bl	8000f78 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d8f7      	bhi.n	8000fb8 <HAL_Delay+0x28>
  {
  }
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2000000c 	.word	0x2000000c

08000fd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e033      	b.n	8001056 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d109      	bne.n	800100a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff fdae 	bl	8000b58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f003 0310 	and.w	r3, r3, #16
 8001012:	2b00      	cmp	r3, #0
 8001014:	d118      	bne.n	8001048 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800101e:	f023 0302 	bic.w	r3, r3, #2
 8001022:	f043 0202 	orr.w	r2, r3, #2
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 fb58 	bl	80016e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f023 0303 	bic.w	r3, r3, #3
 800103e:	f043 0201 	orr.w	r2, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	641a      	str	r2, [r3, #64]	; 0x40
 8001046:	e001      	b.n	800104c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001054:	7bfb      	ldrb	r3, [r7, #15]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	f003 0320 	and.w	r3, r3, #32
 800108c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d049      	beq.n	8001128 <HAL_ADC_IRQHandler+0xca>
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d046      	beq.n	8001128 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f003 0310 	and.w	r3, r3, #16
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d105      	bne.n	80010b2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d12b      	bne.n	8001118 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d127      	bne.n	8001118 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d006      	beq.n	80010e4 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d119      	bne.n	8001118 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 0220 	bic.w	r2, r2, #32
 80010f2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d105      	bne.n	8001118 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f043 0201 	orr.w	r2, r3, #1
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff fa37 	bl	800058c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f06f 0212 	mvn.w	r2, #18
 8001126:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001136:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d057      	beq.n	80011ee <HAL_ADC_IRQHandler+0x190>
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d054      	beq.n	80011ee <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	f003 0310 	and.w	r3, r3, #16
 800114c:	2b00      	cmp	r3, #0
 800114e:	d105      	bne.n	800115c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d139      	bne.n	80011de <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001170:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001174:	2b00      	cmp	r3, #0
 8001176:	d006      	beq.n	8001186 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001182:	2b00      	cmp	r3, #0
 8001184:	d12b      	bne.n	80011de <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001190:	2b00      	cmp	r3, #0
 8001192:	d124      	bne.n	80011de <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d11d      	bne.n	80011de <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d119      	bne.n	80011de <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011b8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d105      	bne.n	80011de <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f043 0201 	orr.w	r2, r3, #1
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 fbfc 	bl	80019dc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f06f 020c 	mvn.w	r2, #12
 80011ec:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011fc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d017      	beq.n	8001234 <HAL_ADC_IRQHandler+0x1d6>
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d014      	beq.n	8001234 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	2b01      	cmp	r3, #1
 8001216:	d10d      	bne.n	8001234 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f000 f925 	bl	8001474 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f06f 0201 	mvn.w	r2, #1
 8001232:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f003 0320 	and.w	r3, r3, #32
 800123a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001242:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d015      	beq.n	8001276 <HAL_ADC_IRQHandler+0x218>
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d012      	beq.n	8001276 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001254:	f043 0202 	orr.w	r2, r3, #2
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f06f 0220 	mvn.w	r2, #32
 8001264:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 f90e 	bl	8001488 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f06f 0220 	mvn.w	r2, #32
 8001274:	601a      	str	r2, [r3, #0]
  }
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001296:	2b01      	cmp	r3, #1
 8001298:	d101      	bne.n	800129e <HAL_ADC_Start_DMA+0x1e>
 800129a:	2302      	movs	r3, #2
 800129c:	e0ce      	b.n	800143c <HAL_ADC_Start_DMA+0x1bc>
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d018      	beq.n	80012e6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f042 0201 	orr.w	r2, r2, #1
 80012c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012c4:	4b5f      	ldr	r3, [pc, #380]	; (8001444 <HAL_ADC_Start_DMA+0x1c4>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a5f      	ldr	r2, [pc, #380]	; (8001448 <HAL_ADC_Start_DMA+0x1c8>)
 80012ca:	fba2 2303 	umull	r2, r3, r2, r3
 80012ce:	0c9a      	lsrs	r2, r3, #18
 80012d0:	4613      	mov	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80012d8:	e002      	b.n	80012e0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	3b01      	subs	r3, #1
 80012de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f9      	bne.n	80012da <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012f4:	d107      	bne.n	8001306 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001304:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b01      	cmp	r3, #1
 8001312:	f040 8086 	bne.w	8001422 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800131e:	f023 0301 	bic.w	r3, r3, #1
 8001322:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001334:	2b00      	cmp	r3, #0
 8001336:	d007      	beq.n	8001348 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001340:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001354:	d106      	bne.n	8001364 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	f023 0206 	bic.w	r2, r3, #6
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	645a      	str	r2, [r3, #68]	; 0x44
 8001362:	e002      	b.n	800136a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2200      	movs	r2, #0
 8001368:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001372:	4b36      	ldr	r3, [pc, #216]	; (800144c <HAL_ADC_Start_DMA+0x1cc>)
 8001374:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137a:	4a35      	ldr	r2, [pc, #212]	; (8001450 <HAL_ADC_Start_DMA+0x1d0>)
 800137c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001382:	4a34      	ldr	r2, [pc, #208]	; (8001454 <HAL_ADC_Start_DMA+0x1d4>)
 8001384:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800138a:	4a33      	ldr	r2, [pc, #204]	; (8001458 <HAL_ADC_Start_DMA+0x1d8>)
 800138c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001396:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80013a6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013b6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	334c      	adds	r3, #76	; 0x4c
 80013c2:	4619      	mov	r1, r3
 80013c4:	68ba      	ldr	r2, [r7, #8]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f000 fcd2 	bl	8001d70 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 031f 	and.w	r3, r3, #31
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d10f      	bne.n	80013f8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d129      	bne.n	800143a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	e020      	b.n	800143a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a17      	ldr	r2, [pc, #92]	; (800145c <HAL_ADC_Start_DMA+0x1dc>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d11b      	bne.n	800143a <HAL_ADC_Start_DMA+0x1ba>
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d114      	bne.n	800143a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	e00b      	b.n	800143a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f043 0210 	orr.w	r2, r3, #16
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f043 0201 	orr.w	r2, r3, #1
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000004 	.word	0x20000004
 8001448:	431bde83 	.word	0x431bde83
 800144c:	40012300 	.word	0x40012300
 8001450:	080018d9 	.word	0x080018d9
 8001454:	08001993 	.word	0x08001993
 8001458:	080019af 	.word	0x080019af
 800145c:	40012000 	.word	0x40012000

08001460 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d101      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x1c>
 80014b4:	2302      	movs	r3, #2
 80014b6:	e105      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x228>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b09      	cmp	r3, #9
 80014c6:	d925      	bls.n	8001514 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68d9      	ldr	r1, [r3, #12]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	4613      	mov	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4413      	add	r3, r2
 80014dc:	3b1e      	subs	r3, #30
 80014de:	2207      	movs	r2, #7
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43da      	mvns	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	400a      	ands	r2, r1
 80014ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68d9      	ldr	r1, [r3, #12]
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	4603      	mov	r3, r0
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4403      	add	r3, r0
 8001506:	3b1e      	subs	r3, #30
 8001508:	409a      	lsls	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	430a      	orrs	r2, r1
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	e022      	b.n	800155a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6919      	ldr	r1, [r3, #16]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	b29b      	uxth	r3, r3
 8001520:	461a      	mov	r2, r3
 8001522:	4613      	mov	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	4413      	add	r3, r2
 8001528:	2207      	movs	r2, #7
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43da      	mvns	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	400a      	ands	r2, r1
 8001536:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6919      	ldr	r1, [r3, #16]
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	b29b      	uxth	r3, r3
 8001548:	4618      	mov	r0, r3
 800154a:	4603      	mov	r3, r0
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4403      	add	r3, r0
 8001550:	409a      	lsls	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b06      	cmp	r3, #6
 8001560:	d824      	bhi.n	80015ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	4613      	mov	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	3b05      	subs	r3, #5
 8001574:	221f      	movs	r2, #31
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43da      	mvns	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	400a      	ands	r2, r1
 8001582:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	b29b      	uxth	r3, r3
 8001590:	4618      	mov	r0, r3
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	3b05      	subs	r3, #5
 800159e:	fa00 f203 	lsl.w	r2, r0, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	635a      	str	r2, [r3, #52]	; 0x34
 80015aa:	e04c      	b.n	8001646 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b0c      	cmp	r3, #12
 80015b2:	d824      	bhi.n	80015fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	3b23      	subs	r3, #35	; 0x23
 80015c6:	221f      	movs	r2, #31
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43da      	mvns	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	400a      	ands	r2, r1
 80015d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	3b23      	subs	r3, #35	; 0x23
 80015f0:	fa00 f203 	lsl.w	r2, r0, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	631a      	str	r2, [r3, #48]	; 0x30
 80015fc:	e023      	b.n	8001646 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	3b41      	subs	r3, #65	; 0x41
 8001610:	221f      	movs	r2, #31
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	400a      	ands	r2, r1
 800161e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	b29b      	uxth	r3, r3
 800162c:	4618      	mov	r0, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	4613      	mov	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	3b41      	subs	r3, #65	; 0x41
 800163a:	fa00 f203 	lsl.w	r2, r0, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001646:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <HAL_ADC_ConfigChannel+0x234>)
 8001648:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a21      	ldr	r2, [pc, #132]	; (80016d4 <HAL_ADC_ConfigChannel+0x238>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d109      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x1cc>
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b12      	cmp	r3, #18
 800165a:	d105      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <HAL_ADC_ConfigChannel+0x238>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d123      	bne.n	80016ba <HAL_ADC_ConfigChannel+0x21e>
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b10      	cmp	r3, #16
 8001678:	d003      	beq.n	8001682 <HAL_ADC_ConfigChannel+0x1e6>
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b11      	cmp	r3, #17
 8001680:	d11b      	bne.n	80016ba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b10      	cmp	r3, #16
 8001694:	d111      	bne.n	80016ba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <HAL_ADC_ConfigChannel+0x23c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a10      	ldr	r2, [pc, #64]	; (80016dc <HAL_ADC_ConfigChannel+0x240>)
 800169c:	fba2 2303 	umull	r2, r3, r2, r3
 80016a0:	0c9a      	lsrs	r2, r3, #18
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016ac:	e002      	b.n	80016b4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f9      	bne.n	80016ae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	40012300 	.word	0x40012300
 80016d4:	40012000 	.word	0x40012000
 80016d8:	20000004 	.word	0x20000004
 80016dc:	431bde83 	.word	0x431bde83

080016e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016e8:	4b79      	ldr	r3, [pc, #484]	; (80018d0 <ADC_Init+0x1f0>)
 80016ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	431a      	orrs	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001714:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6859      	ldr	r1, [r3, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	021a      	lsls	r2, r3, #8
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001738:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6859      	ldr	r1, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800175a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6899      	ldr	r1, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68da      	ldr	r2, [r3, #12]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001772:	4a58      	ldr	r2, [pc, #352]	; (80018d4 <ADC_Init+0x1f4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d022      	beq.n	80017be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001786:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6899      	ldr	r1, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6899      	ldr	r1, [r3, #8]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	e00f      	b.n	80017de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0202 	bic.w	r2, r2, #2
 80017ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6899      	ldr	r1, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7e1b      	ldrb	r3, [r3, #24]
 80017f8:	005a      	lsls	r2, r3, #1
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d01b      	beq.n	8001844 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800181a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800182a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6859      	ldr	r1, [r3, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	3b01      	subs	r3, #1
 8001838:	035a      	lsls	r2, r3, #13
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	e007      	b.n	8001854 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001852:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001862:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	3b01      	subs	r3, #1
 8001870:	051a      	lsls	r2, r3, #20
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001888:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6899      	ldr	r1, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001896:	025a      	lsls	r2, r3, #9
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6899      	ldr	r1, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	029a      	lsls	r2, r3, #10
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	609a      	str	r2, [r3, #8]
}
 80018c4:	bf00      	nop
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	40012300 	.word	0x40012300
 80018d4:	0f000001 	.word	0x0f000001

080018d8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d13c      	bne.n	800196c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d12b      	bne.n	8001964 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001910:	2b00      	cmp	r3, #0
 8001912:	d127      	bne.n	8001964 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800191e:	2b00      	cmp	r3, #0
 8001920:	d006      	beq.n	8001930 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800192c:	2b00      	cmp	r3, #0
 800192e:	d119      	bne.n	8001964 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0220 	bic.w	r2, r2, #32
 800193e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d105      	bne.n	8001964 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	f043 0201 	orr.w	r2, r3, #1
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f7fe fe11 	bl	800058c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800196a:	e00e      	b.n	800198a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	f7ff fd85 	bl	8001488 <HAL_ADC_ErrorCallback>
}
 800197e:	e004      	b.n	800198a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	4798      	blx	r3
}
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b084      	sub	sp, #16
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f7ff fd5d 	bl	8001460 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b084      	sub	sp, #16
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ba:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2240      	movs	r2, #64	; 0x40
 80019c0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	f043 0204 	orr.w	r2, r3, #4
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f7ff fd5a 	bl	8001488 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a22:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	60d3      	str	r3, [r2, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <__NVIC_GetPriorityGrouping+0x18>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	f003 0307 	and.w	r3, r3, #7
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	db0b      	blt.n	8001a7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	f003 021f 	and.w	r2, r3, #31
 8001a6c:	4907      	ldr	r1, [pc, #28]	; (8001a8c <__NVIC_EnableIRQ+0x38>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	2001      	movs	r0, #1
 8001a76:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000e100 	.word	0xe000e100

08001a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	db0a      	blt.n	8001aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	490c      	ldr	r1, [pc, #48]	; (8001adc <__NVIC_SetPriority+0x4c>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	0112      	lsls	r2, r2, #4
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab8:	e00a      	b.n	8001ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4908      	ldr	r1, [pc, #32]	; (8001ae0 <__NVIC_SetPriority+0x50>)
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	3b04      	subs	r3, #4
 8001ac8:	0112      	lsls	r2, r2, #4
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	440b      	add	r3, r1
 8001ace:	761a      	strb	r2, [r3, #24]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000e100 	.word	0xe000e100
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f1c3 0307 	rsb	r3, r3, #7
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	bf28      	it	cs
 8001b02:	2304      	movcs	r3, #4
 8001b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d902      	bls.n	8001b14 <NVIC_EncodePriority+0x30>
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3b03      	subs	r3, #3
 8001b12:	e000      	b.n	8001b16 <NVIC_EncodePriority+0x32>
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	f04f 32ff 	mov.w	r2, #4294967295
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43da      	mvns	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	401a      	ands	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	43d9      	mvns	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	4313      	orrs	r3, r2
         );
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3724      	adds	r7, #36	; 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b5c:	d301      	bcc.n	8001b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e00f      	b.n	8001b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b62:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <SysTick_Config+0x40>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6a:	210f      	movs	r1, #15
 8001b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b70:	f7ff ff8e 	bl	8001a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <SysTick_Config+0x40>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7a:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <SysTick_Config+0x40>)
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	e000e010 	.word	0xe000e010

08001b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff ff29 	bl	80019f0 <__NVIC_SetPriorityGrouping>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b086      	sub	sp, #24
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb8:	f7ff ff3e 	bl	8001a38 <__NVIC_GetPriorityGrouping>
 8001bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	6978      	ldr	r0, [r7, #20]
 8001bc4:	f7ff ff8e 	bl	8001ae4 <NVIC_EncodePriority>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff5d 	bl	8001a90 <__NVIC_SetPriority>
}
 8001bd6:	bf00      	nop
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff31 	bl	8001a54 <__NVIC_EnableIRQ>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff ffa2 	bl	8001b4c <SysTick_Config>
 8001c08:	4603      	mov	r3, r0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c20:	f7ff f9aa 	bl	8000f78 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e099      	b.n	8001d64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0201 	bic.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c50:	e00f      	b.n	8001c72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c52:	f7ff f991 	bl	8000f78 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b05      	cmp	r3, #5
 8001c5e:	d908      	bls.n	8001c72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2220      	movs	r2, #32
 8001c64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2203      	movs	r2, #3
 8001c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e078      	b.n	8001d64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1e8      	bne.n	8001c52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <HAL_DMA_Init+0x158>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001caa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d107      	bne.n	8001cdc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f023 0307 	bic.w	r3, r3, #7
 8001cf2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d117      	bne.n	8001d36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00e      	beq.n	8001d36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 fa6f 	bl	80021fc <DMA_CheckFifoParam>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d008      	beq.n	8001d36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2240      	movs	r2, #64	; 0x40
 8001d28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d32:	2301      	movs	r3, #1
 8001d34:	e016      	b.n	8001d64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 fa26 	bl	8002190 <DMA_CalcBaseAndBitshift>
 8001d44:	4603      	mov	r3, r0
 8001d46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4c:	223f      	movs	r2, #63	; 0x3f
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	f010803f 	.word	0xf010803f

08001d70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
 8001d7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d101      	bne.n	8001d96 <HAL_DMA_Start_IT+0x26>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e040      	b.n	8001e18 <HAL_DMA_Start_IT+0xa8>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d12f      	bne.n	8001e0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2202      	movs	r2, #2
 8001dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f000 f9b8 	bl	8002134 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc8:	223f      	movs	r2, #63	; 0x3f
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0216 	orr.w	r2, r2, #22
 8001dde:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d007      	beq.n	8001df8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0208 	orr.w	r2, r2, #8
 8001df6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0201 	orr.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	e005      	b.n	8001e16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e12:	2302      	movs	r3, #2
 8001e14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e2c:	4b8e      	ldr	r3, [pc, #568]	; (8002068 <HAL_DMA_IRQHandler+0x248>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a8e      	ldr	r2, [pc, #568]	; (800206c <HAL_DMA_IRQHandler+0x24c>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	0a9b      	lsrs	r3, r3, #10
 8001e38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4a:	2208      	movs	r2, #8
 8001e4c:	409a      	lsls	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d01a      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d013      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0204 	bic.w	r2, r2, #4
 8001e72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e78:	2208      	movs	r2, #8
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e84:	f043 0201 	orr.w	r2, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e90:	2201      	movs	r2, #1
 8001e92:	409a      	lsls	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d012      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00b      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eae:	2201      	movs	r2, #1
 8001eb0:	409a      	lsls	r2, r3
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eba:	f043 0202 	orr.w	r2, r3, #2
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec6:	2204      	movs	r2, #4
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d012      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00b      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef0:	f043 0204 	orr.w	r2, r3, #4
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efc:	2210      	movs	r2, #16
 8001efe:	409a      	lsls	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d043      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d03c      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1a:	2210      	movs	r2, #16
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d018      	beq.n	8001f62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d108      	bne.n	8001f50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d024      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	4798      	blx	r3
 8001f4e:	e01f      	b.n	8001f90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d01b      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	4798      	blx	r3
 8001f60:	e016      	b.n	8001f90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d107      	bne.n	8001f80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0208 	bic.w	r2, r2, #8
 8001f7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f94:	2220      	movs	r2, #32
 8001f96:	409a      	lsls	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 808f 	beq.w	80020c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0310 	and.w	r3, r3, #16
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 8087 	beq.w	80020c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b05      	cmp	r3, #5
 8001fc8:	d136      	bne.n	8002038 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0216 	bic.w	r2, r2, #22
 8001fd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	695a      	ldr	r2, [r3, #20]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fe8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d103      	bne.n	8001ffa <HAL_DMA_IRQHandler+0x1da>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d007      	beq.n	800200a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0208 	bic.w	r2, r2, #8
 8002008:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200e:	223f      	movs	r2, #63	; 0x3f
 8002010:	409a      	lsls	r2, r3
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800202a:	2b00      	cmp	r3, #0
 800202c:	d07e      	beq.n	800212c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	4798      	blx	r3
        }
        return;
 8002036:	e079      	b.n	800212c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d01d      	beq.n	8002082 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10d      	bne.n	8002070 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002058:	2b00      	cmp	r3, #0
 800205a:	d031      	beq.n	80020c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	4798      	blx	r3
 8002064:	e02c      	b.n	80020c0 <HAL_DMA_IRQHandler+0x2a0>
 8002066:	bf00      	nop
 8002068:	20000004 	.word	0x20000004
 800206c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002074:	2b00      	cmp	r3, #0
 8002076:	d023      	beq.n	80020c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	4798      	blx	r3
 8002080:	e01e      	b.n	80020c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10f      	bne.n	80020b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0210 	bic.w	r2, r2, #16
 800209e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d032      	beq.n	800212e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d022      	beq.n	800211a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2205      	movs	r2, #5
 80020d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	3301      	adds	r3, #1
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d307      	bcc.n	8002108 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f2      	bne.n	80020ec <HAL_DMA_IRQHandler+0x2cc>
 8002106:	e000      	b.n	800210a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002108:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211e:	2b00      	cmp	r3, #0
 8002120:	d005      	beq.n	800212e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	4798      	blx	r3
 800212a:	e000      	b.n	800212e <HAL_DMA_IRQHandler+0x30e>
        return;
 800212c:	bf00      	nop
    }
  }
}
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002150:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b40      	cmp	r3, #64	; 0x40
 8002160:	d108      	bne.n	8002174 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002172:	e007      	b.n	8002184 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68ba      	ldr	r2, [r7, #8]
 800217a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	60da      	str	r2, [r3, #12]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	3b10      	subs	r3, #16
 80021a0:	4a14      	ldr	r2, [pc, #80]	; (80021f4 <DMA_CalcBaseAndBitshift+0x64>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	091b      	lsrs	r3, r3, #4
 80021a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021aa:	4a13      	ldr	r2, [pc, #76]	; (80021f8 <DMA_CalcBaseAndBitshift+0x68>)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4413      	add	r3, r2
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	d909      	bls.n	80021d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021c6:	f023 0303 	bic.w	r3, r3, #3
 80021ca:	1d1a      	adds	r2, r3, #4
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	659a      	str	r2, [r3, #88]	; 0x58
 80021d0:	e007      	b.n	80021e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021da:	f023 0303 	bic.w	r3, r3, #3
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	aaaaaaab 	.word	0xaaaaaaab
 80021f8:	08009b5c 	.word	0x08009b5c

080021fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d11f      	bne.n	8002256 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2b03      	cmp	r3, #3
 800221a:	d856      	bhi.n	80022ca <DMA_CheckFifoParam+0xce>
 800221c:	a201      	add	r2, pc, #4	; (adr r2, 8002224 <DMA_CheckFifoParam+0x28>)
 800221e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002222:	bf00      	nop
 8002224:	08002235 	.word	0x08002235
 8002228:	08002247 	.word	0x08002247
 800222c:	08002235 	.word	0x08002235
 8002230:	080022cb 	.word	0x080022cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002238:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d046      	beq.n	80022ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002244:	e043      	b.n	80022ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800224e:	d140      	bne.n	80022d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002254:	e03d      	b.n	80022d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800225e:	d121      	bne.n	80022a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	2b03      	cmp	r3, #3
 8002264:	d837      	bhi.n	80022d6 <DMA_CheckFifoParam+0xda>
 8002266:	a201      	add	r2, pc, #4	; (adr r2, 800226c <DMA_CheckFifoParam+0x70>)
 8002268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226c:	0800227d 	.word	0x0800227d
 8002270:	08002283 	.word	0x08002283
 8002274:	0800227d 	.word	0x0800227d
 8002278:	08002295 	.word	0x08002295
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
      break;
 8002280:	e030      	b.n	80022e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002286:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d025      	beq.n	80022da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002292:	e022      	b.n	80022da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800229c:	d11f      	bne.n	80022de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022a2:	e01c      	b.n	80022de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d903      	bls.n	80022b2 <DMA_CheckFifoParam+0xb6>
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d003      	beq.n	80022b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022b0:	e018      	b.n	80022e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	73fb      	strb	r3, [r7, #15]
      break;
 80022b6:	e015      	b.n	80022e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00e      	beq.n	80022e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	73fb      	strb	r3, [r7, #15]
      break;
 80022c8:	e00b      	b.n	80022e2 <DMA_CheckFifoParam+0xe6>
      break;
 80022ca:	bf00      	nop
 80022cc:	e00a      	b.n	80022e4 <DMA_CheckFifoParam+0xe8>
      break;
 80022ce:	bf00      	nop
 80022d0:	e008      	b.n	80022e4 <DMA_CheckFifoParam+0xe8>
      break;
 80022d2:	bf00      	nop
 80022d4:	e006      	b.n	80022e4 <DMA_CheckFifoParam+0xe8>
      break;
 80022d6:	bf00      	nop
 80022d8:	e004      	b.n	80022e4 <DMA_CheckFifoParam+0xe8>
      break;
 80022da:	bf00      	nop
 80022dc:	e002      	b.n	80022e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80022de:	bf00      	nop
 80022e0:	e000      	b.n	80022e4 <DMA_CheckFifoParam+0xe8>
      break;
 80022e2:	bf00      	nop
    }
  } 
  
  return status; 
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop

080022f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b089      	sub	sp, #36	; 0x24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002306:	2300      	movs	r3, #0
 8002308:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
 800230e:	e159      	b.n	80025c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002310:	2201      	movs	r2, #1
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	4013      	ands	r3, r2
 8002322:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	429a      	cmp	r2, r3
 800232a:	f040 8148 	bne.w	80025be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	2b01      	cmp	r3, #1
 8002338:	d005      	beq.n	8002346 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002342:	2b02      	cmp	r3, #2
 8002344:	d130      	bne.n	80023a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	2203      	movs	r2, #3
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4013      	ands	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800237c:	2201      	movs	r2, #1
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	091b      	lsrs	r3, r3, #4
 8002392:	f003 0201 	and.w	r2, r3, #1
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d017      	beq.n	80023e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	2203      	movs	r2, #3
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d123      	bne.n	8002438 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	08da      	lsrs	r2, r3, #3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3208      	adds	r2, #8
 80023f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	220f      	movs	r2, #15
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	08da      	lsrs	r2, r3, #3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3208      	adds	r2, #8
 8002432:	69b9      	ldr	r1, [r7, #24]
 8002434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	2203      	movs	r2, #3
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0203 	and.w	r2, r3, #3
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 80a2 	beq.w	80025be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	4b57      	ldr	r3, [pc, #348]	; (80025dc <HAL_GPIO_Init+0x2e8>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	4a56      	ldr	r2, [pc, #344]	; (80025dc <HAL_GPIO_Init+0x2e8>)
 8002484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002488:	6453      	str	r3, [r2, #68]	; 0x44
 800248a:	4b54      	ldr	r3, [pc, #336]	; (80025dc <HAL_GPIO_Init+0x2e8>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002496:	4a52      	ldr	r2, [pc, #328]	; (80025e0 <HAL_GPIO_Init+0x2ec>)
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	089b      	lsrs	r3, r3, #2
 800249c:	3302      	adds	r3, #2
 800249e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	220f      	movs	r2, #15
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a49      	ldr	r2, [pc, #292]	; (80025e4 <HAL_GPIO_Init+0x2f0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d019      	beq.n	80024f6 <HAL_GPIO_Init+0x202>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a48      	ldr	r2, [pc, #288]	; (80025e8 <HAL_GPIO_Init+0x2f4>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d013      	beq.n	80024f2 <HAL_GPIO_Init+0x1fe>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a47      	ldr	r2, [pc, #284]	; (80025ec <HAL_GPIO_Init+0x2f8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d00d      	beq.n	80024ee <HAL_GPIO_Init+0x1fa>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a46      	ldr	r2, [pc, #280]	; (80025f0 <HAL_GPIO_Init+0x2fc>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d007      	beq.n	80024ea <HAL_GPIO_Init+0x1f6>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a45      	ldr	r2, [pc, #276]	; (80025f4 <HAL_GPIO_Init+0x300>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d101      	bne.n	80024e6 <HAL_GPIO_Init+0x1f2>
 80024e2:	2304      	movs	r3, #4
 80024e4:	e008      	b.n	80024f8 <HAL_GPIO_Init+0x204>
 80024e6:	2307      	movs	r3, #7
 80024e8:	e006      	b.n	80024f8 <HAL_GPIO_Init+0x204>
 80024ea:	2303      	movs	r3, #3
 80024ec:	e004      	b.n	80024f8 <HAL_GPIO_Init+0x204>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e002      	b.n	80024f8 <HAL_GPIO_Init+0x204>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <HAL_GPIO_Init+0x204>
 80024f6:	2300      	movs	r3, #0
 80024f8:	69fa      	ldr	r2, [r7, #28]
 80024fa:	f002 0203 	and.w	r2, r2, #3
 80024fe:	0092      	lsls	r2, r2, #2
 8002500:	4093      	lsls	r3, r2
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002508:	4935      	ldr	r1, [pc, #212]	; (80025e0 <HAL_GPIO_Init+0x2ec>)
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	089b      	lsrs	r3, r3, #2
 800250e:	3302      	adds	r3, #2
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002516:	4b38      	ldr	r3, [pc, #224]	; (80025f8 <HAL_GPIO_Init+0x304>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	43db      	mvns	r3, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4013      	ands	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800253a:	4a2f      	ldr	r2, [pc, #188]	; (80025f8 <HAL_GPIO_Init+0x304>)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002540:	4b2d      	ldr	r3, [pc, #180]	; (80025f8 <HAL_GPIO_Init+0x304>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002564:	4a24      	ldr	r2, [pc, #144]	; (80025f8 <HAL_GPIO_Init+0x304>)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800256a:	4b23      	ldr	r3, [pc, #140]	; (80025f8 <HAL_GPIO_Init+0x304>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800258e:	4a1a      	ldr	r2, [pc, #104]	; (80025f8 <HAL_GPIO_Init+0x304>)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002594:	4b18      	ldr	r3, [pc, #96]	; (80025f8 <HAL_GPIO_Init+0x304>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025b8:	4a0f      	ldr	r2, [pc, #60]	; (80025f8 <HAL_GPIO_Init+0x304>)
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3301      	adds	r3, #1
 80025c2:	61fb      	str	r3, [r7, #28]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	2b0f      	cmp	r3, #15
 80025c8:	f67f aea2 	bls.w	8002310 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025cc:	bf00      	nop
 80025ce:	bf00      	nop
 80025d0:	3724      	adds	r7, #36	; 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	40023800 	.word	0x40023800
 80025e0:	40013800 	.word	0x40013800
 80025e4:	40020000 	.word	0x40020000
 80025e8:	40020400 	.word	0x40020400
 80025ec:	40020800 	.word	0x40020800
 80025f0:	40020c00 	.word	0x40020c00
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40013c00 	.word	0x40013c00

080025fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025fe:	b08f      	sub	sp, #60	; 0x3c
 8002600:	af0a      	add	r7, sp, #40	; 0x28
 8002602:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e10f      	b.n	800282e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d106      	bne.n	800262e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f006 faa5 	bl	8008b78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2203      	movs	r2, #3
 8002632:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	2b00      	cmp	r3, #0
 8002640:	d102      	bne.n	8002648 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f002 fd8c 	bl	800516a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	687e      	ldr	r6, [r7, #4]
 800265a:	466d      	mov	r5, sp
 800265c:	f106 0410 	add.w	r4, r6, #16
 8002660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002662:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002664:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002666:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002668:	e894 0003 	ldmia.w	r4, {r0, r1}
 800266c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002670:	1d33      	adds	r3, r6, #4
 8002672:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002674:	6838      	ldr	r0, [r7, #0]
 8002676:	f002 fc63 	bl	8004f40 <USB_CoreInit>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0d0      	b.n	800282e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2100      	movs	r1, #0
 8002692:	4618      	mov	r0, r3
 8002694:	f002 fd7a 	bl	800518c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002698:	2300      	movs	r3, #0
 800269a:	73fb      	strb	r3, [r7, #15]
 800269c:	e04a      	b.n	8002734 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800269e:	7bfa      	ldrb	r2, [r7, #15]
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	333d      	adds	r3, #61	; 0x3d
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026b2:	7bfa      	ldrb	r2, [r7, #15]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4413      	add	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	333c      	adds	r3, #60	; 0x3c
 80026c2:	7bfa      	ldrb	r2, [r7, #15]
 80026c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026c6:	7bfa      	ldrb	r2, [r7, #15]
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	b298      	uxth	r0, r3
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	4413      	add	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	3344      	adds	r3, #68	; 0x44
 80026da:	4602      	mov	r2, r0
 80026dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026de:	7bfa      	ldrb	r2, [r7, #15]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	3340      	adds	r3, #64	; 0x40
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026f2:	7bfa      	ldrb	r2, [r7, #15]
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	440b      	add	r3, r1
 8002700:	3348      	adds	r3, #72	; 0x48
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002706:	7bfa      	ldrb	r2, [r7, #15]
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4413      	add	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	440b      	add	r3, r1
 8002714:	334c      	adds	r3, #76	; 0x4c
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800271a:	7bfa      	ldrb	r2, [r7, #15]
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	4613      	mov	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4413      	add	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	440b      	add	r3, r1
 8002728:	3354      	adds	r3, #84	; 0x54
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	3301      	adds	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
 8002734:	7bfa      	ldrb	r2, [r7, #15]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	429a      	cmp	r2, r3
 800273c:	d3af      	bcc.n	800269e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800273e:	2300      	movs	r3, #0
 8002740:	73fb      	strb	r3, [r7, #15]
 8002742:	e044      	b.n	80027ce <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002744:	7bfa      	ldrb	r2, [r7, #15]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4413      	add	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002756:	2200      	movs	r2, #0
 8002758:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800275a:	7bfa      	ldrb	r2, [r7, #15]
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4413      	add	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800276c:	7bfa      	ldrb	r2, [r7, #15]
 800276e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002770:	7bfa      	ldrb	r2, [r7, #15]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4413      	add	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002786:	7bfa      	ldrb	r2, [r7, #15]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4413      	add	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800279c:	7bfa      	ldrb	r2, [r7, #15]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027b2:	7bfa      	ldrb	r2, [r7, #15]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	4413      	add	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	3301      	adds	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
 80027ce:	7bfa      	ldrb	r2, [r7, #15]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d3b5      	bcc.n	8002744 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	603b      	str	r3, [r7, #0]
 80027de:	687e      	ldr	r6, [r7, #4]
 80027e0:	466d      	mov	r5, sp
 80027e2:	f106 0410 	add.w	r4, r6, #16
 80027e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80027f6:	1d33      	adds	r3, r6, #4
 80027f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027fa:	6838      	ldr	r0, [r7, #0]
 80027fc:	f002 fd12 	bl	8005224 <USB_DevInit>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d005      	beq.n	8002812 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2202      	movs	r2, #2
 800280a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e00d      	b.n	800282e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f003 fe61 	bl	80064ee <USB_DevDisconnect>

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002836 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <HAL_PCD_Start+0x1c>
 800284e:	2302      	movs	r3, #2
 8002850:	e020      	b.n	8002894 <HAL_PCD_Start+0x5e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285e:	2b01      	cmp	r3, #1
 8002860:	d109      	bne.n	8002876 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002866:	2b01      	cmp	r3, #1
 8002868:	d005      	beq.n	8002876 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f002 fc64 	bl	8005148 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f003 fe11 	bl	80064ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800289c:	b590      	push	{r4, r7, lr}
 800289e:	b08d      	sub	sp, #52	; 0x34
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f003 fecf 	bl	8006656 <USB_GetMode>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f040 848a 	bne.w	80031d4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f003 fe33 	bl	8006530 <USB_ReadInterrupts>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 8480 	beq.w	80031d2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	0a1b      	lsrs	r3, r3, #8
 80028dc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f003 fe20 	bl	8006530 <USB_ReadInterrupts>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d107      	bne.n	800290a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695a      	ldr	r2, [r3, #20]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f002 0202 	and.w	r2, r2, #2
 8002908:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f003 fe0e 	bl	8006530 <USB_ReadInterrupts>
 8002914:	4603      	mov	r3, r0
 8002916:	f003 0310 	and.w	r3, r3, #16
 800291a:	2b10      	cmp	r3, #16
 800291c:	d161      	bne.n	80029e2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699a      	ldr	r2, [r3, #24]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0210 	bic.w	r2, r2, #16
 800292c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	f003 020f 	and.w	r2, r3, #15
 800293a:	4613      	mov	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4413      	add	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	4413      	add	r3, r2
 800294a:	3304      	adds	r3, #4
 800294c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	0c5b      	lsrs	r3, r3, #17
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	2b02      	cmp	r3, #2
 8002958:	d124      	bne.n	80029a4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002960:	4013      	ands	r3, r2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d035      	beq.n	80029d2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002970:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002974:	b29b      	uxth	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	6a38      	ldr	r0, [r7, #32]
 800297a:	f003 fc45 	bl	8006208 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800298a:	441a      	add	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	6a1a      	ldr	r2, [r3, #32]
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	091b      	lsrs	r3, r3, #4
 8002998:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800299c:	441a      	add	r2, r3
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	621a      	str	r2, [r3, #32]
 80029a2:	e016      	b.n	80029d2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	0c5b      	lsrs	r3, r3, #17
 80029a8:	f003 030f 	and.w	r3, r3, #15
 80029ac:	2b06      	cmp	r3, #6
 80029ae:	d110      	bne.n	80029d2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029b6:	2208      	movs	r2, #8
 80029b8:	4619      	mov	r1, r3
 80029ba:	6a38      	ldr	r0, [r7, #32]
 80029bc:	f003 fc24 	bl	8006208 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	6a1a      	ldr	r2, [r3, #32]
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	091b      	lsrs	r3, r3, #4
 80029c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029cc:	441a      	add	r2, r3
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699a      	ldr	r2, [r3, #24]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0210 	orr.w	r2, r2, #16
 80029e0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f003 fda2 	bl	8006530 <USB_ReadInterrupts>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029f6:	f040 80a7 	bne.w	8002b48 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f003 fda7 	bl	8006556 <USB_ReadDevAllOutEpInterrupt>
 8002a08:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a0a:	e099      	b.n	8002b40 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 808e 	beq.w	8002b34 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	4611      	mov	r1, r2
 8002a22:	4618      	mov	r0, r3
 8002a24:	f003 fdcb 	bl	80065be <USB_ReadDevOutEPInterrupt>
 8002a28:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00c      	beq.n	8002a4e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a40:	461a      	mov	r2, r3
 8002a42:	2301      	movs	r3, #1
 8002a44:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 fec3 	bl	80037d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00c      	beq.n	8002a72 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a64:	461a      	mov	r2, r3
 8002a66:	2308      	movs	r3, #8
 8002a68:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 ff99 	bl	80039a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d008      	beq.n	8002a8e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2310      	movs	r3, #16
 8002a8c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d030      	beq.n	8002afa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa0:	2b80      	cmp	r3, #128	; 0x80
 8002aa2:	d109      	bne.n	8002ab8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	69fa      	ldr	r2, [r7, #28]
 8002aae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ab2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ab6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aba:	4613      	mov	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4413      	add	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	4413      	add	r3, r2
 8002aca:	3304      	adds	r3, #4
 8002acc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	78db      	ldrb	r3, [r3, #3]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d108      	bne.n	8002ae8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f006 f944 	bl	8008d70 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002af4:	461a      	mov	r2, r3
 8002af6:	2302      	movs	r3, #2
 8002af8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	015a      	lsls	r2, r3, #5
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b10:	461a      	mov	r2, r3
 8002b12:	2320      	movs	r3, #32
 8002b14:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d009      	beq.n	8002b34 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	015a      	lsls	r2, r3, #5
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b32:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	3301      	adds	r3, #1
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3c:	085b      	lsrs	r3, r3, #1
 8002b3e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f47f af62 	bne.w	8002a0c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f003 fcef 	bl	8006530 <USB_ReadInterrupts>
 8002b52:	4603      	mov	r3, r0
 8002b54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b5c:	f040 80db 	bne.w	8002d16 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f003 fd10 	bl	800658a <USB_ReadDevAllInEpInterrupt>
 8002b6a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b70:	e0cd      	b.n	8002d0e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80c2 	beq.w	8002d02 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	4611      	mov	r1, r2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f003 fd36 	bl	80065fa <USB_ReadDevInEPInterrupt>
 8002b8e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d057      	beq.n	8002c4a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	f003 030f 	and.w	r3, r3, #15
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69f9      	ldr	r1, [r7, #28]
 8002bb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002bba:	4013      	ands	r3, r2
 8002bbc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bca:	461a      	mov	r2, r3
 8002bcc:	2301      	movs	r3, #1
 8002bce:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d132      	bne.n	8002c3e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	334c      	adds	r3, #76	; 0x4c
 8002be8:	6819      	ldr	r1, [r3, #0]
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4403      	add	r3, r0
 8002bf8:	3348      	adds	r3, #72	; 0x48
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4419      	add	r1, r3
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c02:	4613      	mov	r3, r2
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	4413      	add	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4403      	add	r3, r0
 8002c0c:	334c      	adds	r3, #76	; 0x4c
 8002c0e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d113      	bne.n	8002c3e <HAL_PCD_IRQHandler+0x3a2>
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4413      	add	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	3354      	adds	r3, #84	; 0x54
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d108      	bne.n	8002c3e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c36:	461a      	mov	r2, r3
 8002c38:	2101      	movs	r1, #1
 8002c3a:	f003 fd3d 	bl	80066b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	4619      	mov	r1, r3
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f006 f818 	bl	8008c7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c60:	461a      	mov	r2, r3
 8002c62:	2308      	movs	r3, #8
 8002c64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	2310      	movs	r3, #16
 8002c80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d008      	beq.n	8002c9e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	015a      	lsls	r2, r3, #5
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	4413      	add	r3, r2
 8002c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c98:	461a      	mov	r2, r3
 8002c9a:	2340      	movs	r3, #64	; 0x40
 8002c9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d023      	beq.n	8002cf0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002ca8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002caa:	6a38      	ldr	r0, [r7, #32]
 8002cac:	f002 fc1e 	bl	80054ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	3338      	adds	r3, #56	; 0x38
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	78db      	ldrb	r3, [r3, #3]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d108      	bne.n	8002cde <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f006 f85b 	bl	8008d94 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cea:	461a      	mov	r2, r3
 8002cec:	2302      	movs	r3, #2
 8002cee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002cfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 fcdb 	bl	80036b8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	3301      	adds	r3, #1
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0a:	085b      	lsrs	r3, r3, #1
 8002d0c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f47f af2e 	bne.w	8002b72 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f003 fc08 	bl	8006530 <USB_ReadInterrupts>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d2a:	d122      	bne.n	8002d72 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	69fa      	ldr	r2, [r7, #28]
 8002d36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d3a:	f023 0301 	bic.w	r3, r3, #1
 8002d3e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d108      	bne.n	8002d5c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d52:	2100      	movs	r1, #0
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 fec3 	bl	8003ae0 <HAL_PCDEx_LPM_Callback>
 8002d5a:	e002      	b.n	8002d62 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f005 fff9 	bl	8008d54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695a      	ldr	r2, [r3, #20]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002d70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f003 fbda 	bl	8006530 <USB_ReadInterrupts>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d86:	d112      	bne.n	8002dae <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d102      	bne.n	8002d9e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f005 ffb5 	bl	8008d08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695a      	ldr	r2, [r3, #20]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002dac:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f003 fbbc 	bl	8006530 <USB_ReadInterrupts>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc2:	f040 80b7 	bne.w	8002f34 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	69fa      	ldr	r2, [r7, #28]
 8002dd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dd4:	f023 0301 	bic.w	r3, r3, #1
 8002dd8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2110      	movs	r1, #16
 8002de0:	4618      	mov	r0, r3
 8002de2:	f002 fb83 	bl	80054ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002de6:	2300      	movs	r3, #0
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dea:	e046      	b.n	8002e7a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002df8:	461a      	mov	r2, r3
 8002dfa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002dfe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e10:	0151      	lsls	r1, r2, #5
 8002e12:	69fa      	ldr	r2, [r7, #28]
 8002e14:	440a      	add	r2, r1
 8002e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e1e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e32:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e44:	0151      	lsls	r1, r2, #5
 8002e46:	69fa      	ldr	r2, [r7, #28]
 8002e48:	440a      	add	r2, r1
 8002e4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e52:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e64:	0151      	lsls	r1, r2, #5
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	440a      	add	r2, r1
 8002e6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e72:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e76:	3301      	adds	r3, #1
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d3b3      	bcc.n	8002dec <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	69fa      	ldr	r2, [r7, #28]
 8002e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e92:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002e96:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d016      	beq.n	8002ece <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eaa:	69fa      	ldr	r2, [r7, #28]
 8002eac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eb0:	f043 030b 	orr.w	r3, r3, #11
 8002eb4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec0:	69fa      	ldr	r2, [r7, #28]
 8002ec2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ec6:	f043 030b 	orr.w	r3, r3, #11
 8002eca:	6453      	str	r3, [r2, #68]	; 0x44
 8002ecc:	e015      	b.n	8002efa <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002edc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ee0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002ee4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	69fa      	ldr	r2, [r7, #28]
 8002ef0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ef4:	f043 030b 	orr.w	r3, r3, #11
 8002ef8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	69fa      	ldr	r2, [r7, #28]
 8002f04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f08:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f0c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f1e:	461a      	mov	r2, r3
 8002f20:	f003 fbca 	bl	80066b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695a      	ldr	r2, [r3, #20]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002f32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f003 faf9 	bl	8006530 <USB_ReadInterrupts>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f48:	d124      	bne.n	8002f94 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f003 fb8f 	bl	8006672 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f002 fb44 	bl	80055e6 <USB_GetDevSpeed>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	461a      	mov	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681c      	ldr	r4, [r3, #0]
 8002f6a:	f001 f9e9 	bl	8004340 <HAL_RCC_GetHCLKFreq>
 8002f6e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	461a      	mov	r2, r3
 8002f78:	4620      	mov	r0, r4
 8002f7a:	f002 f843 	bl	8005004 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f005 fea3 	bl	8008cca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002f92:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f003 fac9 	bl	8006530 <USB_ReadInterrupts>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d10a      	bne.n	8002fbe <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f005 fe80 	bl	8008cae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f002 0208 	and.w	r2, r2, #8
 8002fbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f003 fab4 	bl	8006530 <USB_ReadInterrupts>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fce:	2b80      	cmp	r3, #128	; 0x80
 8002fd0:	d122      	bne.n	8003018 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fde:	2301      	movs	r3, #1
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe2:	e014      	b.n	800300e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe8:	4613      	mov	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d105      	bne.n	8003008 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	4619      	mov	r1, r3
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fb27 	bl	8003656 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	3301      	adds	r3, #1
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003014:	429a      	cmp	r2, r3
 8003016:	d3e5      	bcc.n	8002fe4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f003 fa87 	bl	8006530 <USB_ReadInterrupts>
 8003022:	4603      	mov	r3, r0
 8003024:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003028:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800302c:	d13b      	bne.n	80030a6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800302e:	2301      	movs	r3, #1
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
 8003032:	e02b      	b.n	800308c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	4413      	add	r3, r2
 800303c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003048:	4613      	mov	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	3340      	adds	r3, #64	; 0x40
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d115      	bne.n	8003086 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800305a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800305c:	2b00      	cmp	r3, #0
 800305e:	da12      	bge.n	8003086 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003064:	4613      	mov	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	333f      	adds	r3, #63	; 0x3f
 8003070:	2201      	movs	r2, #1
 8003072:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	b2db      	uxtb	r3, r3
 8003078:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800307c:	b2db      	uxtb	r3, r3
 800307e:	4619      	mov	r1, r3
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 fae8 	bl	8003656 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	3301      	adds	r3, #1
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003092:	429a      	cmp	r2, r3
 8003094:	d3ce      	bcc.n	8003034 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695a      	ldr	r2, [r3, #20]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80030a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f003 fa40 	bl	8006530 <USB_ReadInterrupts>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030ba:	d155      	bne.n	8003168 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030bc:	2301      	movs	r3, #1
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
 80030c0:	e045      	b.n	800314e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d6:	4613      	mov	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d12e      	bne.n	8003148 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80030ea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	da2b      	bge.n	8003148 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80030fc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003100:	429a      	cmp	r2, r3
 8003102:	d121      	bne.n	8003148 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003108:	4613      	mov	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003116:	2201      	movs	r2, #1
 8003118:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10a      	bne.n	8003148 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	69fa      	ldr	r2, [r7, #28]
 800313c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003140:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003144:	6053      	str	r3, [r2, #4]
            break;
 8003146:	e007      	b.n	8003158 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	3301      	adds	r3, #1
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003154:	429a      	cmp	r2, r3
 8003156:	d3b4      	bcc.n	80030c2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003166:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f003 f9df 	bl	8006530 <USB_ReadInterrupts>
 8003172:	4603      	mov	r3, r0
 8003174:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317c:	d10a      	bne.n	8003194 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f005 fe1a 	bl	8008db8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695a      	ldr	r2, [r3, #20]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003192:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f003 f9c9 	bl	8006530 <USB_ReadInterrupts>
 800319e:	4603      	mov	r3, r0
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d115      	bne.n	80031d4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f005 fe0a 	bl	8008dd4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6859      	ldr	r1, [r3, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	605a      	str	r2, [r3, #4]
 80031d0:	e000      	b.n	80031d4 <HAL_PCD_IRQHandler+0x938>
      return;
 80031d2:	bf00      	nop
    }
  }
}
 80031d4:	3734      	adds	r7, #52	; 0x34
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd90      	pop	{r4, r7, pc}

080031da <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	460b      	mov	r3, r1
 80031e4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_PCD_SetAddress+0x1a>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e013      	b.n	800321c <HAL_PCD_SetAddress+0x42>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	78fa      	ldrb	r2, [r7, #3]
 800320a:	4611      	mov	r1, r2
 800320c:	4618      	mov	r0, r3
 800320e:	f003 f927 	bl	8006460 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	4608      	mov	r0, r1
 800322e:	4611      	mov	r1, r2
 8003230:	461a      	mov	r2, r3
 8003232:	4603      	mov	r3, r0
 8003234:	70fb      	strb	r3, [r7, #3]
 8003236:	460b      	mov	r3, r1
 8003238:	803b      	strh	r3, [r7, #0]
 800323a:	4613      	mov	r3, r2
 800323c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003242:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003246:	2b00      	cmp	r3, #0
 8003248:	da0f      	bge.n	800326a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	f003 020f 	and.w	r2, r3, #15
 8003250:	4613      	mov	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	3338      	adds	r3, #56	; 0x38
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	4413      	add	r3, r2
 800325e:	3304      	adds	r3, #4
 8003260:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2201      	movs	r2, #1
 8003266:	705a      	strb	r2, [r3, #1]
 8003268:	e00f      	b.n	800328a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800326a:	78fb      	ldrb	r3, [r7, #3]
 800326c:	f003 020f 	and.w	r2, r3, #15
 8003270:	4613      	mov	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	4413      	add	r3, r2
 8003280:	3304      	adds	r3, #4
 8003282:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800328a:	78fb      	ldrb	r3, [r7, #3]
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	b2da      	uxtb	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003296:	883a      	ldrh	r2, [r7, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	78ba      	ldrb	r2, [r7, #2]
 80032a0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	785b      	ldrb	r3, [r3, #1]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d004      	beq.n	80032b4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032b4:	78bb      	ldrb	r3, [r7, #2]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d102      	bne.n	80032c0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_PCD_EP_Open+0xaa>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e00e      	b.n	80032ec <HAL_PCD_EP_Open+0xc8>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68f9      	ldr	r1, [r7, #12]
 80032dc:	4618      	mov	r0, r3
 80032de:	f002 f9a7 	bl	8005630 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80032ea:	7afb      	ldrb	r3, [r7, #11]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003300:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003304:	2b00      	cmp	r3, #0
 8003306:	da0f      	bge.n	8003328 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	f003 020f 	and.w	r2, r3, #15
 800330e:	4613      	mov	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	3338      	adds	r3, #56	; 0x38
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	4413      	add	r3, r2
 800331c:	3304      	adds	r3, #4
 800331e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2201      	movs	r2, #1
 8003324:	705a      	strb	r2, [r3, #1]
 8003326:	e00f      	b.n	8003348 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003328:	78fb      	ldrb	r3, [r7, #3]
 800332a:	f003 020f 	and.w	r2, r3, #15
 800332e:	4613      	mov	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	4413      	add	r3, r2
 800333e:	3304      	adds	r3, #4
 8003340:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	b2da      	uxtb	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_PCD_EP_Close+0x6e>
 800335e:	2302      	movs	r3, #2
 8003360:	e00e      	b.n	8003380 <HAL_PCD_EP_Close+0x8c>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68f9      	ldr	r1, [r7, #12]
 8003370:	4618      	mov	r0, r3
 8003372:	f002 f9e5 	bl	8005740 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	460b      	mov	r3, r1
 8003396:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003398:	7afb      	ldrb	r3, [r7, #11]
 800339a:	f003 020f 	and.w	r2, r3, #15
 800339e:	4613      	mov	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	4413      	add	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4413      	add	r3, r2
 80033ae:	3304      	adds	r3, #4
 80033b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2200      	movs	r2, #0
 80033c2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	2200      	movs	r2, #0
 80033c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033ca:	7afb      	ldrb	r3, [r7, #11]
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d102      	bne.n	80033e4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033e4:	7afb      	ldrb	r3, [r7, #11]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d109      	bne.n	8003402 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6818      	ldr	r0, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	461a      	mov	r2, r3
 80033fa:	6979      	ldr	r1, [r7, #20]
 80033fc:	f002 fcc4 	bl	8005d88 <USB_EP0StartXfer>
 8003400:	e008      	b.n	8003414 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6818      	ldr	r0, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	461a      	mov	r2, r3
 800340e:	6979      	ldr	r1, [r7, #20]
 8003410:	f002 fa72 	bl	80058f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	460b      	mov	r3, r1
 8003428:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	f003 020f 	and.w	r2, r3, #15
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	4413      	add	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003440:	681b      	ldr	r3, [r3, #0]
}
 8003442:	4618      	mov	r0, r3
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b086      	sub	sp, #24
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	607a      	str	r2, [r7, #4]
 8003458:	603b      	str	r3, [r7, #0]
 800345a:	460b      	mov	r3, r1
 800345c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800345e:	7afb      	ldrb	r3, [r7, #11]
 8003460:	f003 020f 	and.w	r2, r3, #15
 8003464:	4613      	mov	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	3338      	adds	r3, #56	; 0x38
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4413      	add	r3, r2
 8003472:	3304      	adds	r3, #4
 8003474:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2200      	movs	r2, #0
 8003486:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2201      	movs	r2, #1
 800348c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800348e:	7afb      	ldrb	r3, [r7, #11]
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	b2da      	uxtb	r2, r3
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d102      	bne.n	80034a8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034a8:	7afb      	ldrb	r3, [r7, #11]
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d109      	bne.n	80034c6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	461a      	mov	r2, r3
 80034be:	6979      	ldr	r1, [r7, #20]
 80034c0:	f002 fc62 	bl	8005d88 <USB_EP0StartXfer>
 80034c4:	e008      	b.n	80034d8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	461a      	mov	r2, r3
 80034d2:	6979      	ldr	r1, [r7, #20]
 80034d4:	f002 fa10 	bl	80058f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b084      	sub	sp, #16
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	460b      	mov	r3, r1
 80034ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80034ee:	78fb      	ldrb	r3, [r7, #3]
 80034f0:	f003 020f 	and.w	r2, r3, #15
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d901      	bls.n	8003500 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e050      	b.n	80035a2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003500:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003504:	2b00      	cmp	r3, #0
 8003506:	da0f      	bge.n	8003528 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	f003 020f 	and.w	r2, r3, #15
 800350e:	4613      	mov	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	3338      	adds	r3, #56	; 0x38
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	4413      	add	r3, r2
 800351c:	3304      	adds	r3, #4
 800351e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2201      	movs	r2, #1
 8003524:	705a      	strb	r2, [r3, #1]
 8003526:	e00d      	b.n	8003544 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003528:	78fa      	ldrb	r2, [r7, #3]
 800352a:	4613      	mov	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	4413      	add	r3, r2
 800353a:	3304      	adds	r3, #4
 800353c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2201      	movs	r2, #1
 8003548:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800354a:	78fb      	ldrb	r3, [r7, #3]
 800354c:	f003 030f 	and.w	r3, r3, #15
 8003550:	b2da      	uxtb	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_PCD_EP_SetStall+0x82>
 8003560:	2302      	movs	r3, #2
 8003562:	e01e      	b.n	80035a2 <HAL_PCD_EP_SetStall+0xc0>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68f9      	ldr	r1, [r7, #12]
 8003572:	4618      	mov	r0, r3
 8003574:	f002 fea0 	bl	80062b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003578:	78fb      	ldrb	r3, [r7, #3]
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10a      	bne.n	8003598 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6818      	ldr	r0, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	b2d9      	uxtb	r1, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003592:	461a      	mov	r2, r3
 8003594:	f003 f890 	bl	80066b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	460b      	mov	r3, r1
 80035b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035b6:	78fb      	ldrb	r3, [r7, #3]
 80035b8:	f003 020f 	and.w	r2, r3, #15
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d901      	bls.n	80035c8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e042      	b.n	800364e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	da0f      	bge.n	80035f0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	f003 020f 	and.w	r2, r3, #15
 80035d6:	4613      	mov	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	3338      	adds	r3, #56	; 0x38
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	4413      	add	r3, r2
 80035e4:	3304      	adds	r3, #4
 80035e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2201      	movs	r2, #1
 80035ec:	705a      	strb	r2, [r3, #1]
 80035ee:	e00f      	b.n	8003610 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	f003 020f 	and.w	r2, r3, #15
 80035f6:	4613      	mov	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	4413      	add	r3, r2
 8003606:	3304      	adds	r3, #4
 8003608:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003616:	78fb      	ldrb	r3, [r7, #3]
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	b2da      	uxtb	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003628:	2b01      	cmp	r3, #1
 800362a:	d101      	bne.n	8003630 <HAL_PCD_EP_ClrStall+0x86>
 800362c:	2302      	movs	r3, #2
 800362e:	e00e      	b.n	800364e <HAL_PCD_EP_ClrStall+0xa4>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68f9      	ldr	r1, [r7, #12]
 800363e:	4618      	mov	r0, r3
 8003640:	f002 fea8 	bl	8006394 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	460b      	mov	r3, r1
 8003660:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003662:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003666:	2b00      	cmp	r3, #0
 8003668:	da0c      	bge.n	8003684 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800366a:	78fb      	ldrb	r3, [r7, #3]
 800366c:	f003 020f 	and.w	r2, r3, #15
 8003670:	4613      	mov	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	3338      	adds	r3, #56	; 0x38
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	4413      	add	r3, r2
 800367e:	3304      	adds	r3, #4
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	e00c      	b.n	800369e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003684:	78fb      	ldrb	r3, [r7, #3]
 8003686:	f003 020f 	and.w	r2, r3, #15
 800368a:	4613      	mov	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	4413      	add	r3, r2
 800369a:	3304      	adds	r3, #4
 800369c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68f9      	ldr	r1, [r7, #12]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f002 fcc7 	bl	8006038 <USB_EPStopXfer>
 80036aa:	4603      	mov	r3, r0
 80036ac:	72fb      	strb	r3, [r7, #11]

  return ret;
 80036ae:	7afb      	ldrb	r3, [r7, #11]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08a      	sub	sp, #40	; 0x28
 80036bc:	af02      	add	r7, sp, #8
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	4613      	mov	r3, r2
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	4413      	add	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	3338      	adds	r3, #56	; 0x38
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	4413      	add	r3, r2
 80036dc:	3304      	adds	r3, #4
 80036de:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a1a      	ldr	r2, [r3, #32]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d901      	bls.n	80036f0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e06c      	b.n	80037ca <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	699a      	ldr	r2, [r3, #24]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	429a      	cmp	r2, r3
 8003704:	d902      	bls.n	800370c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	3303      	adds	r3, #3
 8003710:	089b      	lsrs	r3, r3, #2
 8003712:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003714:	e02b      	b.n	800376e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	699a      	ldr	r2, [r3, #24]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	69fa      	ldr	r2, [r7, #28]
 8003728:	429a      	cmp	r2, r3
 800372a:	d902      	bls.n	8003732 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	3303      	adds	r3, #3
 8003736:	089b      	lsrs	r3, r3, #2
 8003738:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6919      	ldr	r1, [r3, #16]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	b2da      	uxtb	r2, r3
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800374a:	b2db      	uxtb	r3, r3
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	4603      	mov	r3, r0
 8003750:	6978      	ldr	r0, [r7, #20]
 8003752:	f002 fd1b 	bl	800618c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	441a      	add	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a1a      	ldr	r2, [r3, #32]
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	441a      	add	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4413      	add	r3, r2
 8003776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	429a      	cmp	r2, r3
 8003782:	d809      	bhi.n	8003798 <PCD_WriteEmptyTxFifo+0xe0>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a1a      	ldr	r2, [r3, #32]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800378c:	429a      	cmp	r2, r3
 800378e:	d203      	bcs.n	8003798 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1be      	bne.n	8003716 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	699a      	ldr	r2, [r3, #24]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d811      	bhi.n	80037c8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	2201      	movs	r2, #1
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	43db      	mvns	r3, r3
 80037be:	6939      	ldr	r1, [r7, #16]
 80037c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037c4:	4013      	ands	r3, r2
 80037c6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3720      	adds	r7, #32
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	333c      	adds	r3, #60	; 0x3c
 80037ec:	3304      	adds	r3, #4
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	015a      	lsls	r2, r3, #5
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	4413      	add	r3, r2
 80037fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d17b      	bne.n	8003902 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	d015      	beq.n	8003840 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	4a61      	ldr	r2, [pc, #388]	; (800399c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	f240 80b9 	bls.w	8003990 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 80b3 	beq.w	8003990 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003836:	461a      	mov	r2, r3
 8003838:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800383c:	6093      	str	r3, [r2, #8]
 800383e:	e0a7      	b.n	8003990 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f003 0320 	and.w	r3, r3, #32
 8003846:	2b00      	cmp	r3, #0
 8003848:	d009      	beq.n	800385e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003856:	461a      	mov	r2, r3
 8003858:	2320      	movs	r3, #32
 800385a:	6093      	str	r3, [r2, #8]
 800385c:	e098      	b.n	8003990 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003864:	2b00      	cmp	r3, #0
 8003866:	f040 8093 	bne.w	8003990 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	4a4b      	ldr	r2, [pc, #300]	; (800399c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d90f      	bls.n	8003892 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00a      	beq.n	8003892 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	4413      	add	r3, r2
 8003884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003888:	461a      	mov	r2, r3
 800388a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800388e:	6093      	str	r3, [r2, #8]
 8003890:	e07e      	b.n	8003990 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	4613      	mov	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4413      	add	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	4413      	add	r3, r2
 80038a4:	3304      	adds	r3, #4
 80038a6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	69da      	ldr	r2, [r3, #28]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	0159      	lsls	r1, r3, #5
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	440b      	add	r3, r1
 80038b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038be:	1ad2      	subs	r2, r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d114      	bne.n	80038f4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038dc:	461a      	mov	r2, r3
 80038de:	2101      	movs	r1, #1
 80038e0:	f002 feea 	bl	80066b8 <USB_EP0_OutStart>
 80038e4:	e006      	b.n	80038f4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	691a      	ldr	r2, [r3, #16]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	441a      	add	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	4619      	mov	r1, r3
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f005 f9a2 	bl	8008c44 <HAL_PCD_DataOutStageCallback>
 8003900:	e046      	b.n	8003990 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	4a26      	ldr	r2, [pc, #152]	; (80039a0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d124      	bne.n	8003954 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	4413      	add	r3, r2
 800391c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003920:	461a      	mov	r2, r3
 8003922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003926:	6093      	str	r3, [r2, #8]
 8003928:	e032      	b.n	8003990 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b00      	cmp	r3, #0
 8003932:	d008      	beq.n	8003946 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	4413      	add	r3, r2
 800393c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003940:	461a      	mov	r2, r3
 8003942:	2320      	movs	r3, #32
 8003944:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	b2db      	uxtb	r3, r3
 800394a:	4619      	mov	r1, r3
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f005 f979 	bl	8008c44 <HAL_PCD_DataOutStageCallback>
 8003952:	e01d      	b.n	8003990 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d114      	bne.n	8003984 <PCD_EP_OutXfrComplete_int+0x1b0>
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	4613      	mov	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	4413      	add	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	440b      	add	r3, r1
 8003968:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d108      	bne.n	8003984 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800397c:	461a      	mov	r2, r3
 800397e:	2100      	movs	r1, #0
 8003980:	f002 fe9a 	bl	80066b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	4619      	mov	r1, r3
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f005 f95a 	bl	8008c44 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3720      	adds	r7, #32
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	4f54300a 	.word	0x4f54300a
 80039a0:	4f54310a 	.word	0x4f54310a

080039a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	333c      	adds	r3, #60	; 0x3c
 80039bc:	3304      	adds	r3, #4
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4a15      	ldr	r2, [pc, #84]	; (8003a2c <PCD_EP_OutSetupPacket_int+0x88>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d90e      	bls.n	80039f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d009      	beq.n	80039f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	015a      	lsls	r2, r3, #5
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f0:	461a      	mov	r2, r3
 80039f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f005 f911 	bl	8008c20 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4a0a      	ldr	r2, [pc, #40]	; (8003a2c <PCD_EP_OutSetupPacket_int+0x88>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d90c      	bls.n	8003a20 <PCD_EP_OutSetupPacket_int+0x7c>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d108      	bne.n	8003a20 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6818      	ldr	r0, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a18:	461a      	mov	r2, r3
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	f002 fe4c 	bl	80066b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	4f54300a 	.word	0x4f54300a

08003a30 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	70fb      	strb	r3, [r7, #3]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a48:	78fb      	ldrb	r3, [r7, #3]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d107      	bne.n	8003a5e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a4e:	883b      	ldrh	r3, [r7, #0]
 8003a50:	0419      	lsls	r1, r3, #16
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a5c:	e028      	b.n	8003ab0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a64:	0c1b      	lsrs	r3, r3, #16
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	4413      	add	r3, r2
 8003a6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	73fb      	strb	r3, [r7, #15]
 8003a70:	e00d      	b.n	8003a8e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	3340      	adds	r3, #64	; 0x40
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	0c1b      	lsrs	r3, r3, #16
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	4413      	add	r3, r2
 8003a86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	73fb      	strb	r3, [r7, #15]
 8003a8e:	7bfa      	ldrb	r2, [r7, #15]
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d3ec      	bcc.n	8003a72 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a98:	883b      	ldrh	r3, [r7, #0]
 8003a9a:	0418      	lsls	r0, r3, #16
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6819      	ldr	r1, [r3, #0]
 8003aa0:	78fb      	ldrb	r3, [r7, #3]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	4302      	orrs	r2, r0
 8003aa8:	3340      	adds	r3, #64	; 0x40
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	887a      	ldrh	r2, [r7, #2]
 8003ad0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	460b      	mov	r3, r1
 8003aea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e267      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d075      	beq.n	8003c02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b16:	4b88      	ldr	r3, [pc, #544]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 030c 	and.w	r3, r3, #12
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d00c      	beq.n	8003b3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b22:	4b85      	ldr	r3, [pc, #532]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d112      	bne.n	8003b54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b2e:	4b82      	ldr	r3, [pc, #520]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b3a:	d10b      	bne.n	8003b54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b3c:	4b7e      	ldr	r3, [pc, #504]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d05b      	beq.n	8003c00 <HAL_RCC_OscConfig+0x108>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d157      	bne.n	8003c00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e242      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b5c:	d106      	bne.n	8003b6c <HAL_RCC_OscConfig+0x74>
 8003b5e:	4b76      	ldr	r3, [pc, #472]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a75      	ldr	r2, [pc, #468]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	e01d      	b.n	8003ba8 <HAL_RCC_OscConfig+0xb0>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b74:	d10c      	bne.n	8003b90 <HAL_RCC_OscConfig+0x98>
 8003b76:	4b70      	ldr	r3, [pc, #448]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a6f      	ldr	r2, [pc, #444]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	4b6d      	ldr	r3, [pc, #436]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a6c      	ldr	r2, [pc, #432]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	e00b      	b.n	8003ba8 <HAL_RCC_OscConfig+0xb0>
 8003b90:	4b69      	ldr	r3, [pc, #420]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a68      	ldr	r2, [pc, #416]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	4b66      	ldr	r3, [pc, #408]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a65      	ldr	r2, [pc, #404]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d013      	beq.n	8003bd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb0:	f7fd f9e2 	bl	8000f78 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bb8:	f7fd f9de 	bl	8000f78 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b64      	cmp	r3, #100	; 0x64
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e207      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bca:	4b5b      	ldr	r3, [pc, #364]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0xc0>
 8003bd6:	e014      	b.n	8003c02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd8:	f7fd f9ce 	bl	8000f78 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003be0:	f7fd f9ca 	bl	8000f78 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b64      	cmp	r3, #100	; 0x64
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e1f3      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf2:	4b51      	ldr	r3, [pc, #324]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0xe8>
 8003bfe:	e000      	b.n	8003c02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d063      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c0e:	4b4a      	ldr	r3, [pc, #296]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 030c 	and.w	r3, r3, #12
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00b      	beq.n	8003c32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c1a:	4b47      	ldr	r3, [pc, #284]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d11c      	bne.n	8003c60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c26:	4b44      	ldr	r3, [pc, #272]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d116      	bne.n	8003c60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c32:	4b41      	ldr	r3, [pc, #260]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d005      	beq.n	8003c4a <HAL_RCC_OscConfig+0x152>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d001      	beq.n	8003c4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e1c7      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4a:	4b3b      	ldr	r3, [pc, #236]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	4937      	ldr	r1, [pc, #220]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c5e:	e03a      	b.n	8003cd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d020      	beq.n	8003caa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c68:	4b34      	ldr	r3, [pc, #208]	; (8003d3c <HAL_RCC_OscConfig+0x244>)
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6e:	f7fd f983 	bl	8000f78 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c76:	f7fd f97f 	bl	8000f78 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e1a8      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c88:	4b2b      	ldr	r3, [pc, #172]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c94:	4b28      	ldr	r3, [pc, #160]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	4925      	ldr	r1, [pc, #148]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	600b      	str	r3, [r1, #0]
 8003ca8:	e015      	b.n	8003cd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003caa:	4b24      	ldr	r3, [pc, #144]	; (8003d3c <HAL_RCC_OscConfig+0x244>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb0:	f7fd f962 	bl	8000f78 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cb8:	f7fd f95e 	bl	8000f78 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e187      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cca:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d036      	beq.n	8003d50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d016      	beq.n	8003d18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cea:	4b15      	ldr	r3, [pc, #84]	; (8003d40 <HAL_RCC_OscConfig+0x248>)
 8003cec:	2201      	movs	r2, #1
 8003cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf0:	f7fd f942 	bl	8000f78 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cf8:	f7fd f93e 	bl	8000f78 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e167      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d0a:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x200>
 8003d16:	e01b      	b.n	8003d50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d18:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <HAL_RCC_OscConfig+0x248>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d1e:	f7fd f92b 	bl	8000f78 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d24:	e00e      	b.n	8003d44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d26:	f7fd f927 	bl	8000f78 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d907      	bls.n	8003d44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e150      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	42470000 	.word	0x42470000
 8003d40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d44:	4b88      	ldr	r3, [pc, #544]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1ea      	bne.n	8003d26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 8097 	beq.w	8003e8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d62:	4b81      	ldr	r3, [pc, #516]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10f      	bne.n	8003d8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	4b7d      	ldr	r3, [pc, #500]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	4a7c      	ldr	r2, [pc, #496]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d7e:	4b7a      	ldr	r3, [pc, #488]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d86:	60bb      	str	r3, [r7, #8]
 8003d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8e:	4b77      	ldr	r3, [pc, #476]	; (8003f6c <HAL_RCC_OscConfig+0x474>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d118      	bne.n	8003dcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d9a:	4b74      	ldr	r3, [pc, #464]	; (8003f6c <HAL_RCC_OscConfig+0x474>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a73      	ldr	r2, [pc, #460]	; (8003f6c <HAL_RCC_OscConfig+0x474>)
 8003da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da6:	f7fd f8e7 	bl	8000f78 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dae:	f7fd f8e3 	bl	8000f78 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e10c      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc0:	4b6a      	ldr	r3, [pc, #424]	; (8003f6c <HAL_RCC_OscConfig+0x474>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f0      	beq.n	8003dae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d106      	bne.n	8003de2 <HAL_RCC_OscConfig+0x2ea>
 8003dd4:	4b64      	ldr	r3, [pc, #400]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd8:	4a63      	ldr	r2, [pc, #396]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	6713      	str	r3, [r2, #112]	; 0x70
 8003de0:	e01c      	b.n	8003e1c <HAL_RCC_OscConfig+0x324>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	2b05      	cmp	r3, #5
 8003de8:	d10c      	bne.n	8003e04 <HAL_RCC_OscConfig+0x30c>
 8003dea:	4b5f      	ldr	r3, [pc, #380]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dee:	4a5e      	ldr	r2, [pc, #376]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003df0:	f043 0304 	orr.w	r3, r3, #4
 8003df4:	6713      	str	r3, [r2, #112]	; 0x70
 8003df6:	4b5c      	ldr	r3, [pc, #368]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfa:	4a5b      	ldr	r2, [pc, #364]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	6713      	str	r3, [r2, #112]	; 0x70
 8003e02:	e00b      	b.n	8003e1c <HAL_RCC_OscConfig+0x324>
 8003e04:	4b58      	ldr	r3, [pc, #352]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e08:	4a57      	ldr	r2, [pc, #348]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e0a:	f023 0301 	bic.w	r3, r3, #1
 8003e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e10:	4b55      	ldr	r3, [pc, #340]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e14:	4a54      	ldr	r2, [pc, #336]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e16:	f023 0304 	bic.w	r3, r3, #4
 8003e1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d015      	beq.n	8003e50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e24:	f7fd f8a8 	bl	8000f78 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2a:	e00a      	b.n	8003e42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e2c:	f7fd f8a4 	bl	8000f78 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e0cb      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e42:	4b49      	ldr	r3, [pc, #292]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0ee      	beq.n	8003e2c <HAL_RCC_OscConfig+0x334>
 8003e4e:	e014      	b.n	8003e7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e50:	f7fd f892 	bl	8000f78 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e56:	e00a      	b.n	8003e6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e58:	f7fd f88e 	bl	8000f78 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e0b5      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e6e:	4b3e      	ldr	r3, [pc, #248]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1ee      	bne.n	8003e58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d105      	bne.n	8003e8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e80:	4b39      	ldr	r3, [pc, #228]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	4a38      	ldr	r2, [pc, #224]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 80a1 	beq.w	8003fd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e96:	4b34      	ldr	r3, [pc, #208]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 030c 	and.w	r3, r3, #12
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d05c      	beq.n	8003f5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d141      	bne.n	8003f2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eaa:	4b31      	ldr	r3, [pc, #196]	; (8003f70 <HAL_RCC_OscConfig+0x478>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb0:	f7fd f862 	bl	8000f78 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eb8:	f7fd f85e 	bl	8000f78 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e087      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eca:	4b27      	ldr	r3, [pc, #156]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f0      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69da      	ldr	r2, [r3, #28]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	019b      	lsls	r3, r3, #6
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eec:	085b      	lsrs	r3, r3, #1
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	041b      	lsls	r3, r3, #16
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	061b      	lsls	r3, r3, #24
 8003efa:	491b      	ldr	r1, [pc, #108]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f00:	4b1b      	ldr	r3, [pc, #108]	; (8003f70 <HAL_RCC_OscConfig+0x478>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f06:	f7fd f837 	bl	8000f78 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f0e:	f7fd f833 	bl	8000f78 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e05c      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f20:	4b11      	ldr	r3, [pc, #68]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0f0      	beq.n	8003f0e <HAL_RCC_OscConfig+0x416>
 8003f2c:	e054      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2e:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <HAL_RCC_OscConfig+0x478>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f34:	f7fd f820 	bl	8000f78 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f3c:	f7fd f81c 	bl	8000f78 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e045      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4e:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0x444>
 8003f5a:	e03d      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d107      	bne.n	8003f74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e038      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	40007000 	.word	0x40007000
 8003f70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f74:	4b1b      	ldr	r3, [pc, #108]	; (8003fe4 <HAL_RCC_OscConfig+0x4ec>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d028      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d121      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d11a      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003faa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d111      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fba:	085b      	lsrs	r3, r3, #1
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d107      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d001      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e000      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40023800 	.word	0x40023800

08003fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0cc      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ffc:	4b68      	ldr	r3, [pc, #416]	; (80041a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d90c      	bls.n	8004024 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400a:	4b65      	ldr	r3, [pc, #404]	; (80041a0 <HAL_RCC_ClockConfig+0x1b8>)
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004012:	4b63      	ldr	r3, [pc, #396]	; (80041a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d001      	beq.n	8004024 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0b8      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d020      	beq.n	8004072 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800403c:	4b59      	ldr	r3, [pc, #356]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	4a58      	ldr	r2, [pc, #352]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004046:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004054:	4b53      	ldr	r3, [pc, #332]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	4a52      	ldr	r2, [pc, #328]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800405e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004060:	4b50      	ldr	r3, [pc, #320]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	494d      	ldr	r1, [pc, #308]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	4313      	orrs	r3, r2
 8004070:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d044      	beq.n	8004108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d107      	bne.n	8004096 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004086:	4b47      	ldr	r3, [pc, #284]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d119      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e07f      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b02      	cmp	r3, #2
 800409c:	d003      	beq.n	80040a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d107      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a6:	4b3f      	ldr	r3, [pc, #252]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e06f      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b6:	4b3b      	ldr	r3, [pc, #236]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e067      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040c6:	4b37      	ldr	r3, [pc, #220]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f023 0203 	bic.w	r2, r3, #3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	4934      	ldr	r1, [pc, #208]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040d8:	f7fc ff4e 	bl	8000f78 <HAL_GetTick>
 80040dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040de:	e00a      	b.n	80040f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e0:	f7fc ff4a 	bl	8000f78 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e04f      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f6:	4b2b      	ldr	r3, [pc, #172]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 020c 	and.w	r2, r3, #12
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	429a      	cmp	r2, r3
 8004106:	d1eb      	bne.n	80040e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004108:	4b25      	ldr	r3, [pc, #148]	; (80041a0 <HAL_RCC_ClockConfig+0x1b8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d20c      	bcs.n	8004130 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004116:	4b22      	ldr	r3, [pc, #136]	; (80041a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800411e:	4b20      	ldr	r3, [pc, #128]	; (80041a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d001      	beq.n	8004130 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e032      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d008      	beq.n	800414e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800413c:	4b19      	ldr	r3, [pc, #100]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	4916      	ldr	r1, [pc, #88]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	4313      	orrs	r3, r2
 800414c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d009      	beq.n	800416e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800415a:	4b12      	ldr	r3, [pc, #72]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	490e      	ldr	r1, [pc, #56]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	4313      	orrs	r3, r2
 800416c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800416e:	f000 f821 	bl	80041b4 <HAL_RCC_GetSysClockFreq>
 8004172:	4602      	mov	r2, r0
 8004174:	4b0b      	ldr	r3, [pc, #44]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	091b      	lsrs	r3, r3, #4
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	490a      	ldr	r1, [pc, #40]	; (80041a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004180:	5ccb      	ldrb	r3, [r1, r3]
 8004182:	fa22 f303 	lsr.w	r3, r2, r3
 8004186:	4a09      	ldr	r2, [pc, #36]	; (80041ac <HAL_RCC_ClockConfig+0x1c4>)
 8004188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800418a:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <HAL_RCC_ClockConfig+0x1c8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f7fc feae 	bl	8000ef0 <HAL_InitTick>

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	40023c00 	.word	0x40023c00
 80041a4:	40023800 	.word	0x40023800
 80041a8:	08009b4c 	.word	0x08009b4c
 80041ac:	20000004 	.word	0x20000004
 80041b0:	20000008 	.word	0x20000008

080041b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041b8:	b090      	sub	sp, #64	; 0x40
 80041ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	637b      	str	r3, [r7, #52]	; 0x34
 80041c0:	2300      	movs	r3, #0
 80041c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041c4:	2300      	movs	r3, #0
 80041c6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041cc:	4b59      	ldr	r3, [pc, #356]	; (8004334 <HAL_RCC_GetSysClockFreq+0x180>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 030c 	and.w	r3, r3, #12
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d00d      	beq.n	80041f4 <HAL_RCC_GetSysClockFreq+0x40>
 80041d8:	2b08      	cmp	r3, #8
 80041da:	f200 80a1 	bhi.w	8004320 <HAL_RCC_GetSysClockFreq+0x16c>
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <HAL_RCC_GetSysClockFreq+0x34>
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d003      	beq.n	80041ee <HAL_RCC_GetSysClockFreq+0x3a>
 80041e6:	e09b      	b.n	8004320 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041e8:	4b53      	ldr	r3, [pc, #332]	; (8004338 <HAL_RCC_GetSysClockFreq+0x184>)
 80041ea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80041ec:	e09b      	b.n	8004326 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041ee:	4b53      	ldr	r3, [pc, #332]	; (800433c <HAL_RCC_GetSysClockFreq+0x188>)
 80041f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041f2:	e098      	b.n	8004326 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041f4:	4b4f      	ldr	r3, [pc, #316]	; (8004334 <HAL_RCC_GetSysClockFreq+0x180>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041fc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041fe:	4b4d      	ldr	r3, [pc, #308]	; (8004334 <HAL_RCC_GetSysClockFreq+0x180>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d028      	beq.n	800425c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800420a:	4b4a      	ldr	r3, [pc, #296]	; (8004334 <HAL_RCC_GetSysClockFreq+0x180>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	099b      	lsrs	r3, r3, #6
 8004210:	2200      	movs	r2, #0
 8004212:	623b      	str	r3, [r7, #32]
 8004214:	627a      	str	r2, [r7, #36]	; 0x24
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800421c:	2100      	movs	r1, #0
 800421e:	4b47      	ldr	r3, [pc, #284]	; (800433c <HAL_RCC_GetSysClockFreq+0x188>)
 8004220:	fb03 f201 	mul.w	r2, r3, r1
 8004224:	2300      	movs	r3, #0
 8004226:	fb00 f303 	mul.w	r3, r0, r3
 800422a:	4413      	add	r3, r2
 800422c:	4a43      	ldr	r2, [pc, #268]	; (800433c <HAL_RCC_GetSysClockFreq+0x188>)
 800422e:	fba0 1202 	umull	r1, r2, r0, r2
 8004232:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004234:	460a      	mov	r2, r1
 8004236:	62ba      	str	r2, [r7, #40]	; 0x28
 8004238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800423a:	4413      	add	r3, r2
 800423c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800423e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004240:	2200      	movs	r2, #0
 8004242:	61bb      	str	r3, [r7, #24]
 8004244:	61fa      	str	r2, [r7, #28]
 8004246:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800424a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800424e:	f7fc f81f 	bl	8000290 <__aeabi_uldivmod>
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	4613      	mov	r3, r2
 8004258:	63fb      	str	r3, [r7, #60]	; 0x3c
 800425a:	e053      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800425c:	4b35      	ldr	r3, [pc, #212]	; (8004334 <HAL_RCC_GetSysClockFreq+0x180>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	099b      	lsrs	r3, r3, #6
 8004262:	2200      	movs	r2, #0
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	617a      	str	r2, [r7, #20]
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800426e:	f04f 0b00 	mov.w	fp, #0
 8004272:	4652      	mov	r2, sl
 8004274:	465b      	mov	r3, fp
 8004276:	f04f 0000 	mov.w	r0, #0
 800427a:	f04f 0100 	mov.w	r1, #0
 800427e:	0159      	lsls	r1, r3, #5
 8004280:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004284:	0150      	lsls	r0, r2, #5
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	ebb2 080a 	subs.w	r8, r2, sl
 800428e:	eb63 090b 	sbc.w	r9, r3, fp
 8004292:	f04f 0200 	mov.w	r2, #0
 8004296:	f04f 0300 	mov.w	r3, #0
 800429a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800429e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80042a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80042a6:	ebb2 0408 	subs.w	r4, r2, r8
 80042aa:	eb63 0509 	sbc.w	r5, r3, r9
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	f04f 0300 	mov.w	r3, #0
 80042b6:	00eb      	lsls	r3, r5, #3
 80042b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042bc:	00e2      	lsls	r2, r4, #3
 80042be:	4614      	mov	r4, r2
 80042c0:	461d      	mov	r5, r3
 80042c2:	eb14 030a 	adds.w	r3, r4, sl
 80042c6:	603b      	str	r3, [r7, #0]
 80042c8:	eb45 030b 	adc.w	r3, r5, fp
 80042cc:	607b      	str	r3, [r7, #4]
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042da:	4629      	mov	r1, r5
 80042dc:	028b      	lsls	r3, r1, #10
 80042de:	4621      	mov	r1, r4
 80042e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042e4:	4621      	mov	r1, r4
 80042e6:	028a      	lsls	r2, r1, #10
 80042e8:	4610      	mov	r0, r2
 80042ea:	4619      	mov	r1, r3
 80042ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ee:	2200      	movs	r2, #0
 80042f0:	60bb      	str	r3, [r7, #8]
 80042f2:	60fa      	str	r2, [r7, #12]
 80042f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042f8:	f7fb ffca 	bl	8000290 <__aeabi_uldivmod>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4613      	mov	r3, r2
 8004302:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004304:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <HAL_RCC_GetSysClockFreq+0x180>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	0c1b      	lsrs	r3, r3, #16
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	3301      	adds	r3, #1
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004314:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004318:	fbb2 f3f3 	udiv	r3, r2, r3
 800431c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800431e:	e002      	b.n	8004326 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004320:	4b05      	ldr	r3, [pc, #20]	; (8004338 <HAL_RCC_GetSysClockFreq+0x184>)
 8004322:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004324:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004328:	4618      	mov	r0, r3
 800432a:	3740      	adds	r7, #64	; 0x40
 800432c:	46bd      	mov	sp, r7
 800432e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004332:	bf00      	nop
 8004334:	40023800 	.word	0x40023800
 8004338:	00f42400 	.word	0x00f42400
 800433c:	017d7840 	.word	0x017d7840

08004340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004344:	4b03      	ldr	r3, [pc, #12]	; (8004354 <HAL_RCC_GetHCLKFreq+0x14>)
 8004346:	681b      	ldr	r3, [r3, #0]
}
 8004348:	4618      	mov	r0, r3
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	20000004 	.word	0x20000004

08004358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e041      	b.n	80043ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d106      	bne.n	8004384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7fc fc6a 	bl	8000c58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3304      	adds	r3, #4
 8004394:	4619      	mov	r1, r3
 8004396:	4610      	mov	r0, r2
 8004398:	f000 fa6c 	bl	8004874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b01      	cmp	r3, #1
 800440a:	d001      	beq.n	8004410 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e03c      	b.n	800448a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a1e      	ldr	r2, [pc, #120]	; (8004498 <HAL_TIM_Base_Start+0xa0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d018      	beq.n	8004454 <HAL_TIM_Base_Start+0x5c>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800442a:	d013      	beq.n	8004454 <HAL_TIM_Base_Start+0x5c>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a1a      	ldr	r2, [pc, #104]	; (800449c <HAL_TIM_Base_Start+0xa4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00e      	beq.n	8004454 <HAL_TIM_Base_Start+0x5c>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a19      	ldr	r2, [pc, #100]	; (80044a0 <HAL_TIM_Base_Start+0xa8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d009      	beq.n	8004454 <HAL_TIM_Base_Start+0x5c>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a17      	ldr	r2, [pc, #92]	; (80044a4 <HAL_TIM_Base_Start+0xac>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d004      	beq.n	8004454 <HAL_TIM_Base_Start+0x5c>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a16      	ldr	r2, [pc, #88]	; (80044a8 <HAL_TIM_Base_Start+0xb0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d111      	bne.n	8004478 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b06      	cmp	r3, #6
 8004464:	d010      	beq.n	8004488 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0201 	orr.w	r2, r2, #1
 8004474:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004476:	e007      	b.n	8004488 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0201 	orr.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40010000 	.word	0x40010000
 800449c:	40000400 	.word	0x40000400
 80044a0:	40000800 	.word	0x40000800
 80044a4:	40000c00 	.word	0x40000c00
 80044a8:	40014000 	.word	0x40014000

080044ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e041      	b.n	8004542 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d106      	bne.n	80044d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f839 	bl	800454a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3304      	adds	r3, #4
 80044e8:	4619      	mov	r1, r3
 80044ea:	4610      	mov	r0, r2
 80044ec:	f000 f9c2 	bl	8004874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
	...

08004560 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800456c:	2300      	movs	r3, #0
 800456e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004576:	2b01      	cmp	r3, #1
 8004578:	d101      	bne.n	800457e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800457a:	2302      	movs	r3, #2
 800457c:	e0ae      	b.n	80046dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b0c      	cmp	r3, #12
 800458a:	f200 809f 	bhi.w	80046cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800458e:	a201      	add	r2, pc, #4	; (adr r2, 8004594 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004594:	080045c9 	.word	0x080045c9
 8004598:	080046cd 	.word	0x080046cd
 800459c:	080046cd 	.word	0x080046cd
 80045a0:	080046cd 	.word	0x080046cd
 80045a4:	08004609 	.word	0x08004609
 80045a8:	080046cd 	.word	0x080046cd
 80045ac:	080046cd 	.word	0x080046cd
 80045b0:	080046cd 	.word	0x080046cd
 80045b4:	0800464b 	.word	0x0800464b
 80045b8:	080046cd 	.word	0x080046cd
 80045bc:	080046cd 	.word	0x080046cd
 80045c0:	080046cd 	.word	0x080046cd
 80045c4:	0800468b 	.word	0x0800468b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 f9d0 	bl	8004974 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699a      	ldr	r2, [r3, #24]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0208 	orr.w	r2, r2, #8
 80045e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699a      	ldr	r2, [r3, #24]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0204 	bic.w	r2, r2, #4
 80045f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6999      	ldr	r1, [r3, #24]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	619a      	str	r2, [r3, #24]
      break;
 8004606:	e064      	b.n	80046d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68b9      	ldr	r1, [r7, #8]
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fa16 	bl	8004a40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699a      	ldr	r2, [r3, #24]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699a      	ldr	r2, [r3, #24]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6999      	ldr	r1, [r3, #24]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	021a      	lsls	r2, r3, #8
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	619a      	str	r2, [r3, #24]
      break;
 8004648:	e043      	b.n	80046d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68b9      	ldr	r1, [r7, #8]
 8004650:	4618      	mov	r0, r3
 8004652:	f000 fa61 	bl	8004b18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	69da      	ldr	r2, [r3, #28]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f042 0208 	orr.w	r2, r2, #8
 8004664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0204 	bic.w	r2, r2, #4
 8004674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69d9      	ldr	r1, [r3, #28]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	61da      	str	r2, [r3, #28]
      break;
 8004688:	e023      	b.n	80046d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68b9      	ldr	r1, [r7, #8]
 8004690:	4618      	mov	r0, r3
 8004692:	f000 faab 	bl	8004bec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	69da      	ldr	r2, [r3, #28]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69da      	ldr	r2, [r3, #28]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69d9      	ldr	r1, [r3, #28]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	021a      	lsls	r2, r3, #8
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	61da      	str	r2, [r3, #28]
      break;
 80046ca:	e002      	b.n	80046d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	75fb      	strb	r3, [r7, #23]
      break;
 80046d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046da:	7dfb      	ldrb	r3, [r7, #23]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <HAL_TIM_ConfigClockSource+0x1c>
 80046fc:	2302      	movs	r3, #2
 80046fe:	e0b4      	b.n	800486a <HAL_TIM_ConfigClockSource+0x186>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800471e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004726:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004738:	d03e      	beq.n	80047b8 <HAL_TIM_ConfigClockSource+0xd4>
 800473a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800473e:	f200 8087 	bhi.w	8004850 <HAL_TIM_ConfigClockSource+0x16c>
 8004742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004746:	f000 8086 	beq.w	8004856 <HAL_TIM_ConfigClockSource+0x172>
 800474a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800474e:	d87f      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x16c>
 8004750:	2b70      	cmp	r3, #112	; 0x70
 8004752:	d01a      	beq.n	800478a <HAL_TIM_ConfigClockSource+0xa6>
 8004754:	2b70      	cmp	r3, #112	; 0x70
 8004756:	d87b      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x16c>
 8004758:	2b60      	cmp	r3, #96	; 0x60
 800475a:	d050      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x11a>
 800475c:	2b60      	cmp	r3, #96	; 0x60
 800475e:	d877      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x16c>
 8004760:	2b50      	cmp	r3, #80	; 0x50
 8004762:	d03c      	beq.n	80047de <HAL_TIM_ConfigClockSource+0xfa>
 8004764:	2b50      	cmp	r3, #80	; 0x50
 8004766:	d873      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x16c>
 8004768:	2b40      	cmp	r3, #64	; 0x40
 800476a:	d058      	beq.n	800481e <HAL_TIM_ConfigClockSource+0x13a>
 800476c:	2b40      	cmp	r3, #64	; 0x40
 800476e:	d86f      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x16c>
 8004770:	2b30      	cmp	r3, #48	; 0x30
 8004772:	d064      	beq.n	800483e <HAL_TIM_ConfigClockSource+0x15a>
 8004774:	2b30      	cmp	r3, #48	; 0x30
 8004776:	d86b      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x16c>
 8004778:	2b20      	cmp	r3, #32
 800477a:	d060      	beq.n	800483e <HAL_TIM_ConfigClockSource+0x15a>
 800477c:	2b20      	cmp	r3, #32
 800477e:	d867      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x16c>
 8004780:	2b00      	cmp	r3, #0
 8004782:	d05c      	beq.n	800483e <HAL_TIM_ConfigClockSource+0x15a>
 8004784:	2b10      	cmp	r3, #16
 8004786:	d05a      	beq.n	800483e <HAL_TIM_ConfigClockSource+0x15a>
 8004788:	e062      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6818      	ldr	r0, [r3, #0]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	6899      	ldr	r1, [r3, #8]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f000 faf1 	bl	8004d80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	609a      	str	r2, [r3, #8]
      break;
 80047b6:	e04f      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6818      	ldr	r0, [r3, #0]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	6899      	ldr	r1, [r3, #8]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f000 fada 	bl	8004d80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047da:	609a      	str	r2, [r3, #8]
      break;
 80047dc:	e03c      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6859      	ldr	r1, [r3, #4]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	461a      	mov	r2, r3
 80047ec:	f000 fa4e 	bl	8004c8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2150      	movs	r1, #80	; 0x50
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 faa7 	bl	8004d4a <TIM_ITRx_SetConfig>
      break;
 80047fc:	e02c      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6818      	ldr	r0, [r3, #0]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	6859      	ldr	r1, [r3, #4]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	461a      	mov	r2, r3
 800480c:	f000 fa6d 	bl	8004cea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2160      	movs	r1, #96	; 0x60
 8004816:	4618      	mov	r0, r3
 8004818:	f000 fa97 	bl	8004d4a <TIM_ITRx_SetConfig>
      break;
 800481c:	e01c      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6818      	ldr	r0, [r3, #0]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	6859      	ldr	r1, [r3, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	461a      	mov	r2, r3
 800482c:	f000 fa2e 	bl	8004c8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2140      	movs	r1, #64	; 0x40
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fa87 	bl	8004d4a <TIM_ITRx_SetConfig>
      break;
 800483c:	e00c      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4619      	mov	r1, r3
 8004848:	4610      	mov	r0, r2
 800484a:	f000 fa7e 	bl	8004d4a <TIM_ITRx_SetConfig>
      break;
 800484e:	e003      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	73fb      	strb	r3, [r7, #15]
      break;
 8004854:	e000      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004856:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004868:	7bfb      	ldrb	r3, [r7, #15]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
	...

08004874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a34      	ldr	r2, [pc, #208]	; (8004958 <TIM_Base_SetConfig+0xe4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d00f      	beq.n	80048ac <TIM_Base_SetConfig+0x38>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004892:	d00b      	beq.n	80048ac <TIM_Base_SetConfig+0x38>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a31      	ldr	r2, [pc, #196]	; (800495c <TIM_Base_SetConfig+0xe8>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d007      	beq.n	80048ac <TIM_Base_SetConfig+0x38>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a30      	ldr	r2, [pc, #192]	; (8004960 <TIM_Base_SetConfig+0xec>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d003      	beq.n	80048ac <TIM_Base_SetConfig+0x38>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a2f      	ldr	r2, [pc, #188]	; (8004964 <TIM_Base_SetConfig+0xf0>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d108      	bne.n	80048be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a25      	ldr	r2, [pc, #148]	; (8004958 <TIM_Base_SetConfig+0xe4>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d01b      	beq.n	80048fe <TIM_Base_SetConfig+0x8a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048cc:	d017      	beq.n	80048fe <TIM_Base_SetConfig+0x8a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a22      	ldr	r2, [pc, #136]	; (800495c <TIM_Base_SetConfig+0xe8>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d013      	beq.n	80048fe <TIM_Base_SetConfig+0x8a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a21      	ldr	r2, [pc, #132]	; (8004960 <TIM_Base_SetConfig+0xec>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d00f      	beq.n	80048fe <TIM_Base_SetConfig+0x8a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a20      	ldr	r2, [pc, #128]	; (8004964 <TIM_Base_SetConfig+0xf0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00b      	beq.n	80048fe <TIM_Base_SetConfig+0x8a>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a1f      	ldr	r2, [pc, #124]	; (8004968 <TIM_Base_SetConfig+0xf4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d007      	beq.n	80048fe <TIM_Base_SetConfig+0x8a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a1e      	ldr	r2, [pc, #120]	; (800496c <TIM_Base_SetConfig+0xf8>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d003      	beq.n	80048fe <TIM_Base_SetConfig+0x8a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a1d      	ldr	r2, [pc, #116]	; (8004970 <TIM_Base_SetConfig+0xfc>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d108      	bne.n	8004910 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	4313      	orrs	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a08      	ldr	r2, [pc, #32]	; (8004958 <TIM_Base_SetConfig+0xe4>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d103      	bne.n	8004944 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	615a      	str	r2, [r3, #20]
}
 800494a:	bf00      	nop
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	40010000 	.word	0x40010000
 800495c:	40000400 	.word	0x40000400
 8004960:	40000800 	.word	0x40000800
 8004964:	40000c00 	.word	0x40000c00
 8004968:	40014000 	.word	0x40014000
 800496c:	40014400 	.word	0x40014400
 8004970:	40014800 	.word	0x40014800

08004974 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	f023 0201 	bic.w	r2, r3, #1
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0303 	bic.w	r3, r3, #3
 80049aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f023 0302 	bic.w	r3, r3, #2
 80049bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a1c      	ldr	r2, [pc, #112]	; (8004a3c <TIM_OC1_SetConfig+0xc8>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d10c      	bne.n	80049ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f023 0308 	bic.w	r3, r3, #8
 80049d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	4313      	orrs	r3, r2
 80049e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f023 0304 	bic.w	r3, r3, #4
 80049e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a13      	ldr	r2, [pc, #76]	; (8004a3c <TIM_OC1_SetConfig+0xc8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d111      	bne.n	8004a16 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	621a      	str	r2, [r3, #32]
}
 8004a30:	bf00      	nop
 8004a32:	371c      	adds	r7, #28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	40010000 	.word	0x40010000

08004a40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	f023 0210 	bic.w	r2, r3, #16
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	021b      	lsls	r3, r3, #8
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f023 0320 	bic.w	r3, r3, #32
 8004a8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a1e      	ldr	r2, [pc, #120]	; (8004b14 <TIM_OC2_SetConfig+0xd4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d10d      	bne.n	8004abc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a15      	ldr	r2, [pc, #84]	; (8004b14 <TIM_OC2_SetConfig+0xd4>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d113      	bne.n	8004aec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	621a      	str	r2, [r3, #32]
}
 8004b06:	bf00      	nop
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40010000 	.word	0x40010000

08004b18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f023 0303 	bic.w	r3, r3, #3
 8004b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a1d      	ldr	r2, [pc, #116]	; (8004be8 <TIM_OC3_SetConfig+0xd0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d10d      	bne.n	8004b92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	021b      	lsls	r3, r3, #8
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a14      	ldr	r2, [pc, #80]	; (8004be8 <TIM_OC3_SetConfig+0xd0>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d113      	bne.n	8004bc2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	621a      	str	r2, [r3, #32]
}
 8004bdc:	bf00      	nop
 8004bde:	371c      	adds	r7, #28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	40010000 	.word	0x40010000

08004bec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	021b      	lsls	r3, r3, #8
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	031b      	lsls	r3, r3, #12
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a10      	ldr	r2, [pc, #64]	; (8004c88 <TIM_OC4_SetConfig+0x9c>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d109      	bne.n	8004c60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	019b      	lsls	r3, r3, #6
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	621a      	str	r2, [r3, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	40010000 	.word	0x40010000

08004c8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	f023 0201 	bic.w	r2, r3, #1
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f023 030a 	bic.w	r3, r3, #10
 8004cc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	621a      	str	r2, [r3, #32]
}
 8004cde:	bf00      	nop
 8004ce0:	371c      	adds	r7, #28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b087      	sub	sp, #28
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	60f8      	str	r0, [r7, #12]
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	f023 0210 	bic.w	r2, r3, #16
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	031b      	lsls	r3, r3, #12
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	011b      	lsls	r3, r3, #4
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	621a      	str	r2, [r3, #32]
}
 8004d3e:	bf00      	nop
 8004d40:	371c      	adds	r7, #28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b085      	sub	sp, #20
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f043 0307 	orr.w	r3, r3, #7
 8004d6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	609a      	str	r2, [r3, #8]
}
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	021a      	lsls	r2, r3, #8
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	431a      	orrs	r2, r3
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	609a      	str	r2, [r3, #8]
}
 8004db4:	bf00      	nop
 8004db6:	371c      	adds	r7, #28
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d101      	bne.n	8004dd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	e050      	b.n	8004e7a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a1c      	ldr	r2, [pc, #112]	; (8004e88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d018      	beq.n	8004e4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e24:	d013      	beq.n	8004e4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a18      	ldr	r2, [pc, #96]	; (8004e8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00e      	beq.n	8004e4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a16      	ldr	r2, [pc, #88]	; (8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d009      	beq.n	8004e4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a15      	ldr	r2, [pc, #84]	; (8004e94 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d004      	beq.n	8004e4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a13      	ldr	r2, [pc, #76]	; (8004e98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d10c      	bne.n	8004e68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	40010000 	.word	0x40010000
 8004e8c:	40000400 	.word	0x40000400
 8004e90:	40000800 	.word	0x40000800
 8004e94:	40000c00 	.word	0x40000c00
 8004e98:	40014000 	.word	0x40014000

08004e9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d101      	bne.n	8004eb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	e03d      	b.n	8004f34 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f40:	b084      	sub	sp, #16
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b084      	sub	sp, #16
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
 8004f4a:	f107 001c 	add.w	r0, r7, #28
 8004f4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d122      	bne.n	8004f9e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d105      	bne.n	8004f92 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f001 fbee 	bl	8006774 <USB_CoreReset>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	73fb      	strb	r3, [r7, #15]
 8004f9c:	e01a      	b.n	8004fd4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f001 fbe2 	bl	8006774 <USB_CoreReset>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	639a      	str	r2, [r3, #56]	; 0x38
 8004fc6:	e005      	b.n	8004fd4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d10b      	bne.n	8004ff2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f043 0206 	orr.w	r2, r3, #6
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f043 0220 	orr.w	r2, r3, #32
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ffe:	b004      	add	sp, #16
 8005000:	4770      	bx	lr
	...

08005004 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	4613      	mov	r3, r2
 8005010:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005012:	79fb      	ldrb	r3, [r7, #7]
 8005014:	2b02      	cmp	r3, #2
 8005016:	d165      	bne.n	80050e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	4a41      	ldr	r2, [pc, #260]	; (8005120 <USB_SetTurnaroundTime+0x11c>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d906      	bls.n	800502e <USB_SetTurnaroundTime+0x2a>
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	4a40      	ldr	r2, [pc, #256]	; (8005124 <USB_SetTurnaroundTime+0x120>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d202      	bcs.n	800502e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005028:	230f      	movs	r3, #15
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	e062      	b.n	80050f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	4a3c      	ldr	r2, [pc, #240]	; (8005124 <USB_SetTurnaroundTime+0x120>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d306      	bcc.n	8005044 <USB_SetTurnaroundTime+0x40>
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	4a3b      	ldr	r2, [pc, #236]	; (8005128 <USB_SetTurnaroundTime+0x124>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d202      	bcs.n	8005044 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800503e:	230e      	movs	r3, #14
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	e057      	b.n	80050f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	4a38      	ldr	r2, [pc, #224]	; (8005128 <USB_SetTurnaroundTime+0x124>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d306      	bcc.n	800505a <USB_SetTurnaroundTime+0x56>
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4a37      	ldr	r2, [pc, #220]	; (800512c <USB_SetTurnaroundTime+0x128>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d202      	bcs.n	800505a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005054:	230d      	movs	r3, #13
 8005056:	617b      	str	r3, [r7, #20]
 8005058:	e04c      	b.n	80050f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	4a33      	ldr	r2, [pc, #204]	; (800512c <USB_SetTurnaroundTime+0x128>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d306      	bcc.n	8005070 <USB_SetTurnaroundTime+0x6c>
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	4a32      	ldr	r2, [pc, #200]	; (8005130 <USB_SetTurnaroundTime+0x12c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d802      	bhi.n	8005070 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800506a:	230c      	movs	r3, #12
 800506c:	617b      	str	r3, [r7, #20]
 800506e:	e041      	b.n	80050f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4a2f      	ldr	r2, [pc, #188]	; (8005130 <USB_SetTurnaroundTime+0x12c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d906      	bls.n	8005086 <USB_SetTurnaroundTime+0x82>
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	4a2e      	ldr	r2, [pc, #184]	; (8005134 <USB_SetTurnaroundTime+0x130>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d802      	bhi.n	8005086 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005080:	230b      	movs	r3, #11
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	e036      	b.n	80050f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	4a2a      	ldr	r2, [pc, #168]	; (8005134 <USB_SetTurnaroundTime+0x130>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d906      	bls.n	800509c <USB_SetTurnaroundTime+0x98>
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	4a29      	ldr	r2, [pc, #164]	; (8005138 <USB_SetTurnaroundTime+0x134>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d802      	bhi.n	800509c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005096:	230a      	movs	r3, #10
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	e02b      	b.n	80050f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	4a26      	ldr	r2, [pc, #152]	; (8005138 <USB_SetTurnaroundTime+0x134>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d906      	bls.n	80050b2 <USB_SetTurnaroundTime+0xae>
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	4a25      	ldr	r2, [pc, #148]	; (800513c <USB_SetTurnaroundTime+0x138>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d202      	bcs.n	80050b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80050ac:	2309      	movs	r3, #9
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	e020      	b.n	80050f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	4a21      	ldr	r2, [pc, #132]	; (800513c <USB_SetTurnaroundTime+0x138>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d306      	bcc.n	80050c8 <USB_SetTurnaroundTime+0xc4>
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	4a20      	ldr	r2, [pc, #128]	; (8005140 <USB_SetTurnaroundTime+0x13c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d802      	bhi.n	80050c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80050c2:	2308      	movs	r3, #8
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	e015      	b.n	80050f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4a1d      	ldr	r2, [pc, #116]	; (8005140 <USB_SetTurnaroundTime+0x13c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d906      	bls.n	80050de <USB_SetTurnaroundTime+0xda>
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	4a1c      	ldr	r2, [pc, #112]	; (8005144 <USB_SetTurnaroundTime+0x140>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d202      	bcs.n	80050de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80050d8:	2307      	movs	r3, #7
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	e00a      	b.n	80050f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80050de:	2306      	movs	r3, #6
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	e007      	b.n	80050f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80050e4:	79fb      	ldrb	r3, [r7, #7]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d102      	bne.n	80050f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80050ea:	2309      	movs	r3, #9
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	e001      	b.n	80050f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80050f0:	2309      	movs	r3, #9
 80050f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	029b      	lsls	r3, r3, #10
 8005108:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800510c:	431a      	orrs	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	00d8acbf 	.word	0x00d8acbf
 8005124:	00e4e1c0 	.word	0x00e4e1c0
 8005128:	00f42400 	.word	0x00f42400
 800512c:	01067380 	.word	0x01067380
 8005130:	011a499f 	.word	0x011a499f
 8005134:	01312cff 	.word	0x01312cff
 8005138:	014ca43f 	.word	0x014ca43f
 800513c:	016e3600 	.word	0x016e3600
 8005140:	01a6ab1f 	.word	0x01a6ab1f
 8005144:	01e84800 	.word	0x01e84800

08005148 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f043 0201 	orr.w	r2, r3, #1
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f023 0201 	bic.w	r2, r3, #1
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	460b      	mov	r3, r1
 8005196:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051a8:	78fb      	ldrb	r3, [r7, #3]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d115      	bne.n	80051da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051ba:	2001      	movs	r0, #1
 80051bc:	f7fb fee8 	bl	8000f90 <HAL_Delay>
      ms++;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	3301      	adds	r3, #1
 80051c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f001 fa45 	bl	8006656 <USB_GetMode>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d01e      	beq.n	8005210 <USB_SetCurrentMode+0x84>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b31      	cmp	r3, #49	; 0x31
 80051d6:	d9f0      	bls.n	80051ba <USB_SetCurrentMode+0x2e>
 80051d8:	e01a      	b.n	8005210 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80051da:	78fb      	ldrb	r3, [r7, #3]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d115      	bne.n	800520c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051ec:	2001      	movs	r0, #1
 80051ee:	f7fb fecf 	bl	8000f90 <HAL_Delay>
      ms++;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	3301      	adds	r3, #1
 80051f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f001 fa2c 	bl	8006656 <USB_GetMode>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d005      	beq.n	8005210 <USB_SetCurrentMode+0x84>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b31      	cmp	r3, #49	; 0x31
 8005208:	d9f0      	bls.n	80051ec <USB_SetCurrentMode+0x60>
 800520a:	e001      	b.n	8005210 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e005      	b.n	800521c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2b32      	cmp	r3, #50	; 0x32
 8005214:	d101      	bne.n	800521a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005224:	b084      	sub	sp, #16
 8005226:	b580      	push	{r7, lr}
 8005228:	b086      	sub	sp, #24
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005232:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800523e:	2300      	movs	r3, #0
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	e009      	b.n	8005258 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	3340      	adds	r3, #64	; 0x40
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	2200      	movs	r2, #0
 8005250:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	3301      	adds	r3, #1
 8005256:	613b      	str	r3, [r7, #16]
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	2b0e      	cmp	r3, #14
 800525c:	d9f2      	bls.n	8005244 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800525e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005260:	2b00      	cmp	r3, #0
 8005262:	d11c      	bne.n	800529e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005272:	f043 0302 	orr.w	r3, r3, #2
 8005276:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005288:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005294:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	639a      	str	r2, [r3, #56]	; 0x38
 800529c:	e00b      	b.n	80052b6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052bc:	461a      	mov	r2, r3
 80052be:	2300      	movs	r3, #0
 80052c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c8:	4619      	mov	r1, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d0:	461a      	mov	r2, r3
 80052d2:	680b      	ldr	r3, [r1, #0]
 80052d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d10c      	bne.n	80052f6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80052dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d104      	bne.n	80052ec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80052e2:	2100      	movs	r1, #0
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f965 	bl	80055b4 <USB_SetDevSpeed>
 80052ea:	e008      	b.n	80052fe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80052ec:	2101      	movs	r1, #1
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f960 	bl	80055b4 <USB_SetDevSpeed>
 80052f4:	e003      	b.n	80052fe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80052f6:	2103      	movs	r1, #3
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 f95b 	bl	80055b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052fe:	2110      	movs	r1, #16
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f8f3 	bl	80054ec <USB_FlushTxFifo>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d001      	beq.n	8005310 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f91f 	bl	8005554 <USB_FlushRxFifo>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005326:	461a      	mov	r2, r3
 8005328:	2300      	movs	r3, #0
 800532a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005332:	461a      	mov	r2, r3
 8005334:	2300      	movs	r3, #0
 8005336:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800533e:	461a      	mov	r2, r3
 8005340:	2300      	movs	r3, #0
 8005342:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005344:	2300      	movs	r3, #0
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	e043      	b.n	80053d2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	4413      	add	r3, r2
 8005352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800535c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005360:	d118      	bne.n	8005394 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10a      	bne.n	800537e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005374:	461a      	mov	r2, r3
 8005376:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	e013      	b.n	80053a6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	4413      	add	r3, r2
 8005386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538a:	461a      	mov	r2, r3
 800538c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	e008      	b.n	80053a6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a0:	461a      	mov	r2, r3
 80053a2:	2300      	movs	r3, #0
 80053a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b2:	461a      	mov	r2, r3
 80053b4:	2300      	movs	r3, #0
 80053b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c4:	461a      	mov	r2, r3
 80053c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	3301      	adds	r3, #1
 80053d0:	613b      	str	r3, [r7, #16]
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d3b7      	bcc.n	800534a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053da:	2300      	movs	r3, #0
 80053dc:	613b      	str	r3, [r7, #16]
 80053de:	e043      	b.n	8005468 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053f6:	d118      	bne.n	800542a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10a      	bne.n	8005414 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	4413      	add	r3, r2
 8005406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540a:	461a      	mov	r2, r3
 800540c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	e013      	b.n	800543c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005420:	461a      	mov	r2, r3
 8005422:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	e008      	b.n	800543c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005436:	461a      	mov	r2, r3
 8005438:	2300      	movs	r3, #0
 800543a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005448:	461a      	mov	r2, r3
 800544a:	2300      	movs	r3, #0
 800544c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	015a      	lsls	r2, r3, #5
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4413      	add	r3, r2
 8005456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545a:	461a      	mov	r2, r3
 800545c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005460:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	3301      	adds	r3, #1
 8005466:	613b      	str	r3, [r7, #16]
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	429a      	cmp	r2, r3
 800546e:	d3b7      	bcc.n	80053e0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800547e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005482:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005490:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005494:	2b00      	cmp	r3, #0
 8005496:	d105      	bne.n	80054a4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	f043 0210 	orr.w	r2, r3, #16
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	699a      	ldr	r2, [r3, #24]
 80054a8:	4b0f      	ldr	r3, [pc, #60]	; (80054e8 <USB_DevInit+0x2c4>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d005      	beq.n	80054c2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	f043 0208 	orr.w	r2, r3, #8
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80054c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d107      	bne.n	80054d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054d0:	f043 0304 	orr.w	r3, r3, #4
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80054d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054e4:	b004      	add	sp, #16
 80054e6:	4770      	bx	lr
 80054e8:	803c3800 	.word	0x803c3800

080054ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	3301      	adds	r3, #1
 80054fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4a13      	ldr	r2, [pc, #76]	; (8005550 <USB_FlushTxFifo+0x64>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d901      	bls.n	800550c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e01b      	b.n	8005544 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	daf2      	bge.n	80054fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005514:	2300      	movs	r3, #0
 8005516:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	019b      	lsls	r3, r3, #6
 800551c:	f043 0220 	orr.w	r2, r3, #32
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3301      	adds	r3, #1
 8005528:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4a08      	ldr	r2, [pc, #32]	; (8005550 <USB_FlushTxFifo+0x64>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d901      	bls.n	8005536 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e006      	b.n	8005544 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	f003 0320 	and.w	r3, r3, #32
 800553e:	2b20      	cmp	r3, #32
 8005540:	d0f0      	beq.n	8005524 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	00030d40 	.word	0x00030d40

08005554 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	3301      	adds	r3, #1
 8005564:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	4a11      	ldr	r2, [pc, #68]	; (80055b0 <USB_FlushRxFifo+0x5c>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d901      	bls.n	8005572 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e018      	b.n	80055a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	2b00      	cmp	r3, #0
 8005578:	daf2      	bge.n	8005560 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2210      	movs	r2, #16
 8005582:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	3301      	adds	r3, #1
 8005588:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4a08      	ldr	r2, [pc, #32]	; (80055b0 <USB_FlushRxFifo+0x5c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d901      	bls.n	8005596 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e006      	b.n	80055a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	f003 0310 	and.w	r3, r3, #16
 800559e:	2b10      	cmp	r3, #16
 80055a0:	d0f0      	beq.n	8005584 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	00030d40 	.word	0x00030d40

080055b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	78fb      	ldrb	r3, [r7, #3]
 80055ce:	68f9      	ldr	r1, [r7, #12]
 80055d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055d4:	4313      	orrs	r3, r2
 80055d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b087      	sub	sp, #28
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 0306 	and.w	r3, r3, #6
 80055fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d102      	bne.n	800560c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005606:	2300      	movs	r3, #0
 8005608:	75fb      	strb	r3, [r7, #23]
 800560a:	e00a      	b.n	8005622 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2b02      	cmp	r3, #2
 8005610:	d002      	beq.n	8005618 <USB_GetDevSpeed+0x32>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2b06      	cmp	r3, #6
 8005616:	d102      	bne.n	800561e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005618:	2302      	movs	r3, #2
 800561a:	75fb      	strb	r3, [r7, #23]
 800561c:	e001      	b.n	8005622 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800561e:	230f      	movs	r3, #15
 8005620:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005622:	7dfb      	ldrb	r3, [r7, #23]
}
 8005624:	4618      	mov	r0, r3
 8005626:	371c      	adds	r7, #28
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	785b      	ldrb	r3, [r3, #1]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d13a      	bne.n	80056c2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005652:	69da      	ldr	r2, [r3, #28]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	f003 030f 	and.w	r3, r3, #15
 800565c:	2101      	movs	r1, #1
 800565e:	fa01 f303 	lsl.w	r3, r1, r3
 8005662:	b29b      	uxth	r3, r3
 8005664:	68f9      	ldr	r1, [r7, #12]
 8005666:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800566a:	4313      	orrs	r3, r2
 800566c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	4413      	add	r3, r2
 8005676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d155      	bne.n	8005730 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	791b      	ldrb	r3, [r3, #4]
 800569e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	059b      	lsls	r3, r3, #22
 80056a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056a8:	4313      	orrs	r3, r2
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	0151      	lsls	r1, r2, #5
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	440a      	add	r2, r1
 80056b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056be:	6013      	str	r3, [r2, #0]
 80056c0:	e036      	b.n	8005730 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c8:	69da      	ldr	r2, [r3, #28]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	2101      	movs	r1, #1
 80056d4:	fa01 f303 	lsl.w	r3, r1, r3
 80056d8:	041b      	lsls	r3, r3, #16
 80056da:	68f9      	ldr	r1, [r7, #12]
 80056dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056e0:	4313      	orrs	r3, r2
 80056e2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d11a      	bne.n	8005730 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	4413      	add	r3, r2
 8005702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	791b      	ldrb	r3, [r3, #4]
 8005714:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005716:	430b      	orrs	r3, r1
 8005718:	4313      	orrs	r3, r2
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	0151      	lsls	r1, r2, #5
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	440a      	add	r2, r1
 8005722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800572a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800572e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
	...

08005740 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	785b      	ldrb	r3, [r3, #1]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d161      	bne.n	8005820 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4413      	add	r3, r2
 8005764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800576e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005772:	d11f      	bne.n	80057b4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	0151      	lsls	r1, r2, #5
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	440a      	add	r2, r1
 800578a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800578e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005792:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	0151      	lsls	r1, r2, #5
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	440a      	add	r2, r1
 80057aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	f003 030f 	and.w	r3, r3, #15
 80057c4:	2101      	movs	r1, #1
 80057c6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	43db      	mvns	r3, r3
 80057ce:	68f9      	ldr	r1, [r7, #12]
 80057d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057d4:	4013      	ands	r3, r2
 80057d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057de:	69da      	ldr	r2, [r3, #28]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	f003 030f 	and.w	r3, r3, #15
 80057e8:	2101      	movs	r1, #1
 80057ea:	fa01 f303 	lsl.w	r3, r1, r3
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	43db      	mvns	r3, r3
 80057f2:	68f9      	ldr	r1, [r7, #12]
 80057f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057f8:	4013      	ands	r3, r2
 80057fa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	0159      	lsls	r1, r3, #5
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	440b      	add	r3, r1
 8005812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005816:	4619      	mov	r1, r3
 8005818:	4b35      	ldr	r3, [pc, #212]	; (80058f0 <USB_DeactivateEndpoint+0x1b0>)
 800581a:	4013      	ands	r3, r2
 800581c:	600b      	str	r3, [r1, #0]
 800581e:	e060      	b.n	80058e2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005832:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005836:	d11f      	bne.n	8005878 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	0151      	lsls	r1, r2, #5
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	440a      	add	r2, r1
 800584e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005852:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005856:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	0151      	lsls	r1, r2, #5
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	440a      	add	r2, r1
 800586e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005872:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005876:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	f003 030f 	and.w	r3, r3, #15
 8005888:	2101      	movs	r1, #1
 800588a:	fa01 f303 	lsl.w	r3, r1, r3
 800588e:	041b      	lsls	r3, r3, #16
 8005890:	43db      	mvns	r3, r3
 8005892:	68f9      	ldr	r1, [r7, #12]
 8005894:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005898:	4013      	ands	r3, r2
 800589a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a2:	69da      	ldr	r2, [r3, #28]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	f003 030f 	and.w	r3, r3, #15
 80058ac:	2101      	movs	r1, #1
 80058ae:	fa01 f303 	lsl.w	r3, r1, r3
 80058b2:	041b      	lsls	r3, r3, #16
 80058b4:	43db      	mvns	r3, r3
 80058b6:	68f9      	ldr	r1, [r7, #12]
 80058b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058bc:	4013      	ands	r3, r2
 80058be:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	0159      	lsls	r1, r3, #5
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	440b      	add	r3, r1
 80058d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058da:	4619      	mov	r1, r3
 80058dc:	4b05      	ldr	r3, [pc, #20]	; (80058f4 <USB_DeactivateEndpoint+0x1b4>)
 80058de:	4013      	ands	r3, r2
 80058e0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	ec337800 	.word	0xec337800
 80058f4:	eff37800 	.word	0xeff37800

080058f8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08a      	sub	sp, #40	; 0x28
 80058fc:	af02      	add	r7, sp, #8
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	4613      	mov	r3, r2
 8005904:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	785b      	ldrb	r3, [r3, #1]
 8005914:	2b01      	cmp	r3, #1
 8005916:	f040 815c 	bne.w	8005bd2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d132      	bne.n	8005988 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	4413      	add	r3, r2
 800592a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	0151      	lsls	r1, r2, #5
 8005934:	69fa      	ldr	r2, [r7, #28]
 8005936:	440a      	add	r2, r1
 8005938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800593c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005940:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005944:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	0151      	lsls	r1, r2, #5
 8005958:	69fa      	ldr	r2, [r7, #28]
 800595a:	440a      	add	r2, r1
 800595c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005960:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005964:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	4413      	add	r3, r2
 800596e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	0151      	lsls	r1, r2, #5
 8005978:	69fa      	ldr	r2, [r7, #28]
 800597a:	440a      	add	r2, r1
 800597c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005980:	0cdb      	lsrs	r3, r3, #19
 8005982:	04db      	lsls	r3, r3, #19
 8005984:	6113      	str	r3, [r2, #16]
 8005986:	e074      	b.n	8005a72 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	0151      	lsls	r1, r2, #5
 800599a:	69fa      	ldr	r2, [r7, #28]
 800599c:	440a      	add	r2, r1
 800599e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a2:	0cdb      	lsrs	r3, r3, #19
 80059a4:	04db      	lsls	r3, r3, #19
 80059a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	0151      	lsls	r1, r2, #5
 80059ba:	69fa      	ldr	r2, [r7, #28]
 80059bc:	440a      	add	r2, r1
 80059be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	6999      	ldr	r1, [r3, #24]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	440b      	add	r3, r1
 80059e4:	1e59      	subs	r1, r3, #1
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80059ee:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80059f0:	4b9d      	ldr	r3, [pc, #628]	; (8005c68 <USB_EPStartXfer+0x370>)
 80059f2:	400b      	ands	r3, r1
 80059f4:	69b9      	ldr	r1, [r7, #24]
 80059f6:	0148      	lsls	r0, r1, #5
 80059f8:	69f9      	ldr	r1, [r7, #28]
 80059fa:	4401      	add	r1, r0
 80059fc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a00:	4313      	orrs	r3, r2
 8005a02:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a10:	691a      	ldr	r2, [r3, #16]
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a1a:	69b9      	ldr	r1, [r7, #24]
 8005a1c:	0148      	lsls	r0, r1, #5
 8005a1e:	69f9      	ldr	r1, [r7, #28]
 8005a20:	4401      	add	r1, r0
 8005a22:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a26:	4313      	orrs	r3, r2
 8005a28:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	791b      	ldrb	r3, [r3, #4]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d11f      	bne.n	8005a72 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	0151      	lsls	r1, r2, #5
 8005a44:	69fa      	ldr	r2, [r7, #28]
 8005a46:	440a      	add	r2, r1
 8005a48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a4c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005a50:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	0151      	lsls	r1, r2, #5
 8005a64:	69fa      	ldr	r2, [r7, #28]
 8005a66:	440a      	add	r2, r1
 8005a68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a70:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005a72:	79fb      	ldrb	r3, [r7, #7]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d14b      	bne.n	8005b10 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d009      	beq.n	8005a94 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	791b      	ldrb	r3, [r3, #4]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d128      	bne.n	8005aee <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d110      	bne.n	8005ace <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	0151      	lsls	r1, r2, #5
 8005abe:	69fa      	ldr	r2, [r7, #28]
 8005ac0:	440a      	add	r2, r1
 8005ac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ac6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005aca:	6013      	str	r3, [r2, #0]
 8005acc:	e00f      	b.n	8005aee <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	0151      	lsls	r1, r2, #5
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	440a      	add	r2, r1
 8005ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aec:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	0151      	lsls	r1, r2, #5
 8005b00:	69fa      	ldr	r2, [r7, #28]
 8005b02:	440a      	add	r2, r1
 8005b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	e133      	b.n	8005d78 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	0151      	lsls	r1, r2, #5
 8005b22:	69fa      	ldr	r2, [r7, #28]
 8005b24:	440a      	add	r2, r1
 8005b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b2e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	791b      	ldrb	r3, [r3, #4]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d015      	beq.n	8005b64 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 811b 	beq.w	8005d78 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	f003 030f 	and.w	r3, r3, #15
 8005b52:	2101      	movs	r1, #1
 8005b54:	fa01 f303 	lsl.w	r3, r1, r3
 8005b58:	69f9      	ldr	r1, [r7, #28]
 8005b5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	634b      	str	r3, [r1, #52]	; 0x34
 8005b62:	e109      	b.n	8005d78 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d110      	bne.n	8005b96 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	0151      	lsls	r1, r2, #5
 8005b86:	69fa      	ldr	r2, [r7, #28]
 8005b88:	440a      	add	r2, r1
 8005b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b92:	6013      	str	r3, [r2, #0]
 8005b94:	e00f      	b.n	8005bb6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	0151      	lsls	r1, r2, #5
 8005ba8:	69fa      	ldr	r2, [r7, #28]
 8005baa:	440a      	add	r2, r1
 8005bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bb4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	6919      	ldr	r1, [r3, #16]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	781a      	ldrb	r2, [r3, #0]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	b298      	uxth	r0, r3
 8005bc4:	79fb      	ldrb	r3, [r7, #7]
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	4603      	mov	r3, r0
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f000 fade 	bl	800618c <USB_WritePacket>
 8005bd0:	e0d2      	b.n	8005d78 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	0151      	lsls	r1, r2, #5
 8005be4:	69fa      	ldr	r2, [r7, #28]
 8005be6:	440a      	add	r2, r1
 8005be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bec:	0cdb      	lsrs	r3, r3, #19
 8005bee:	04db      	lsls	r3, r3, #19
 8005bf0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	0151      	lsls	r1, r2, #5
 8005c04:	69fa      	ldr	r2, [r7, #28]
 8005c06:	440a      	add	r2, r1
 8005c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c14:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d126      	bne.n	8005c6c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2a:	691a      	ldr	r2, [r3, #16]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c34:	69b9      	ldr	r1, [r7, #24]
 8005c36:	0148      	lsls	r0, r1, #5
 8005c38:	69f9      	ldr	r1, [r7, #28]
 8005c3a:	4401      	add	r1, r0
 8005c3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c40:	4313      	orrs	r3, r2
 8005c42:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	0151      	lsls	r1, r2, #5
 8005c56:	69fa      	ldr	r2, [r7, #28]
 8005c58:	440a      	add	r2, r1
 8005c5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c62:	6113      	str	r3, [r2, #16]
 8005c64:	e03a      	b.n	8005cdc <USB_EPStartXfer+0x3e4>
 8005c66:	bf00      	nop
 8005c68:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	699a      	ldr	r2, [r3, #24]
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	4413      	add	r3, r2
 8005c76:	1e5a      	subs	r2, r3, #1
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c80:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	8afa      	ldrh	r2, [r7, #22]
 8005c88:	fb03 f202 	mul.w	r2, r3, r2
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9c:	691a      	ldr	r2, [r3, #16]
 8005c9e:	8afb      	ldrh	r3, [r7, #22]
 8005ca0:	04d9      	lsls	r1, r3, #19
 8005ca2:	4b38      	ldr	r3, [pc, #224]	; (8005d84 <USB_EPStartXfer+0x48c>)
 8005ca4:	400b      	ands	r3, r1
 8005ca6:	69b9      	ldr	r1, [r7, #24]
 8005ca8:	0148      	lsls	r0, r1, #5
 8005caa:	69f9      	ldr	r1, [r7, #28]
 8005cac:	4401      	add	r1, r0
 8005cae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc2:	691a      	ldr	r2, [r3, #16]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ccc:	69b9      	ldr	r1, [r7, #24]
 8005cce:	0148      	lsls	r0, r1, #5
 8005cd0:	69f9      	ldr	r1, [r7, #28]
 8005cd2:	4401      	add	r1, r0
 8005cd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005cdc:	79fb      	ldrb	r3, [r7, #7]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d10d      	bne.n	8005cfe <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d009      	beq.n	8005cfe <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	6919      	ldr	r1, [r3, #16]
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfa:	460a      	mov	r2, r1
 8005cfc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	791b      	ldrb	r3, [r3, #4]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d128      	bne.n	8005d58 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d110      	bne.n	8005d38 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	0151      	lsls	r1, r2, #5
 8005d28:	69fa      	ldr	r2, [r7, #28]
 8005d2a:	440a      	add	r2, r1
 8005d2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d34:	6013      	str	r3, [r2, #0]
 8005d36:	e00f      	b.n	8005d58 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	0151      	lsls	r1, r2, #5
 8005d4a:	69fa      	ldr	r2, [r7, #28]
 8005d4c:	440a      	add	r2, r1
 8005d4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d56:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	0151      	lsls	r1, r2, #5
 8005d6a:	69fa      	ldr	r2, [r7, #28]
 8005d6c:	440a      	add	r2, r1
 8005d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3720      	adds	r7, #32
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	1ff80000 	.word	0x1ff80000

08005d88 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	4613      	mov	r3, r2
 8005d94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	785b      	ldrb	r3, [r3, #1]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	f040 80ce 	bne.w	8005f46 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d132      	bne.n	8005e18 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	0151      	lsls	r1, r2, #5
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	440a      	add	r2, r1
 8005dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005dd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005dd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	0151      	lsls	r1, r2, #5
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	440a      	add	r2, r1
 8005dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005df4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	0151      	lsls	r1, r2, #5
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	440a      	add	r2, r1
 8005e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e10:	0cdb      	lsrs	r3, r3, #19
 8005e12:	04db      	lsls	r3, r3, #19
 8005e14:	6113      	str	r3, [r2, #16]
 8005e16:	e04e      	b.n	8005eb6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	0151      	lsls	r1, r2, #5
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	440a      	add	r2, r1
 8005e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e32:	0cdb      	lsrs	r3, r3, #19
 8005e34:	04db      	lsls	r3, r3, #19
 8005e36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	0151      	lsls	r1, r2, #5
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	440a      	add	r2, r1
 8005e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e5a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	699a      	ldr	r2, [r3, #24]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d903      	bls.n	8005e70 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	68da      	ldr	r2, [r3, #12]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	0151      	lsls	r1, r2, #5
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	440a      	add	r2, r1
 8005e86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9c:	691a      	ldr	r2, [r3, #16]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ea6:	6939      	ldr	r1, [r7, #16]
 8005ea8:	0148      	lsls	r0, r1, #5
 8005eaa:	6979      	ldr	r1, [r7, #20]
 8005eac:	4401      	add	r1, r0
 8005eae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005eb6:	79fb      	ldrb	r3, [r7, #7]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d11e      	bne.n	8005efa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d009      	beq.n	8005ed8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	0151      	lsls	r1, r2, #5
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	440a      	add	r2, r1
 8005eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ef6:	6013      	str	r3, [r2, #0]
 8005ef8:	e097      	b.n	800602a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	0151      	lsls	r1, r2, #5
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	440a      	add	r2, r1
 8005f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f18:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f000 8083 	beq.w	800602a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	f003 030f 	and.w	r3, r3, #15
 8005f34:	2101      	movs	r1, #1
 8005f36:	fa01 f303 	lsl.w	r3, r1, r3
 8005f3a:	6979      	ldr	r1, [r7, #20]
 8005f3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f40:	4313      	orrs	r3, r2
 8005f42:	634b      	str	r3, [r1, #52]	; 0x34
 8005f44:	e071      	b.n	800602a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	0151      	lsls	r1, r2, #5
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	440a      	add	r2, r1
 8005f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f60:	0cdb      	lsrs	r3, r3, #19
 8005f62:	04db      	lsls	r3, r3, #19
 8005f64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	0151      	lsls	r1, r2, #5
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	440a      	add	r2, r1
 8005f7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f88:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	0151      	lsls	r1, r2, #5
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	440a      	add	r2, r1
 8005fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fce:	691a      	ldr	r2, [r3, #16]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fd8:	6939      	ldr	r1, [r7, #16]
 8005fda:	0148      	lsls	r0, r1, #5
 8005fdc:	6979      	ldr	r1, [r7, #20]
 8005fde:	4401      	add	r1, r0
 8005fe0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005fe8:	79fb      	ldrb	r3, [r7, #7]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d10d      	bne.n	800600a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d009      	beq.n	800600a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	6919      	ldr	r1, [r3, #16]
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	4413      	add	r3, r2
 8006002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006006:	460a      	mov	r2, r1
 8006008:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	4413      	add	r3, r2
 8006012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	0151      	lsls	r1, r2, #5
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	440a      	add	r2, r1
 8006020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006024:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006028:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	371c      	adds	r7, #28
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006042:	2300      	movs	r3, #0
 8006044:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006046:	2300      	movs	r3, #0
 8006048:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	785b      	ldrb	r3, [r3, #1]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d14a      	bne.n	80060ec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800606a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800606e:	f040 8086 	bne.w	800617e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	4413      	add	r3, r2
 800607c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	7812      	ldrb	r2, [r2, #0]
 8006086:	0151      	lsls	r1, r2, #5
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	440a      	add	r2, r1
 800608c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006090:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006094:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	7812      	ldrb	r2, [r2, #0]
 80060aa:	0151      	lsls	r1, r2, #5
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	440a      	add	r2, r1
 80060b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	3301      	adds	r3, #1
 80060be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d902      	bls.n	80060d0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	75fb      	strb	r3, [r7, #23]
          break;
 80060ce:	e056      	b.n	800617e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060e8:	d0e7      	beq.n	80060ba <USB_EPStopXfer+0x82>
 80060ea:	e048      	b.n	800617e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006100:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006104:	d13b      	bne.n	800617e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	7812      	ldrb	r2, [r2, #0]
 800611a:	0151      	lsls	r1, r2, #5
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	440a      	add	r2, r1
 8006120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006124:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006128:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	7812      	ldrb	r2, [r2, #0]
 800613e:	0151      	lsls	r1, r2, #5
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	440a      	add	r2, r1
 8006144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006148:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800614c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3301      	adds	r3, #1
 8006152:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f242 7210 	movw	r2, #10000	; 0x2710
 800615a:	4293      	cmp	r3, r2
 800615c:	d902      	bls.n	8006164 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	75fb      	strb	r3, [r7, #23]
          break;
 8006162:	e00c      	b.n	800617e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	4413      	add	r3, r2
 800616e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006178:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800617c:	d0e7      	beq.n	800614e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800617e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006180:	4618      	mov	r0, r3
 8006182:	371c      	adds	r7, #28
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800618c:	b480      	push	{r7}
 800618e:	b089      	sub	sp, #36	; 0x24
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	4611      	mov	r1, r2
 8006198:	461a      	mov	r2, r3
 800619a:	460b      	mov	r3, r1
 800619c:	71fb      	strb	r3, [r7, #7]
 800619e:	4613      	mov	r3, r2
 80061a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80061aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d123      	bne.n	80061fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80061b2:	88bb      	ldrh	r3, [r7, #4]
 80061b4:	3303      	adds	r3, #3
 80061b6:	089b      	lsrs	r3, r3, #2
 80061b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80061ba:	2300      	movs	r3, #0
 80061bc:	61bb      	str	r3, [r7, #24]
 80061be:	e018      	b.n	80061f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80061c0:	79fb      	ldrb	r3, [r7, #7]
 80061c2:	031a      	lsls	r2, r3, #12
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061cc:	461a      	mov	r2, r3
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	3301      	adds	r3, #1
 80061d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	3301      	adds	r3, #1
 80061de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	3301      	adds	r3, #1
 80061e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	3301      	adds	r3, #1
 80061ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	3301      	adds	r3, #1
 80061f0:	61bb      	str	r3, [r7, #24]
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d3e2      	bcc.n	80061c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3724      	adds	r7, #36	; 0x24
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006208:	b480      	push	{r7}
 800620a:	b08b      	sub	sp, #44	; 0x2c
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	4613      	mov	r3, r2
 8006214:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800621e:	88fb      	ldrh	r3, [r7, #6]
 8006220:	089b      	lsrs	r3, r3, #2
 8006222:	b29b      	uxth	r3, r3
 8006224:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006226:	88fb      	ldrh	r3, [r7, #6]
 8006228:	f003 0303 	and.w	r3, r3, #3
 800622c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800622e:	2300      	movs	r3, #0
 8006230:	623b      	str	r3, [r7, #32]
 8006232:	e014      	b.n	800625e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	3301      	adds	r3, #1
 8006244:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	3301      	adds	r3, #1
 800624a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	3301      	adds	r3, #1
 8006250:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	3301      	adds	r3, #1
 8006256:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006258:	6a3b      	ldr	r3, [r7, #32]
 800625a:	3301      	adds	r3, #1
 800625c:	623b      	str	r3, [r7, #32]
 800625e:	6a3a      	ldr	r2, [r7, #32]
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	429a      	cmp	r2, r3
 8006264:	d3e6      	bcc.n	8006234 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006266:	8bfb      	ldrh	r3, [r7, #30]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d01e      	beq.n	80062aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006276:	461a      	mov	r2, r3
 8006278:	f107 0310 	add.w	r3, r7, #16
 800627c:	6812      	ldr	r2, [r2, #0]
 800627e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	6a3b      	ldr	r3, [r7, #32]
 8006284:	b2db      	uxtb	r3, r3
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	fa22 f303 	lsr.w	r3, r2, r3
 800628c:	b2da      	uxtb	r2, r3
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	701a      	strb	r2, [r3, #0]
      i++;
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	3301      	adds	r3, #1
 8006296:	623b      	str	r3, [r7, #32]
      pDest++;
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	3301      	adds	r3, #1
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800629e:	8bfb      	ldrh	r3, [r7, #30]
 80062a0:	3b01      	subs	r3, #1
 80062a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80062a4:	8bfb      	ldrh	r3, [r7, #30]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1ea      	bne.n	8006280 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	372c      	adds	r7, #44	; 0x2c
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	785b      	ldrb	r3, [r3, #1]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d12c      	bne.n	800632e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	db12      	blt.n	800630c <USB_EPSetStall+0x54>
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00f      	beq.n	800630c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	0151      	lsls	r1, r2, #5
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	440a      	add	r2, r1
 8006302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006306:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800630a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	4413      	add	r3, r2
 8006314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	0151      	lsls	r1, r2, #5
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	440a      	add	r2, r1
 8006322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006326:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800632a:	6013      	str	r3, [r2, #0]
 800632c:	e02b      	b.n	8006386 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4413      	add	r3, r2
 8006336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	db12      	blt.n	8006366 <USB_EPSetStall+0xae>
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00f      	beq.n	8006366 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4413      	add	r3, r2
 800634e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	0151      	lsls	r1, r2, #5
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	440a      	add	r2, r1
 800635c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006360:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006364:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	4413      	add	r3, r2
 800636e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	0151      	lsls	r1, r2, #5
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	440a      	add	r2, r1
 800637c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006380:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006384:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	785b      	ldrb	r3, [r3, #1]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d128      	bne.n	8006402 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	0151      	lsls	r1, r2, #5
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	440a      	add	r2, r1
 80063c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80063ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	791b      	ldrb	r3, [r3, #4]
 80063d4:	2b03      	cmp	r3, #3
 80063d6:	d003      	beq.n	80063e0 <USB_EPClearStall+0x4c>
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	791b      	ldrb	r3, [r3, #4]
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d138      	bne.n	8006452 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	0151      	lsls	r1, r2, #5
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	440a      	add	r2, r1
 80063f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	e027      	b.n	8006452 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4413      	add	r3, r2
 800640a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	0151      	lsls	r1, r2, #5
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	440a      	add	r2, r1
 8006418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800641c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006420:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	791b      	ldrb	r3, [r3, #4]
 8006426:	2b03      	cmp	r3, #3
 8006428:	d003      	beq.n	8006432 <USB_EPClearStall+0x9e>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	791b      	ldrb	r3, [r3, #4]
 800642e:	2b02      	cmp	r3, #2
 8006430:	d10f      	bne.n	8006452 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	4413      	add	r3, r2
 800643a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	0151      	lsls	r1, r2, #5
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	440a      	add	r2, r1
 8006448:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800644c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006450:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3714      	adds	r7, #20
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	460b      	mov	r3, r1
 800646a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800647e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006482:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	78fb      	ldrb	r3, [r7, #3]
 800648e:	011b      	lsls	r3, r3, #4
 8006490:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006494:	68f9      	ldr	r1, [r7, #12]
 8006496:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800649a:	4313      	orrs	r3, r2
 800649c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80064c6:	f023 0303 	bic.w	r3, r3, #3
 80064ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064da:	f023 0302 	bic.w	r3, r3, #2
 80064de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b085      	sub	sp, #20
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006508:	f023 0303 	bic.w	r3, r3, #3
 800650c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800651c:	f043 0302 	orr.w	r3, r3, #2
 8006520:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	4013      	ands	r3, r2
 8006546:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006548:	68fb      	ldr	r3, [r7, #12]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006556:	b480      	push	{r7}
 8006558:	b085      	sub	sp, #20
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	4013      	ands	r3, r2
 8006578:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	0c1b      	lsrs	r3, r3, #16
}
 800657e:	4618      	mov	r0, r3
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800658a:	b480      	push	{r7}
 800658c:	b085      	sub	sp, #20
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a6:	69db      	ldr	r3, [r3, #28]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	4013      	ands	r3, r2
 80065ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	b29b      	uxth	r3, r3
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80065be:	b480      	push	{r7}
 80065c0:	b085      	sub	sp, #20
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	460b      	mov	r3, r1
 80065c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80065ce:	78fb      	ldrb	r3, [r7, #3]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	4013      	ands	r3, r2
 80065ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80065ec:	68bb      	ldr	r3, [r7, #8]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b087      	sub	sp, #28
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	460b      	mov	r3, r1
 8006604:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800661c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800661e:	78fb      	ldrb	r3, [r7, #3]
 8006620:	f003 030f 	and.w	r3, r3, #15
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	fa22 f303 	lsr.w	r3, r2, r3
 800662a:	01db      	lsls	r3, r3, #7
 800662c:	b2db      	uxtb	r3, r3
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	4313      	orrs	r3, r2
 8006632:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006634:	78fb      	ldrb	r3, [r7, #3]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	4413      	add	r3, r2
 800663c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	4013      	ands	r3, r2
 8006646:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006648:	68bb      	ldr	r3, [r7, #8]
}
 800664a:	4618      	mov	r0, r3
 800664c:	371c      	adds	r7, #28
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	f003 0301 	and.w	r3, r3, #1
}
 8006666:	4618      	mov	r0, r3
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006672:	b480      	push	{r7}
 8006674:	b085      	sub	sp, #20
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800668c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006690:	f023 0307 	bic.w	r3, r3, #7
 8006694:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	460b      	mov	r3, r1
 80066c2:	607a      	str	r2, [r7, #4]
 80066c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	333c      	adds	r3, #60	; 0x3c
 80066ce:	3304      	adds	r3, #4
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	4a26      	ldr	r2, [pc, #152]	; (8006770 <USB_EP0_OutStart+0xb8>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d90a      	bls.n	80066f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066ec:	d101      	bne.n	80066f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	e037      	b.n	8006762 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f8:	461a      	mov	r2, r3
 80066fa:	2300      	movs	r3, #0
 80066fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800670c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006710:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006720:	f043 0318 	orr.w	r3, r3, #24
 8006724:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006734:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006738:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800673a:	7afb      	ldrb	r3, [r7, #11]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d10f      	bne.n	8006760 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006746:	461a      	mov	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800675a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800675e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	371c      	adds	r7, #28
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	4f54300a 	.word	0x4f54300a

08006774 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800677c:	2300      	movs	r3, #0
 800677e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	3301      	adds	r3, #1
 8006784:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	4a13      	ldr	r2, [pc, #76]	; (80067d8 <USB_CoreReset+0x64>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d901      	bls.n	8006792 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e01b      	b.n	80067ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	2b00      	cmp	r3, #0
 8006798:	daf2      	bge.n	8006780 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800679a:	2300      	movs	r3, #0
 800679c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	f043 0201 	orr.w	r2, r3, #1
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3301      	adds	r3, #1
 80067ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4a09      	ldr	r2, [pc, #36]	; (80067d8 <USB_CoreReset+0x64>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d901      	bls.n	80067bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e006      	b.n	80067ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d0f0      	beq.n	80067aa <USB_CoreReset+0x36>

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	00030d40 	.word	0x00030d40

080067dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	460b      	mov	r3, r1
 80067e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80067e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80067ec:	f002 fc8a 	bl	8009104 <USBD_static_malloc>
 80067f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d109      	bne.n	800680c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	32b0      	adds	r2, #176	; 0xb0
 8006802:	2100      	movs	r1, #0
 8006804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006808:	2302      	movs	r3, #2
 800680a:	e0d4      	b.n	80069b6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800680c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006810:	2100      	movs	r1, #0
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f002 fcda 	bl	80091cc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	32b0      	adds	r2, #176	; 0xb0
 8006822:	68f9      	ldr	r1, [r7, #12]
 8006824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	32b0      	adds	r2, #176	; 0xb0
 8006832:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	7c1b      	ldrb	r3, [r3, #16]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d138      	bne.n	80068b6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006844:	4b5e      	ldr	r3, [pc, #376]	; (80069c0 <USBD_CDC_Init+0x1e4>)
 8006846:	7819      	ldrb	r1, [r3, #0]
 8006848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800684c:	2202      	movs	r2, #2
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f002 fb35 	bl	8008ebe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006854:	4b5a      	ldr	r3, [pc, #360]	; (80069c0 <USBD_CDC_Init+0x1e4>)
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	f003 020f 	and.w	r2, r3, #15
 800685c:	6879      	ldr	r1, [r7, #4]
 800685e:	4613      	mov	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	440b      	add	r3, r1
 8006868:	3324      	adds	r3, #36	; 0x24
 800686a:	2201      	movs	r2, #1
 800686c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800686e:	4b55      	ldr	r3, [pc, #340]	; (80069c4 <USBD_CDC_Init+0x1e8>)
 8006870:	7819      	ldrb	r1, [r3, #0]
 8006872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006876:	2202      	movs	r2, #2
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f002 fb20 	bl	8008ebe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800687e:	4b51      	ldr	r3, [pc, #324]	; (80069c4 <USBD_CDC_Init+0x1e8>)
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	f003 020f 	and.w	r2, r3, #15
 8006886:	6879      	ldr	r1, [r7, #4]
 8006888:	4613      	mov	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	440b      	add	r3, r1
 8006892:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006896:	2201      	movs	r2, #1
 8006898:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800689a:	4b4b      	ldr	r3, [pc, #300]	; (80069c8 <USBD_CDC_Init+0x1ec>)
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	f003 020f 	and.w	r2, r3, #15
 80068a2:	6879      	ldr	r1, [r7, #4]
 80068a4:	4613      	mov	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	440b      	add	r3, r1
 80068ae:	3326      	adds	r3, #38	; 0x26
 80068b0:	2210      	movs	r2, #16
 80068b2:	801a      	strh	r2, [r3, #0]
 80068b4:	e035      	b.n	8006922 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80068b6:	4b42      	ldr	r3, [pc, #264]	; (80069c0 <USBD_CDC_Init+0x1e4>)
 80068b8:	7819      	ldrb	r1, [r3, #0]
 80068ba:	2340      	movs	r3, #64	; 0x40
 80068bc:	2202      	movs	r2, #2
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f002 fafd 	bl	8008ebe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80068c4:	4b3e      	ldr	r3, [pc, #248]	; (80069c0 <USBD_CDC_Init+0x1e4>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	f003 020f 	and.w	r2, r3, #15
 80068cc:	6879      	ldr	r1, [r7, #4]
 80068ce:	4613      	mov	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4413      	add	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	440b      	add	r3, r1
 80068d8:	3324      	adds	r3, #36	; 0x24
 80068da:	2201      	movs	r2, #1
 80068dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80068de:	4b39      	ldr	r3, [pc, #228]	; (80069c4 <USBD_CDC_Init+0x1e8>)
 80068e0:	7819      	ldrb	r1, [r3, #0]
 80068e2:	2340      	movs	r3, #64	; 0x40
 80068e4:	2202      	movs	r2, #2
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f002 fae9 	bl	8008ebe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80068ec:	4b35      	ldr	r3, [pc, #212]	; (80069c4 <USBD_CDC_Init+0x1e8>)
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	f003 020f 	and.w	r2, r3, #15
 80068f4:	6879      	ldr	r1, [r7, #4]
 80068f6:	4613      	mov	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	440b      	add	r3, r1
 8006900:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006904:	2201      	movs	r2, #1
 8006906:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006908:	4b2f      	ldr	r3, [pc, #188]	; (80069c8 <USBD_CDC_Init+0x1ec>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	f003 020f 	and.w	r2, r3, #15
 8006910:	6879      	ldr	r1, [r7, #4]
 8006912:	4613      	mov	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	440b      	add	r3, r1
 800691c:	3326      	adds	r3, #38	; 0x26
 800691e:	2210      	movs	r2, #16
 8006920:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006922:	4b29      	ldr	r3, [pc, #164]	; (80069c8 <USBD_CDC_Init+0x1ec>)
 8006924:	7819      	ldrb	r1, [r3, #0]
 8006926:	2308      	movs	r3, #8
 8006928:	2203      	movs	r2, #3
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f002 fac7 	bl	8008ebe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006930:	4b25      	ldr	r3, [pc, #148]	; (80069c8 <USBD_CDC_Init+0x1ec>)
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	f003 020f 	and.w	r2, r3, #15
 8006938:	6879      	ldr	r1, [r7, #4]
 800693a:	4613      	mov	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	440b      	add	r3, r1
 8006944:	3324      	adds	r3, #36	; 0x24
 8006946:	2201      	movs	r2, #1
 8006948:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	33b0      	adds	r3, #176	; 0xb0
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800697c:	2b00      	cmp	r3, #0
 800697e:	d101      	bne.n	8006984 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006980:	2302      	movs	r3, #2
 8006982:	e018      	b.n	80069b6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	7c1b      	ldrb	r3, [r3, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10a      	bne.n	80069a2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800698c:	4b0d      	ldr	r3, [pc, #52]	; (80069c4 <USBD_CDC_Init+0x1e8>)
 800698e:	7819      	ldrb	r1, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006996:	f44f 7300 	mov.w	r3, #512	; 0x200
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f002 fb7e 	bl	800909c <USBD_LL_PrepareReceive>
 80069a0:	e008      	b.n	80069b4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80069a2:	4b08      	ldr	r3, [pc, #32]	; (80069c4 <USBD_CDC_Init+0x1e8>)
 80069a4:	7819      	ldrb	r1, [r3, #0]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069ac:	2340      	movs	r3, #64	; 0x40
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f002 fb74 	bl	800909c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	20000097 	.word	0x20000097
 80069c4:	20000098 	.word	0x20000098
 80069c8:	20000099 	.word	0x20000099

080069cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	460b      	mov	r3, r1
 80069d6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80069d8:	4b3a      	ldr	r3, [pc, #232]	; (8006ac4 <USBD_CDC_DeInit+0xf8>)
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	4619      	mov	r1, r3
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f002 fa93 	bl	8008f0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80069e4:	4b37      	ldr	r3, [pc, #220]	; (8006ac4 <USBD_CDC_DeInit+0xf8>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	f003 020f 	and.w	r2, r3, #15
 80069ec:	6879      	ldr	r1, [r7, #4]
 80069ee:	4613      	mov	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	440b      	add	r3, r1
 80069f8:	3324      	adds	r3, #36	; 0x24
 80069fa:	2200      	movs	r2, #0
 80069fc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80069fe:	4b32      	ldr	r3, [pc, #200]	; (8006ac8 <USBD_CDC_DeInit+0xfc>)
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	4619      	mov	r1, r3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f002 fa80 	bl	8008f0a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006a0a:	4b2f      	ldr	r3, [pc, #188]	; (8006ac8 <USBD_CDC_DeInit+0xfc>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	f003 020f 	and.w	r2, r3, #15
 8006a12:	6879      	ldr	r1, [r7, #4]
 8006a14:	4613      	mov	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	440b      	add	r3, r1
 8006a1e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a22:	2200      	movs	r2, #0
 8006a24:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006a26:	4b29      	ldr	r3, [pc, #164]	; (8006acc <USBD_CDC_DeInit+0x100>)
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f002 fa6c 	bl	8008f0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006a32:	4b26      	ldr	r3, [pc, #152]	; (8006acc <USBD_CDC_DeInit+0x100>)
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	f003 020f 	and.w	r2, r3, #15
 8006a3a:	6879      	ldr	r1, [r7, #4]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	440b      	add	r3, r1
 8006a46:	3324      	adds	r3, #36	; 0x24
 8006a48:	2200      	movs	r2, #0
 8006a4a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006a4c:	4b1f      	ldr	r3, [pc, #124]	; (8006acc <USBD_CDC_DeInit+0x100>)
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	f003 020f 	and.w	r2, r3, #15
 8006a54:	6879      	ldr	r1, [r7, #4]
 8006a56:	4613      	mov	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	440b      	add	r3, r1
 8006a60:	3326      	adds	r3, #38	; 0x26
 8006a62:	2200      	movs	r2, #0
 8006a64:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	32b0      	adds	r2, #176	; 0xb0
 8006a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d01f      	beq.n	8006ab8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	33b0      	adds	r3, #176	; 0xb0
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	32b0      	adds	r2, #176	; 0xb0
 8006a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f002 fb40 	bl	8009120 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	32b0      	adds	r2, #176	; 0xb0
 8006aaa:	2100      	movs	r1, #0
 8006aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	20000097 	.word	0x20000097
 8006ac8:	20000098 	.word	0x20000098
 8006acc:	20000099 	.word	0x20000099

08006ad0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	32b0      	adds	r2, #176	; 0xb0
 8006ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006af2:	2300      	movs	r3, #0
 8006af4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e0bf      	b.n	8006c80 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d050      	beq.n	8006bae <USBD_CDC_Setup+0xde>
 8006b0c:	2b20      	cmp	r3, #32
 8006b0e:	f040 80af 	bne.w	8006c70 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	88db      	ldrh	r3, [r3, #6]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d03a      	beq.n	8006b90 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	b25b      	sxtb	r3, r3
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	da1b      	bge.n	8006b5c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	33b0      	adds	r3, #176	; 0xb0
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006b3a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006b3c:	683a      	ldr	r2, [r7, #0]
 8006b3e:	88d2      	ldrh	r2, [r2, #6]
 8006b40:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	88db      	ldrh	r3, [r3, #6]
 8006b46:	2b07      	cmp	r3, #7
 8006b48:	bf28      	it	cs
 8006b4a:	2307      	movcs	r3, #7
 8006b4c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	89fa      	ldrh	r2, [r7, #14]
 8006b52:	4619      	mov	r1, r3
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f001 fd89 	bl	800866c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006b5a:	e090      	b.n	8006c7e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	785a      	ldrb	r2, [r3, #1]
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	88db      	ldrh	r3, [r3, #6]
 8006b6a:	2b3f      	cmp	r3, #63	; 0x3f
 8006b6c:	d803      	bhi.n	8006b76 <USBD_CDC_Setup+0xa6>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	88db      	ldrh	r3, [r3, #6]
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	e000      	b.n	8006b78 <USBD_CDC_Setup+0xa8>
 8006b76:	2240      	movs	r2, #64	; 0x40
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006b7e:	6939      	ldr	r1, [r7, #16]
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006b86:	461a      	mov	r2, r3
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f001 fd9b 	bl	80086c4 <USBD_CtlPrepareRx>
      break;
 8006b8e:	e076      	b.n	8006c7e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	33b0      	adds	r3, #176	; 0xb0
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	7850      	ldrb	r0, [r2, #1]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	6839      	ldr	r1, [r7, #0]
 8006baa:	4798      	blx	r3
      break;
 8006bac:	e067      	b.n	8006c7e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	785b      	ldrb	r3, [r3, #1]
 8006bb2:	2b0b      	cmp	r3, #11
 8006bb4:	d851      	bhi.n	8006c5a <USBD_CDC_Setup+0x18a>
 8006bb6:	a201      	add	r2, pc, #4	; (adr r2, 8006bbc <USBD_CDC_Setup+0xec>)
 8006bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbc:	08006bed 	.word	0x08006bed
 8006bc0:	08006c69 	.word	0x08006c69
 8006bc4:	08006c5b 	.word	0x08006c5b
 8006bc8:	08006c5b 	.word	0x08006c5b
 8006bcc:	08006c5b 	.word	0x08006c5b
 8006bd0:	08006c5b 	.word	0x08006c5b
 8006bd4:	08006c5b 	.word	0x08006c5b
 8006bd8:	08006c5b 	.word	0x08006c5b
 8006bdc:	08006c5b 	.word	0x08006c5b
 8006be0:	08006c5b 	.word	0x08006c5b
 8006be4:	08006c17 	.word	0x08006c17
 8006be8:	08006c41 	.word	0x08006c41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b03      	cmp	r3, #3
 8006bf6:	d107      	bne.n	8006c08 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006bf8:	f107 030a 	add.w	r3, r7, #10
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	4619      	mov	r1, r3
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f001 fd33 	bl	800866c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c06:	e032      	b.n	8006c6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f001 fcbd 	bl	800858a <USBD_CtlError>
            ret = USBD_FAIL;
 8006c10:	2303      	movs	r3, #3
 8006c12:	75fb      	strb	r3, [r7, #23]
          break;
 8006c14:	e02b      	b.n	8006c6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b03      	cmp	r3, #3
 8006c20:	d107      	bne.n	8006c32 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006c22:	f107 030d 	add.w	r3, r7, #13
 8006c26:	2201      	movs	r2, #1
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f001 fd1e 	bl	800866c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c30:	e01d      	b.n	8006c6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006c32:	6839      	ldr	r1, [r7, #0]
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f001 fca8 	bl	800858a <USBD_CtlError>
            ret = USBD_FAIL;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	75fb      	strb	r3, [r7, #23]
          break;
 8006c3e:	e016      	b.n	8006c6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	d00f      	beq.n	8006c6c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006c4c:	6839      	ldr	r1, [r7, #0]
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f001 fc9b 	bl	800858a <USBD_CtlError>
            ret = USBD_FAIL;
 8006c54:	2303      	movs	r3, #3
 8006c56:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006c58:	e008      	b.n	8006c6c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006c5a:	6839      	ldr	r1, [r7, #0]
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f001 fc94 	bl	800858a <USBD_CtlError>
          ret = USBD_FAIL;
 8006c62:	2303      	movs	r3, #3
 8006c64:	75fb      	strb	r3, [r7, #23]
          break;
 8006c66:	e002      	b.n	8006c6e <USBD_CDC_Setup+0x19e>
          break;
 8006c68:	bf00      	nop
 8006c6a:	e008      	b.n	8006c7e <USBD_CDC_Setup+0x1ae>
          break;
 8006c6c:	bf00      	nop
      }
      break;
 8006c6e:	e006      	b.n	8006c7e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f001 fc89 	bl	800858a <USBD_CtlError>
      ret = USBD_FAIL;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c7c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3718      	adds	r7, #24
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	460b      	mov	r3, r1
 8006c92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006c9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	32b0      	adds	r2, #176	; 0xb0
 8006ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e065      	b.n	8006d7e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	32b0      	adds	r2, #176	; 0xb0
 8006cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cc0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006cc2:	78fb      	ldrb	r3, [r7, #3]
 8006cc4:	f003 020f 	and.w	r2, r3, #15
 8006cc8:	6879      	ldr	r1, [r7, #4]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	440b      	add	r3, r1
 8006cd4:	3318      	adds	r3, #24
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d02f      	beq.n	8006d3c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006cdc:	78fb      	ldrb	r3, [r7, #3]
 8006cde:	f003 020f 	and.w	r2, r3, #15
 8006ce2:	6879      	ldr	r1, [r7, #4]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	440b      	add	r3, r1
 8006cee:	3318      	adds	r3, #24
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	78fb      	ldrb	r3, [r7, #3]
 8006cf4:	f003 010f 	and.w	r1, r3, #15
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	00db      	lsls	r3, r3, #3
 8006cfe:	440b      	add	r3, r1
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4403      	add	r3, r0
 8006d04:	3348      	adds	r3, #72	; 0x48
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	fbb2 f1f3 	udiv	r1, r2, r3
 8006d0c:	fb01 f303 	mul.w	r3, r1, r3
 8006d10:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d112      	bne.n	8006d3c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006d16:	78fb      	ldrb	r3, [r7, #3]
 8006d18:	f003 020f 	and.w	r2, r3, #15
 8006d1c:	6879      	ldr	r1, [r7, #4]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	4413      	add	r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	440b      	add	r3, r1
 8006d28:	3318      	adds	r3, #24
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006d2e:	78f9      	ldrb	r1, [r7, #3]
 8006d30:	2300      	movs	r3, #0
 8006d32:	2200      	movs	r2, #0
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f002 f990 	bl	800905a <USBD_LL_Transmit>
 8006d3a:	e01f      	b.n	8006d7c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	33b0      	adds	r3, #176	; 0xb0
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d010      	beq.n	8006d7c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	33b0      	adds	r3, #176	; 0xb0
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4413      	add	r3, r2
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006d78:	78fa      	ldrb	r2, [r7, #3]
 8006d7a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b084      	sub	sp, #16
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	460b      	mov	r3, r1
 8006d90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	32b0      	adds	r2, #176	; 0xb0
 8006d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	32b0      	adds	r2, #176	; 0xb0
 8006dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e01a      	b.n	8006dee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006db8:	78fb      	ldrb	r3, [r7, #3]
 8006dba:	4619      	mov	r1, r3
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f002 f98e 	bl	80090de <USBD_LL_GetRxDataSize>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	33b0      	adds	r3, #176	; 0xb0
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006de8:	4611      	mov	r1, r2
 8006dea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b084      	sub	sp, #16
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	32b0      	adds	r2, #176	; 0xb0
 8006e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e0c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e025      	b.n	8006e64 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	33b0      	adds	r3, #176	; 0xb0
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d01a      	beq.n	8006e62 <USBD_CDC_EP0_RxReady+0x6c>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006e32:	2bff      	cmp	r3, #255	; 0xff
 8006e34:	d015      	beq.n	8006e62 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	33b0      	adds	r3, #176	; 0xb0
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006e4e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006e56:	b292      	uxth	r2, r2
 8006e58:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	22ff      	movs	r2, #255	; 0xff
 8006e5e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006e74:	2182      	movs	r1, #130	; 0x82
 8006e76:	4818      	ldr	r0, [pc, #96]	; (8006ed8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006e78:	f000 fd4f 	bl	800791a <USBD_GetEpDesc>
 8006e7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006e7e:	2101      	movs	r1, #1
 8006e80:	4815      	ldr	r0, [pc, #84]	; (8006ed8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006e82:	f000 fd4a 	bl	800791a <USBD_GetEpDesc>
 8006e86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006e88:	2181      	movs	r1, #129	; 0x81
 8006e8a:	4813      	ldr	r0, [pc, #76]	; (8006ed8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006e8c:	f000 fd45 	bl	800791a <USBD_GetEpDesc>
 8006e90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	2210      	movs	r2, #16
 8006e9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d006      	beq.n	8006eb2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006eac:	711a      	strb	r2, [r3, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d006      	beq.n	8006ec6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ec0:	711a      	strb	r2, [r3, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2243      	movs	r2, #67	; 0x43
 8006eca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ecc:	4b02      	ldr	r3, [pc, #8]	; (8006ed8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	20000054 	.word	0x20000054

08006edc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ee4:	2182      	movs	r1, #130	; 0x82
 8006ee6:	4818      	ldr	r0, [pc, #96]	; (8006f48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ee8:	f000 fd17 	bl	800791a <USBD_GetEpDesc>
 8006eec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006eee:	2101      	movs	r1, #1
 8006ef0:	4815      	ldr	r0, [pc, #84]	; (8006f48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ef2:	f000 fd12 	bl	800791a <USBD_GetEpDesc>
 8006ef6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ef8:	2181      	movs	r1, #129	; 0x81
 8006efa:	4813      	ldr	r0, [pc, #76]	; (8006f48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006efc:	f000 fd0d 	bl	800791a <USBD_GetEpDesc>
 8006f00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	2210      	movs	r2, #16
 8006f0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d006      	beq.n	8006f22 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	2200      	movs	r2, #0
 8006f18:	711a      	strb	r2, [r3, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f042 0202 	orr.w	r2, r2, #2
 8006f20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d006      	beq.n	8006f36 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	711a      	strb	r2, [r3, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f042 0202 	orr.w	r2, r2, #2
 8006f34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2243      	movs	r2, #67	; 0x43
 8006f3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f3c:	4b02      	ldr	r3, [pc, #8]	; (8006f48 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3718      	adds	r7, #24
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	20000054 	.word	0x20000054

08006f4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b086      	sub	sp, #24
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f54:	2182      	movs	r1, #130	; 0x82
 8006f56:	4818      	ldr	r0, [pc, #96]	; (8006fb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006f58:	f000 fcdf 	bl	800791a <USBD_GetEpDesc>
 8006f5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f5e:	2101      	movs	r1, #1
 8006f60:	4815      	ldr	r0, [pc, #84]	; (8006fb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006f62:	f000 fcda 	bl	800791a <USBD_GetEpDesc>
 8006f66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006f68:	2181      	movs	r1, #129	; 0x81
 8006f6a:	4813      	ldr	r0, [pc, #76]	; (8006fb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006f6c:	f000 fcd5 	bl	800791a <USBD_GetEpDesc>
 8006f70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d002      	beq.n	8006f7e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	2210      	movs	r2, #16
 8006f7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d006      	beq.n	8006f92 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f8c:	711a      	strb	r2, [r3, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d006      	beq.n	8006fa6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fa0:	711a      	strb	r2, [r3, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2243      	movs	r2, #67	; 0x43
 8006faa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006fac:	4b02      	ldr	r3, [pc, #8]	; (8006fb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3718      	adds	r7, #24
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	20000054 	.word	0x20000054

08006fbc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	220a      	movs	r2, #10
 8006fc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006fca:	4b03      	ldr	r3, [pc, #12]	; (8006fd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr
 8006fd8:	20000010 	.word	0x20000010

08006fdc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e009      	b.n	8007004 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	33b0      	adds	r3, #176	; 0xb0
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	4413      	add	r3, r2
 8006ffe:	683a      	ldr	r2, [r7, #0]
 8007000:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007010:	b480      	push	{r7}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	32b0      	adds	r2, #176	; 0xb0
 8007026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800702a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007032:	2303      	movs	r3, #3
 8007034:	e008      	b.n	8007048 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	371c      	adds	r7, #28
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	32b0      	adds	r2, #176	; 0xb0
 8007068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800706c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d101      	bne.n	8007078 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007074:	2303      	movs	r3, #3
 8007076:	e004      	b.n	8007082 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	683a      	ldr	r2, [r7, #0]
 800707c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3714      	adds	r7, #20
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
	...

08007090 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	32b0      	adds	r2, #176	; 0xb0
 80070a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80070a8:	2301      	movs	r3, #1
 80070aa:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	32b0      	adds	r2, #176	; 0xb0
 80070b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80070be:	2303      	movs	r3, #3
 80070c0:	e025      	b.n	800710e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d11f      	bne.n	800710c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80070d4:	4b10      	ldr	r3, [pc, #64]	; (8007118 <USBD_CDC_TransmitPacket+0x88>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	f003 020f 	and.w	r2, r3, #15
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	4613      	mov	r3, r2
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4413      	add	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4403      	add	r3, r0
 80070ee:	3318      	adds	r3, #24
 80070f0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80070f2:	4b09      	ldr	r3, [pc, #36]	; (8007118 <USBD_CDC_TransmitPacket+0x88>)
 80070f4:	7819      	ldrb	r1, [r3, #0]
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f001 ffa9 	bl	800905a <USBD_LL_Transmit>

    ret = USBD_OK;
 8007108:	2300      	movs	r3, #0
 800710a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800710c:	7bfb      	ldrb	r3, [r7, #15]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	20000097 	.word	0x20000097

0800711c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	32b0      	adds	r2, #176	; 0xb0
 800712e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007132:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	32b0      	adds	r2, #176	; 0xb0
 800713e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007146:	2303      	movs	r3, #3
 8007148:	e018      	b.n	800717c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	7c1b      	ldrb	r3, [r3, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10a      	bne.n	8007168 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007152:	4b0c      	ldr	r3, [pc, #48]	; (8007184 <USBD_CDC_ReceivePacket+0x68>)
 8007154:	7819      	ldrb	r1, [r3, #0]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800715c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f001 ff9b 	bl	800909c <USBD_LL_PrepareReceive>
 8007166:	e008      	b.n	800717a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007168:	4b06      	ldr	r3, [pc, #24]	; (8007184 <USBD_CDC_ReceivePacket+0x68>)
 800716a:	7819      	ldrb	r1, [r3, #0]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007172:	2340      	movs	r3, #64	; 0x40
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f001 ff91 	bl	800909c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	20000098 	.word	0x20000098

08007188 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	4613      	mov	r3, r2
 8007194:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800719c:	2303      	movs	r3, #3
 800719e:	e01f      	b.n	80071e0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d003      	beq.n	80071c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	79fa      	ldrb	r2, [r7, #7]
 80071d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f001 fe0b 	bl	8008df0 <USBD_LL_Init>
 80071da:	4603      	mov	r3, r0
 80071dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80071de:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071f2:	2300      	movs	r3, #0
 80071f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e025      	b.n	800724c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	32ae      	adds	r2, #174	; 0xae
 8007212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00f      	beq.n	800723c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	32ae      	adds	r2, #174	; 0xae
 8007226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800722a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722c:	f107 020e 	add.w	r2, r7, #14
 8007230:	4610      	mov	r0, r2
 8007232:	4798      	blx	r3
 8007234:	4602      	mov	r2, r0
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007242:	1c5a      	adds	r2, r3, #1
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f001 fe13 	bl	8008e88 <USBD_LL_Start>
 8007262:	4603      	mov	r3, r0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007274:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007276:	4618      	mov	r0, r3
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr

08007282 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b084      	sub	sp, #16
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	460b      	mov	r3, r1
 800728c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800728e:	2300      	movs	r3, #0
 8007290:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007298:	2b00      	cmp	r3, #0
 800729a:	d009      	beq.n	80072b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	78fa      	ldrb	r2, [r7, #3]
 80072a6:	4611      	mov	r1, r2
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	4798      	blx	r3
 80072ac:	4603      	mov	r3, r0
 80072ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b084      	sub	sp, #16
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
 80072c2:	460b      	mov	r3, r1
 80072c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	78fa      	ldrb	r2, [r7, #3]
 80072d4:	4611      	mov	r1, r2
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	4798      	blx	r3
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d001      	beq.n	80072e4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80072e0:	2303      	movs	r3, #3
 80072e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b084      	sub	sp, #16
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	4618      	mov	r0, r3
 8007302:	f001 f908 	bl	8008516 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007314:	461a      	mov	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007322:	f003 031f 	and.w	r3, r3, #31
 8007326:	2b02      	cmp	r3, #2
 8007328:	d01a      	beq.n	8007360 <USBD_LL_SetupStage+0x72>
 800732a:	2b02      	cmp	r3, #2
 800732c:	d822      	bhi.n	8007374 <USBD_LL_SetupStage+0x86>
 800732e:	2b00      	cmp	r3, #0
 8007330:	d002      	beq.n	8007338 <USBD_LL_SetupStage+0x4a>
 8007332:	2b01      	cmp	r3, #1
 8007334:	d00a      	beq.n	800734c <USBD_LL_SetupStage+0x5e>
 8007336:	e01d      	b.n	8007374 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fb5f 	bl	8007a04 <USBD_StdDevReq>
 8007346:	4603      	mov	r3, r0
 8007348:	73fb      	strb	r3, [r7, #15]
      break;
 800734a:	e020      	b.n	800738e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fbc7 	bl	8007ae8 <USBD_StdItfReq>
 800735a:	4603      	mov	r3, r0
 800735c:	73fb      	strb	r3, [r7, #15]
      break;
 800735e:	e016      	b.n	800738e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007366:	4619      	mov	r1, r3
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fc29 	bl	8007bc0 <USBD_StdEPReq>
 800736e:	4603      	mov	r3, r0
 8007370:	73fb      	strb	r3, [r7, #15]
      break;
 8007372:	e00c      	b.n	800738e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800737a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800737e:	b2db      	uxtb	r3, r3
 8007380:	4619      	mov	r1, r3
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f001 fde0 	bl	8008f48 <USBD_LL_StallEP>
 8007388:	4603      	mov	r3, r0
 800738a:	73fb      	strb	r3, [r7, #15]
      break;
 800738c:	bf00      	nop
  }

  return ret;
 800738e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	460b      	mov	r3, r1
 80073a2:	607a      	str	r2, [r7, #4]
 80073a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80073a6:	2300      	movs	r3, #0
 80073a8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80073aa:	7afb      	ldrb	r3, [r7, #11]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d16e      	bne.n	800748e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80073b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073be:	2b03      	cmp	r3, #3
 80073c0:	f040 8098 	bne.w	80074f4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d913      	bls.n	80073f8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	689a      	ldr	r2, [r3, #8]
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	1ad2      	subs	r2, r2, r3
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	68da      	ldr	r2, [r3, #12]
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	4293      	cmp	r3, r2
 80073e8:	bf28      	it	cs
 80073ea:	4613      	movcs	r3, r2
 80073ec:	461a      	mov	r2, r3
 80073ee:	6879      	ldr	r1, [r7, #4]
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f001 f984 	bl	80086fe <USBD_CtlContinueRx>
 80073f6:	e07d      	b.n	80074f4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80073fe:	f003 031f 	and.w	r3, r3, #31
 8007402:	2b02      	cmp	r3, #2
 8007404:	d014      	beq.n	8007430 <USBD_LL_DataOutStage+0x98>
 8007406:	2b02      	cmp	r3, #2
 8007408:	d81d      	bhi.n	8007446 <USBD_LL_DataOutStage+0xae>
 800740a:	2b00      	cmp	r3, #0
 800740c:	d002      	beq.n	8007414 <USBD_LL_DataOutStage+0x7c>
 800740e:	2b01      	cmp	r3, #1
 8007410:	d003      	beq.n	800741a <USBD_LL_DataOutStage+0x82>
 8007412:	e018      	b.n	8007446 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	75bb      	strb	r3, [r7, #22]
            break;
 8007418:	e018      	b.n	800744c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007420:	b2db      	uxtb	r3, r3
 8007422:	4619      	mov	r1, r3
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f000 fa5e 	bl	80078e6 <USBD_CoreFindIF>
 800742a:	4603      	mov	r3, r0
 800742c:	75bb      	strb	r3, [r7, #22]
            break;
 800742e:	e00d      	b.n	800744c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007436:	b2db      	uxtb	r3, r3
 8007438:	4619      	mov	r1, r3
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f000 fa60 	bl	8007900 <USBD_CoreFindEP>
 8007440:	4603      	mov	r3, r0
 8007442:	75bb      	strb	r3, [r7, #22]
            break;
 8007444:	e002      	b.n	800744c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	75bb      	strb	r3, [r7, #22]
            break;
 800744a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800744c:	7dbb      	ldrb	r3, [r7, #22]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d119      	bne.n	8007486 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b03      	cmp	r3, #3
 800745c:	d113      	bne.n	8007486 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800745e:	7dba      	ldrb	r2, [r7, #22]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	32ae      	adds	r2, #174	; 0xae
 8007464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00b      	beq.n	8007486 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800746e:	7dba      	ldrb	r2, [r7, #22]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007476:	7dba      	ldrb	r2, [r7, #22]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	32ae      	adds	r2, #174	; 0xae
 800747c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f001 f94a 	bl	8008720 <USBD_CtlSendStatus>
 800748c:	e032      	b.n	80074f4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800748e:	7afb      	ldrb	r3, [r7, #11]
 8007490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007494:	b2db      	uxtb	r3, r3
 8007496:	4619      	mov	r1, r3
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 fa31 	bl	8007900 <USBD_CoreFindEP>
 800749e:	4603      	mov	r3, r0
 80074a0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074a2:	7dbb      	ldrb	r3, [r7, #22]
 80074a4:	2bff      	cmp	r3, #255	; 0xff
 80074a6:	d025      	beq.n	80074f4 <USBD_LL_DataOutStage+0x15c>
 80074a8:	7dbb      	ldrb	r3, [r7, #22]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d122      	bne.n	80074f4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b03      	cmp	r3, #3
 80074b8:	d117      	bne.n	80074ea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80074ba:	7dba      	ldrb	r2, [r7, #22]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	32ae      	adds	r2, #174	; 0xae
 80074c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00f      	beq.n	80074ea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80074ca:	7dba      	ldrb	r2, [r7, #22]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80074d2:	7dba      	ldrb	r2, [r7, #22]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	32ae      	adds	r2, #174	; 0xae
 80074d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	7afa      	ldrb	r2, [r7, #11]
 80074e0:	4611      	mov	r1, r2
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	4798      	blx	r3
 80074e6:	4603      	mov	r3, r0
 80074e8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80074ea:	7dfb      	ldrb	r3, [r7, #23]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d001      	beq.n	80074f4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80074f0:	7dfb      	ldrb	r3, [r7, #23]
 80074f2:	e000      	b.n	80074f6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3718      	adds	r7, #24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b086      	sub	sp, #24
 8007502:	af00      	add	r7, sp, #0
 8007504:	60f8      	str	r0, [r7, #12]
 8007506:	460b      	mov	r3, r1
 8007508:	607a      	str	r2, [r7, #4]
 800750a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800750c:	7afb      	ldrb	r3, [r7, #11]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d16f      	bne.n	80075f2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	3314      	adds	r3, #20
 8007516:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800751e:	2b02      	cmp	r3, #2
 8007520:	d15a      	bne.n	80075d8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	689a      	ldr	r2, [r3, #8]
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	429a      	cmp	r2, r3
 800752c:	d914      	bls.n	8007558 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	689a      	ldr	r2, [r3, #8]
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	1ad2      	subs	r2, r2, r3
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	461a      	mov	r2, r3
 8007542:	6879      	ldr	r1, [r7, #4]
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f001 f8ac 	bl	80086a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800754a:	2300      	movs	r3, #0
 800754c:	2200      	movs	r2, #0
 800754e:	2100      	movs	r1, #0
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f001 fda3 	bl	800909c <USBD_LL_PrepareReceive>
 8007556:	e03f      	b.n	80075d8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	68da      	ldr	r2, [r3, #12]
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	429a      	cmp	r2, r3
 8007562:	d11c      	bne.n	800759e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800756c:	429a      	cmp	r2, r3
 800756e:	d316      	bcc.n	800759e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	685a      	ldr	r2, [r3, #4]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800757a:	429a      	cmp	r2, r3
 800757c:	d20f      	bcs.n	800759e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800757e:	2200      	movs	r2, #0
 8007580:	2100      	movs	r1, #0
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f001 f88d 	bl	80086a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007590:	2300      	movs	r3, #0
 8007592:	2200      	movs	r2, #0
 8007594:	2100      	movs	r1, #0
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f001 fd80 	bl	800909c <USBD_LL_PrepareReceive>
 800759c:	e01c      	b.n	80075d8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b03      	cmp	r3, #3
 80075a8:	d10f      	bne.n	80075ca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d009      	beq.n	80075ca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80075ca:	2180      	movs	r1, #128	; 0x80
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f001 fcbb 	bl	8008f48 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f001 f8b7 	bl	8008746 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d03a      	beq.n	8007658 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f7ff fe42 	bl	800726c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80075f0:	e032      	b.n	8007658 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80075f2:	7afb      	ldrb	r3, [r7, #11]
 80075f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	4619      	mov	r1, r3
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f000 f97f 	bl	8007900 <USBD_CoreFindEP>
 8007602:	4603      	mov	r3, r0
 8007604:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007606:	7dfb      	ldrb	r3, [r7, #23]
 8007608:	2bff      	cmp	r3, #255	; 0xff
 800760a:	d025      	beq.n	8007658 <USBD_LL_DataInStage+0x15a>
 800760c:	7dfb      	ldrb	r3, [r7, #23]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d122      	bne.n	8007658 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b03      	cmp	r3, #3
 800761c:	d11c      	bne.n	8007658 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800761e:	7dfa      	ldrb	r2, [r7, #23]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	32ae      	adds	r2, #174	; 0xae
 8007624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d014      	beq.n	8007658 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800762e:	7dfa      	ldrb	r2, [r7, #23]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007636:	7dfa      	ldrb	r2, [r7, #23]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	32ae      	adds	r2, #174	; 0xae
 800763c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	7afa      	ldrb	r2, [r7, #11]
 8007644:	4611      	mov	r1, r2
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	4798      	blx	r3
 800764a:	4603      	mov	r3, r0
 800764c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800764e:	7dbb      	ldrb	r3, [r7, #22]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007654:	7dbb      	ldrb	r3, [r7, #22]
 8007656:	e000      	b.n	800765a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3718      	adds	r7, #24
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800769a:	2b00      	cmp	r3, #0
 800769c:	d014      	beq.n	80076c8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00e      	beq.n	80076c8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	6852      	ldr	r2, [r2, #4]
 80076b6:	b2d2      	uxtb	r2, r2
 80076b8:	4611      	mov	r1, r2
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	4798      	blx	r3
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80076c4:	2303      	movs	r3, #3
 80076c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076c8:	2340      	movs	r3, #64	; 0x40
 80076ca:	2200      	movs	r2, #0
 80076cc:	2100      	movs	r1, #0
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f001 fbf5 	bl	8008ebe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2240      	movs	r2, #64	; 0x40
 80076e0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076e4:	2340      	movs	r3, #64	; 0x40
 80076e6:	2200      	movs	r2, #0
 80076e8:	2180      	movs	r1, #128	; 0x80
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f001 fbe7 	bl	8008ebe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2240      	movs	r2, #64	; 0x40
 80076fa:	621a      	str	r2, [r3, #32]

  return ret;
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007706:	b480      	push	{r7}
 8007708:	b083      	sub	sp, #12
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	460b      	mov	r3, r1
 8007710:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	78fa      	ldrb	r2, [r7, #3]
 8007716:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007726:	b480      	push	{r7}
 8007728:	b083      	sub	sp, #12
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007734:	b2da      	uxtb	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2204      	movs	r2, #4
 8007740:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007752:	b480      	push	{r7}
 8007754:	b083      	sub	sp, #12
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b04      	cmp	r3, #4
 8007764:	d106      	bne.n	8007774 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800776c:	b2da      	uxtb	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b082      	sub	sp, #8
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007790:	b2db      	uxtb	r3, r3
 8007792:	2b03      	cmp	r3, #3
 8007794:	d110      	bne.n	80077b8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00b      	beq.n	80077b8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a6:	69db      	ldr	r3, [r3, #28]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d005      	beq.n	80077b8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b2:	69db      	ldr	r3, [r3, #28]
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b082      	sub	sp, #8
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
 80077ca:	460b      	mov	r3, r1
 80077cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	32ae      	adds	r2, #174	; 0xae
 80077d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d101      	bne.n	80077e4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e01c      	b.n	800781e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2b03      	cmp	r3, #3
 80077ee:	d115      	bne.n	800781c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	32ae      	adds	r2, #174	; 0xae
 80077fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077fe:	6a1b      	ldr	r3, [r3, #32]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00b      	beq.n	800781c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	32ae      	adds	r2, #174	; 0xae
 800780e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007812:	6a1b      	ldr	r3, [r3, #32]
 8007814:	78fa      	ldrb	r2, [r7, #3]
 8007816:	4611      	mov	r1, r2
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b082      	sub	sp, #8
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	460b      	mov	r3, r1
 8007830:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	32ae      	adds	r2, #174	; 0xae
 800783c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007844:	2303      	movs	r3, #3
 8007846:	e01c      	b.n	8007882 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b03      	cmp	r3, #3
 8007852:	d115      	bne.n	8007880 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	32ae      	adds	r2, #174	; 0xae
 800785e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00b      	beq.n	8007880 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	32ae      	adds	r2, #174	; 0xae
 8007872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007878:	78fa      	ldrb	r2, [r7, #3]
 800787a:	4611      	mov	r1, r2
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800788a:	b480      	push	{r7}
 800788c:	b083      	sub	sp, #12
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00e      	beq.n	80078dc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	6852      	ldr	r2, [r2, #4]
 80078ca:	b2d2      	uxtb	r2, r2
 80078cc:	4611      	mov	r1, r2
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	4798      	blx	r3
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d001      	beq.n	80078dc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80078d8:	2303      	movs	r3, #3
 80078da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b083      	sub	sp, #12
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
 80078ee:	460b      	mov	r3, r1
 80078f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80078f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	460b      	mov	r3, r1
 800790a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800790c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800790e:	4618      	mov	r0, r3
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b086      	sub	sp, #24
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	460b      	mov	r3, r1
 8007924:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800792e:	2300      	movs	r3, #0
 8007930:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	885b      	ldrh	r3, [r3, #2]
 8007936:	b29a      	uxth	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	b29b      	uxth	r3, r3
 800793e:	429a      	cmp	r2, r3
 8007940:	d920      	bls.n	8007984 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	b29b      	uxth	r3, r3
 8007948:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800794a:	e013      	b.n	8007974 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800794c:	f107 030a 	add.w	r3, r7, #10
 8007950:	4619      	mov	r1, r3
 8007952:	6978      	ldr	r0, [r7, #20]
 8007954:	f000 f81b 	bl	800798e <USBD_GetNextDesc>
 8007958:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	785b      	ldrb	r3, [r3, #1]
 800795e:	2b05      	cmp	r3, #5
 8007960:	d108      	bne.n	8007974 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	789b      	ldrb	r3, [r3, #2]
 800796a:	78fa      	ldrb	r2, [r7, #3]
 800796c:	429a      	cmp	r2, r3
 800796e:	d008      	beq.n	8007982 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007970:	2300      	movs	r3, #0
 8007972:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	885b      	ldrh	r3, [r3, #2]
 8007978:	b29a      	uxth	r2, r3
 800797a:	897b      	ldrh	r3, [r7, #10]
 800797c:	429a      	cmp	r2, r3
 800797e:	d8e5      	bhi.n	800794c <USBD_GetEpDesc+0x32>
 8007980:	e000      	b.n	8007984 <USBD_GetEpDesc+0x6a>
          break;
 8007982:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007984:	693b      	ldr	r3, [r7, #16]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3718      	adds	r7, #24
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800798e:	b480      	push	{r7}
 8007990:	b085      	sub	sp, #20
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	881a      	ldrh	r2, [r3, #0]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	4413      	add	r3, r2
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4413      	add	r3, r2
 80079b8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80079ba:	68fb      	ldr	r3, [r7, #12]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	3301      	adds	r3, #1
 80079de:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80079e6:	8a3b      	ldrh	r3, [r7, #16]
 80079e8:	021b      	lsls	r3, r3, #8
 80079ea:	b21a      	sxth	r2, r3
 80079ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	b21b      	sxth	r3, r3
 80079f4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80079f6:	89fb      	ldrh	r3, [r7, #14]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	371c      	adds	r7, #28
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a1a:	2b40      	cmp	r3, #64	; 0x40
 8007a1c:	d005      	beq.n	8007a2a <USBD_StdDevReq+0x26>
 8007a1e:	2b40      	cmp	r3, #64	; 0x40
 8007a20:	d857      	bhi.n	8007ad2 <USBD_StdDevReq+0xce>
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00f      	beq.n	8007a46 <USBD_StdDevReq+0x42>
 8007a26:	2b20      	cmp	r3, #32
 8007a28:	d153      	bne.n	8007ad2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	32ae      	adds	r2, #174	; 0xae
 8007a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	4798      	blx	r3
 8007a40:	4603      	mov	r3, r0
 8007a42:	73fb      	strb	r3, [r7, #15]
      break;
 8007a44:	e04a      	b.n	8007adc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	785b      	ldrb	r3, [r3, #1]
 8007a4a:	2b09      	cmp	r3, #9
 8007a4c:	d83b      	bhi.n	8007ac6 <USBD_StdDevReq+0xc2>
 8007a4e:	a201      	add	r2, pc, #4	; (adr r2, 8007a54 <USBD_StdDevReq+0x50>)
 8007a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a54:	08007aa9 	.word	0x08007aa9
 8007a58:	08007abd 	.word	0x08007abd
 8007a5c:	08007ac7 	.word	0x08007ac7
 8007a60:	08007ab3 	.word	0x08007ab3
 8007a64:	08007ac7 	.word	0x08007ac7
 8007a68:	08007a87 	.word	0x08007a87
 8007a6c:	08007a7d 	.word	0x08007a7d
 8007a70:	08007ac7 	.word	0x08007ac7
 8007a74:	08007a9f 	.word	0x08007a9f
 8007a78:	08007a91 	.word	0x08007a91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fa3c 	bl	8007efc <USBD_GetDescriptor>
          break;
 8007a84:	e024      	b.n	8007ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fba1 	bl	80081d0 <USBD_SetAddress>
          break;
 8007a8e:	e01f      	b.n	8007ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fbe0 	bl	8008258 <USBD_SetConfig>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	73fb      	strb	r3, [r7, #15]
          break;
 8007a9c:	e018      	b.n	8007ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007a9e:	6839      	ldr	r1, [r7, #0]
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 fc83 	bl	80083ac <USBD_GetConfig>
          break;
 8007aa6:	e013      	b.n	8007ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fcb4 	bl	8008418 <USBD_GetStatus>
          break;
 8007ab0:	e00e      	b.n	8007ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fce3 	bl	8008480 <USBD_SetFeature>
          break;
 8007aba:	e009      	b.n	8007ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007abc:	6839      	ldr	r1, [r7, #0]
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fd07 	bl	80084d2 <USBD_ClrFeature>
          break;
 8007ac4:	e004      	b.n	8007ad0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fd5e 	bl	800858a <USBD_CtlError>
          break;
 8007ace:	bf00      	nop
      }
      break;
 8007ad0:	e004      	b.n	8007adc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fd58 	bl	800858a <USBD_CtlError>
      break;
 8007ada:	bf00      	nop
  }

  return ret;
 8007adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop

08007ae8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007afe:	2b40      	cmp	r3, #64	; 0x40
 8007b00:	d005      	beq.n	8007b0e <USBD_StdItfReq+0x26>
 8007b02:	2b40      	cmp	r3, #64	; 0x40
 8007b04:	d852      	bhi.n	8007bac <USBD_StdItfReq+0xc4>
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d001      	beq.n	8007b0e <USBD_StdItfReq+0x26>
 8007b0a:	2b20      	cmp	r3, #32
 8007b0c:	d14e      	bne.n	8007bac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	3b01      	subs	r3, #1
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d840      	bhi.n	8007b9e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	889b      	ldrh	r3, [r3, #4]
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d836      	bhi.n	8007b94 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	889b      	ldrh	r3, [r3, #4]
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f7ff fed9 	bl	80078e6 <USBD_CoreFindIF>
 8007b34:	4603      	mov	r3, r0
 8007b36:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	2bff      	cmp	r3, #255	; 0xff
 8007b3c:	d01d      	beq.n	8007b7a <USBD_StdItfReq+0x92>
 8007b3e:	7bbb      	ldrb	r3, [r7, #14]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d11a      	bne.n	8007b7a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007b44:	7bba      	ldrb	r2, [r7, #14]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	32ae      	adds	r2, #174	; 0xae
 8007b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00f      	beq.n	8007b74 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007b54:	7bba      	ldrb	r2, [r7, #14]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b5c:	7bba      	ldrb	r2, [r7, #14]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	32ae      	adds	r2, #174	; 0xae
 8007b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	6839      	ldr	r1, [r7, #0]
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	4798      	blx	r3
 8007b6e:	4603      	mov	r3, r0
 8007b70:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007b72:	e004      	b.n	8007b7e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007b74:	2303      	movs	r3, #3
 8007b76:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007b78:	e001      	b.n	8007b7e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	88db      	ldrh	r3, [r3, #6]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d110      	bne.n	8007ba8 <USBD_StdItfReq+0xc0>
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10d      	bne.n	8007ba8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fdc7 	bl	8008720 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007b92:	e009      	b.n	8007ba8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fcf7 	bl	800858a <USBD_CtlError>
          break;
 8007b9c:	e004      	b.n	8007ba8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fcf2 	bl	800858a <USBD_CtlError>
          break;
 8007ba6:	e000      	b.n	8007baa <USBD_StdItfReq+0xc2>
          break;
 8007ba8:	bf00      	nop
      }
      break;
 8007baa:	e004      	b.n	8007bb6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fceb 	bl	800858a <USBD_CtlError>
      break;
 8007bb4:	bf00      	nop
  }

  return ret;
 8007bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	889b      	ldrh	r3, [r3, #4]
 8007bd2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bdc:	2b40      	cmp	r3, #64	; 0x40
 8007bde:	d007      	beq.n	8007bf0 <USBD_StdEPReq+0x30>
 8007be0:	2b40      	cmp	r3, #64	; 0x40
 8007be2:	f200 817f 	bhi.w	8007ee4 <USBD_StdEPReq+0x324>
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d02a      	beq.n	8007c40 <USBD_StdEPReq+0x80>
 8007bea:	2b20      	cmp	r3, #32
 8007bec:	f040 817a 	bne.w	8007ee4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007bf0:	7bbb      	ldrb	r3, [r7, #14]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f7ff fe83 	bl	8007900 <USBD_CoreFindEP>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bfe:	7b7b      	ldrb	r3, [r7, #13]
 8007c00:	2bff      	cmp	r3, #255	; 0xff
 8007c02:	f000 8174 	beq.w	8007eee <USBD_StdEPReq+0x32e>
 8007c06:	7b7b      	ldrb	r3, [r7, #13]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f040 8170 	bne.w	8007eee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007c0e:	7b7a      	ldrb	r2, [r7, #13]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007c16:	7b7a      	ldrb	r2, [r7, #13]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	32ae      	adds	r2, #174	; 0xae
 8007c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f000 8163 	beq.w	8007eee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007c28:	7b7a      	ldrb	r2, [r7, #13]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	32ae      	adds	r2, #174	; 0xae
 8007c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	6839      	ldr	r1, [r7, #0]
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	4798      	blx	r3
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c3e:	e156      	b.n	8007eee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	785b      	ldrb	r3, [r3, #1]
 8007c44:	2b03      	cmp	r3, #3
 8007c46:	d008      	beq.n	8007c5a <USBD_StdEPReq+0x9a>
 8007c48:	2b03      	cmp	r3, #3
 8007c4a:	f300 8145 	bgt.w	8007ed8 <USBD_StdEPReq+0x318>
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f000 809b 	beq.w	8007d8a <USBD_StdEPReq+0x1ca>
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d03c      	beq.n	8007cd2 <USBD_StdEPReq+0x112>
 8007c58:	e13e      	b.n	8007ed8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d002      	beq.n	8007c6c <USBD_StdEPReq+0xac>
 8007c66:	2b03      	cmp	r3, #3
 8007c68:	d016      	beq.n	8007c98 <USBD_StdEPReq+0xd8>
 8007c6a:	e02c      	b.n	8007cc6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c6c:	7bbb      	ldrb	r3, [r7, #14]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00d      	beq.n	8007c8e <USBD_StdEPReq+0xce>
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	2b80      	cmp	r3, #128	; 0x80
 8007c76:	d00a      	beq.n	8007c8e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c78:	7bbb      	ldrb	r3, [r7, #14]
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f001 f963 	bl	8008f48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c82:	2180      	movs	r1, #128	; 0x80
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f001 f95f 	bl	8008f48 <USBD_LL_StallEP>
 8007c8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c8c:	e020      	b.n	8007cd0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007c8e:	6839      	ldr	r1, [r7, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fc7a 	bl	800858a <USBD_CtlError>
              break;
 8007c96:	e01b      	b.n	8007cd0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	885b      	ldrh	r3, [r3, #2]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10e      	bne.n	8007cbe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ca0:	7bbb      	ldrb	r3, [r7, #14]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00b      	beq.n	8007cbe <USBD_StdEPReq+0xfe>
 8007ca6:	7bbb      	ldrb	r3, [r7, #14]
 8007ca8:	2b80      	cmp	r3, #128	; 0x80
 8007caa:	d008      	beq.n	8007cbe <USBD_StdEPReq+0xfe>
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	88db      	ldrh	r3, [r3, #6]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d104      	bne.n	8007cbe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cb4:	7bbb      	ldrb	r3, [r7, #14]
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f001 f945 	bl	8008f48 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fd2e 	bl	8008720 <USBD_CtlSendStatus>

              break;
 8007cc4:	e004      	b.n	8007cd0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fc5e 	bl	800858a <USBD_CtlError>
              break;
 8007cce:	bf00      	nop
          }
          break;
 8007cd0:	e107      	b.n	8007ee2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d002      	beq.n	8007ce4 <USBD_StdEPReq+0x124>
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	d016      	beq.n	8007d10 <USBD_StdEPReq+0x150>
 8007ce2:	e04b      	b.n	8007d7c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ce4:	7bbb      	ldrb	r3, [r7, #14]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00d      	beq.n	8007d06 <USBD_StdEPReq+0x146>
 8007cea:	7bbb      	ldrb	r3, [r7, #14]
 8007cec:	2b80      	cmp	r3, #128	; 0x80
 8007cee:	d00a      	beq.n	8007d06 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cf0:	7bbb      	ldrb	r3, [r7, #14]
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f001 f927 	bl	8008f48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cfa:	2180      	movs	r1, #128	; 0x80
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f001 f923 	bl	8008f48 <USBD_LL_StallEP>
 8007d02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d04:	e040      	b.n	8007d88 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007d06:	6839      	ldr	r1, [r7, #0]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fc3e 	bl	800858a <USBD_CtlError>
              break;
 8007d0e:	e03b      	b.n	8007d88 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	885b      	ldrh	r3, [r3, #2]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d136      	bne.n	8007d86 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d18:	7bbb      	ldrb	r3, [r7, #14]
 8007d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d004      	beq.n	8007d2c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d22:	7bbb      	ldrb	r3, [r7, #14]
 8007d24:	4619      	mov	r1, r3
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f001 f92d 	bl	8008f86 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fcf7 	bl	8008720 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d32:	7bbb      	ldrb	r3, [r7, #14]
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7ff fde2 	bl	8007900 <USBD_CoreFindEP>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d40:	7b7b      	ldrb	r3, [r7, #13]
 8007d42:	2bff      	cmp	r3, #255	; 0xff
 8007d44:	d01f      	beq.n	8007d86 <USBD_StdEPReq+0x1c6>
 8007d46:	7b7b      	ldrb	r3, [r7, #13]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d11c      	bne.n	8007d86 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007d4c:	7b7a      	ldrb	r2, [r7, #13]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007d54:	7b7a      	ldrb	r2, [r7, #13]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	32ae      	adds	r2, #174	; 0xae
 8007d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d010      	beq.n	8007d86 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007d64:	7b7a      	ldrb	r2, [r7, #13]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	32ae      	adds	r2, #174	; 0xae
 8007d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	4798      	blx	r3
 8007d76:	4603      	mov	r3, r0
 8007d78:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007d7a:	e004      	b.n	8007d86 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fc03 	bl	800858a <USBD_CtlError>
              break;
 8007d84:	e000      	b.n	8007d88 <USBD_StdEPReq+0x1c8>
              break;
 8007d86:	bf00      	nop
          }
          break;
 8007d88:	e0ab      	b.n	8007ee2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d002      	beq.n	8007d9c <USBD_StdEPReq+0x1dc>
 8007d96:	2b03      	cmp	r3, #3
 8007d98:	d032      	beq.n	8007e00 <USBD_StdEPReq+0x240>
 8007d9a:	e097      	b.n	8007ecc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d9c:	7bbb      	ldrb	r3, [r7, #14]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d007      	beq.n	8007db2 <USBD_StdEPReq+0x1f2>
 8007da2:	7bbb      	ldrb	r3, [r7, #14]
 8007da4:	2b80      	cmp	r3, #128	; 0x80
 8007da6:	d004      	beq.n	8007db2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fbed 	bl	800858a <USBD_CtlError>
                break;
 8007db0:	e091      	b.n	8007ed6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007db2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	da0b      	bge.n	8007dd2 <USBD_StdEPReq+0x212>
 8007dba:	7bbb      	ldrb	r3, [r7, #14]
 8007dbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4413      	add	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	3310      	adds	r3, #16
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	4413      	add	r3, r2
 8007dce:	3304      	adds	r3, #4
 8007dd0:	e00b      	b.n	8007dea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007dd2:	7bbb      	ldrb	r3, [r7, #14]
 8007dd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dd8:	4613      	mov	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	4413      	add	r3, r2
 8007de8:	3304      	adds	r3, #4
 8007dea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	2200      	movs	r2, #0
 8007df0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	2202      	movs	r2, #2
 8007df6:	4619      	mov	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fc37 	bl	800866c <USBD_CtlSendData>
              break;
 8007dfe:	e06a      	b.n	8007ed6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007e00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	da11      	bge.n	8007e2c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007e08:	7bbb      	ldrb	r3, [r7, #14]
 8007e0a:	f003 020f 	and.w	r2, r3, #15
 8007e0e:	6879      	ldr	r1, [r7, #4]
 8007e10:	4613      	mov	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	440b      	add	r3, r1
 8007e1a:	3324      	adds	r3, #36	; 0x24
 8007e1c:	881b      	ldrh	r3, [r3, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d117      	bne.n	8007e52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007e22:	6839      	ldr	r1, [r7, #0]
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fbb0 	bl	800858a <USBD_CtlError>
                  break;
 8007e2a:	e054      	b.n	8007ed6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e2c:	7bbb      	ldrb	r3, [r7, #14]
 8007e2e:	f003 020f 	and.w	r2, r3, #15
 8007e32:	6879      	ldr	r1, [r7, #4]
 8007e34:	4613      	mov	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	440b      	add	r3, r1
 8007e3e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d104      	bne.n	8007e52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fb9d 	bl	800858a <USBD_CtlError>
                  break;
 8007e50:	e041      	b.n	8007ed6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	da0b      	bge.n	8007e72 <USBD_StdEPReq+0x2b2>
 8007e5a:	7bbb      	ldrb	r3, [r7, #14]
 8007e5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e60:	4613      	mov	r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4413      	add	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	3310      	adds	r3, #16
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	3304      	adds	r3, #4
 8007e70:	e00b      	b.n	8007e8a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e72:	7bbb      	ldrb	r3, [r7, #14]
 8007e74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e78:	4613      	mov	r3, r2
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	4413      	add	r3, r2
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	4413      	add	r3, r2
 8007e88:	3304      	adds	r3, #4
 8007e8a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e8c:	7bbb      	ldrb	r3, [r7, #14]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d002      	beq.n	8007e98 <USBD_StdEPReq+0x2d8>
 8007e92:	7bbb      	ldrb	r3, [r7, #14]
 8007e94:	2b80      	cmp	r3, #128	; 0x80
 8007e96:	d103      	bne.n	8007ea0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	601a      	str	r2, [r3, #0]
 8007e9e:	e00e      	b.n	8007ebe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f001 f88d 	bl	8008fc4 <USBD_LL_IsStallEP>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d003      	beq.n	8007eb8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	e002      	b.n	8007ebe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fbd1 	bl	800866c <USBD_CtlSendData>
              break;
 8007eca:	e004      	b.n	8007ed6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 fb5b 	bl	800858a <USBD_CtlError>
              break;
 8007ed4:	bf00      	nop
          }
          break;
 8007ed6:	e004      	b.n	8007ee2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fb55 	bl	800858a <USBD_CtlError>
          break;
 8007ee0:	bf00      	nop
      }
      break;
 8007ee2:	e005      	b.n	8007ef0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fb4f 	bl	800858a <USBD_CtlError>
      break;
 8007eec:	e000      	b.n	8007ef0 <USBD_StdEPReq+0x330>
      break;
 8007eee:	bf00      	nop
  }

  return ret;
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
	...

08007efc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f06:	2300      	movs	r3, #0
 8007f08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	885b      	ldrh	r3, [r3, #2]
 8007f16:	0a1b      	lsrs	r3, r3, #8
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	2b06      	cmp	r3, #6
 8007f1e:	f200 8128 	bhi.w	8008172 <USBD_GetDescriptor+0x276>
 8007f22:	a201      	add	r2, pc, #4	; (adr r2, 8007f28 <USBD_GetDescriptor+0x2c>)
 8007f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f28:	08007f45 	.word	0x08007f45
 8007f2c:	08007f5d 	.word	0x08007f5d
 8007f30:	08007f9d 	.word	0x08007f9d
 8007f34:	08008173 	.word	0x08008173
 8007f38:	08008173 	.word	0x08008173
 8007f3c:	08008113 	.word	0x08008113
 8007f40:	0800813f 	.word	0x0800813f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	7c12      	ldrb	r2, [r2, #16]
 8007f50:	f107 0108 	add.w	r1, r7, #8
 8007f54:	4610      	mov	r0, r2
 8007f56:	4798      	blx	r3
 8007f58:	60f8      	str	r0, [r7, #12]
      break;
 8007f5a:	e112      	b.n	8008182 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	7c1b      	ldrb	r3, [r3, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10d      	bne.n	8007f80 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6c:	f107 0208 	add.w	r2, r7, #8
 8007f70:	4610      	mov	r0, r2
 8007f72:	4798      	blx	r3
 8007f74:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f7e:	e100      	b.n	8008182 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f88:	f107 0208 	add.w	r2, r7, #8
 8007f8c:	4610      	mov	r0, r2
 8007f8e:	4798      	blx	r3
 8007f90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	3301      	adds	r3, #1
 8007f96:	2202      	movs	r2, #2
 8007f98:	701a      	strb	r2, [r3, #0]
      break;
 8007f9a:	e0f2      	b.n	8008182 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	885b      	ldrh	r3, [r3, #2]
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b05      	cmp	r3, #5
 8007fa4:	f200 80ac 	bhi.w	8008100 <USBD_GetDescriptor+0x204>
 8007fa8:	a201      	add	r2, pc, #4	; (adr r2, 8007fb0 <USBD_GetDescriptor+0xb4>)
 8007faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fae:	bf00      	nop
 8007fb0:	08007fc9 	.word	0x08007fc9
 8007fb4:	08007ffd 	.word	0x08007ffd
 8007fb8:	08008031 	.word	0x08008031
 8007fbc:	08008065 	.word	0x08008065
 8007fc0:	08008099 	.word	0x08008099
 8007fc4:	080080cd 	.word	0x080080cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00b      	beq.n	8007fec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	7c12      	ldrb	r2, [r2, #16]
 8007fe0:	f107 0108 	add.w	r1, r7, #8
 8007fe4:	4610      	mov	r0, r2
 8007fe6:	4798      	blx	r3
 8007fe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fea:	e091      	b.n	8008110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 facb 	bl	800858a <USBD_CtlError>
            err++;
 8007ff4:	7afb      	ldrb	r3, [r7, #11]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	72fb      	strb	r3, [r7, #11]
          break;
 8007ffa:	e089      	b.n	8008110 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00b      	beq.n	8008020 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	7c12      	ldrb	r2, [r2, #16]
 8008014:	f107 0108 	add.w	r1, r7, #8
 8008018:	4610      	mov	r0, r2
 800801a:	4798      	blx	r3
 800801c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800801e:	e077      	b.n	8008110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008020:	6839      	ldr	r1, [r7, #0]
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fab1 	bl	800858a <USBD_CtlError>
            err++;
 8008028:	7afb      	ldrb	r3, [r7, #11]
 800802a:	3301      	adds	r3, #1
 800802c:	72fb      	strb	r3, [r7, #11]
          break;
 800802e:	e06f      	b.n	8008110 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00b      	beq.n	8008054 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	7c12      	ldrb	r2, [r2, #16]
 8008048:	f107 0108 	add.w	r1, r7, #8
 800804c:	4610      	mov	r0, r2
 800804e:	4798      	blx	r3
 8008050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008052:	e05d      	b.n	8008110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fa97 	bl	800858a <USBD_CtlError>
            err++;
 800805c:	7afb      	ldrb	r3, [r7, #11]
 800805e:	3301      	adds	r3, #1
 8008060:	72fb      	strb	r3, [r7, #11]
          break;
 8008062:	e055      	b.n	8008110 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00b      	beq.n	8008088 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	7c12      	ldrb	r2, [r2, #16]
 800807c:	f107 0108 	add.w	r1, r7, #8
 8008080:	4610      	mov	r0, r2
 8008082:	4798      	blx	r3
 8008084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008086:	e043      	b.n	8008110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fa7d 	bl	800858a <USBD_CtlError>
            err++;
 8008090:	7afb      	ldrb	r3, [r7, #11]
 8008092:	3301      	adds	r3, #1
 8008094:	72fb      	strb	r3, [r7, #11]
          break;
 8008096:	e03b      	b.n	8008110 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800809e:	695b      	ldr	r3, [r3, #20]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00b      	beq.n	80080bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080aa:	695b      	ldr	r3, [r3, #20]
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	7c12      	ldrb	r2, [r2, #16]
 80080b0:	f107 0108 	add.w	r1, r7, #8
 80080b4:	4610      	mov	r0, r2
 80080b6:	4798      	blx	r3
 80080b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ba:	e029      	b.n	8008110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080bc:	6839      	ldr	r1, [r7, #0]
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fa63 	bl	800858a <USBD_CtlError>
            err++;
 80080c4:	7afb      	ldrb	r3, [r7, #11]
 80080c6:	3301      	adds	r3, #1
 80080c8:	72fb      	strb	r3, [r7, #11]
          break;
 80080ca:	e021      	b.n	8008110 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00b      	beq.n	80080f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	7c12      	ldrb	r2, [r2, #16]
 80080e4:	f107 0108 	add.w	r1, r7, #8
 80080e8:	4610      	mov	r0, r2
 80080ea:	4798      	blx	r3
 80080ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ee:	e00f      	b.n	8008110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080f0:	6839      	ldr	r1, [r7, #0]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fa49 	bl	800858a <USBD_CtlError>
            err++;
 80080f8:	7afb      	ldrb	r3, [r7, #11]
 80080fa:	3301      	adds	r3, #1
 80080fc:	72fb      	strb	r3, [r7, #11]
          break;
 80080fe:	e007      	b.n	8008110 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008100:	6839      	ldr	r1, [r7, #0]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fa41 	bl	800858a <USBD_CtlError>
          err++;
 8008108:	7afb      	ldrb	r3, [r7, #11]
 800810a:	3301      	adds	r3, #1
 800810c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800810e:	bf00      	nop
      }
      break;
 8008110:	e037      	b.n	8008182 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	7c1b      	ldrb	r3, [r3, #16]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d109      	bne.n	800812e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008122:	f107 0208 	add.w	r2, r7, #8
 8008126:	4610      	mov	r0, r2
 8008128:	4798      	blx	r3
 800812a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800812c:	e029      	b.n	8008182 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800812e:	6839      	ldr	r1, [r7, #0]
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fa2a 	bl	800858a <USBD_CtlError>
        err++;
 8008136:	7afb      	ldrb	r3, [r7, #11]
 8008138:	3301      	adds	r3, #1
 800813a:	72fb      	strb	r3, [r7, #11]
      break;
 800813c:	e021      	b.n	8008182 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	7c1b      	ldrb	r3, [r3, #16]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10d      	bne.n	8008162 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800814c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800814e:	f107 0208 	add.w	r2, r7, #8
 8008152:	4610      	mov	r0, r2
 8008154:	4798      	blx	r3
 8008156:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	3301      	adds	r3, #1
 800815c:	2207      	movs	r2, #7
 800815e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008160:	e00f      	b.n	8008182 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008162:	6839      	ldr	r1, [r7, #0]
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fa10 	bl	800858a <USBD_CtlError>
        err++;
 800816a:	7afb      	ldrb	r3, [r7, #11]
 800816c:	3301      	adds	r3, #1
 800816e:	72fb      	strb	r3, [r7, #11]
      break;
 8008170:	e007      	b.n	8008182 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fa08 	bl	800858a <USBD_CtlError>
      err++;
 800817a:	7afb      	ldrb	r3, [r7, #11]
 800817c:	3301      	adds	r3, #1
 800817e:	72fb      	strb	r3, [r7, #11]
      break;
 8008180:	bf00      	nop
  }

  if (err != 0U)
 8008182:	7afb      	ldrb	r3, [r7, #11]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d11e      	bne.n	80081c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	88db      	ldrh	r3, [r3, #6]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d016      	beq.n	80081be <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008190:	893b      	ldrh	r3, [r7, #8]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00e      	beq.n	80081b4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	88da      	ldrh	r2, [r3, #6]
 800819a:	893b      	ldrh	r3, [r7, #8]
 800819c:	4293      	cmp	r3, r2
 800819e:	bf28      	it	cs
 80081a0:	4613      	movcs	r3, r2
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80081a6:	893b      	ldrh	r3, [r7, #8]
 80081a8:	461a      	mov	r2, r3
 80081aa:	68f9      	ldr	r1, [r7, #12]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fa5d 	bl	800866c <USBD_CtlSendData>
 80081b2:	e009      	b.n	80081c8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f9e7 	bl	800858a <USBD_CtlError>
 80081bc:	e004      	b.n	80081c8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 faae 	bl	8008720 <USBD_CtlSendStatus>
 80081c4:	e000      	b.n	80081c8 <USBD_GetDescriptor+0x2cc>
    return;
 80081c6:	bf00      	nop
  }
}
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop

080081d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	889b      	ldrh	r3, [r3, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d131      	bne.n	8008246 <USBD_SetAddress+0x76>
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	88db      	ldrh	r3, [r3, #6]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d12d      	bne.n	8008246 <USBD_SetAddress+0x76>
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	885b      	ldrh	r3, [r3, #2]
 80081ee:	2b7f      	cmp	r3, #127	; 0x7f
 80081f0:	d829      	bhi.n	8008246 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	885b      	ldrh	r3, [r3, #2]
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b03      	cmp	r3, #3
 8008208:	d104      	bne.n	8008214 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800820a:	6839      	ldr	r1, [r7, #0]
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f9bc 	bl	800858a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008212:	e01d      	b.n	8008250 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	7bfa      	ldrb	r2, [r7, #15]
 8008218:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800821c:	7bfb      	ldrb	r3, [r7, #15]
 800821e:	4619      	mov	r1, r3
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fefb 	bl	800901c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fa7a 	bl	8008720 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800822c:	7bfb      	ldrb	r3, [r7, #15]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d004      	beq.n	800823c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2202      	movs	r2, #2
 8008236:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800823a:	e009      	b.n	8008250 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008244:	e004      	b.n	8008250 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f99e 	bl	800858a <USBD_CtlError>
  }
}
 800824e:	bf00      	nop
 8008250:	bf00      	nop
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008262:	2300      	movs	r3, #0
 8008264:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	885b      	ldrh	r3, [r3, #2]
 800826a:	b2da      	uxtb	r2, r3
 800826c:	4b4e      	ldr	r3, [pc, #312]	; (80083a8 <USBD_SetConfig+0x150>)
 800826e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008270:	4b4d      	ldr	r3, [pc, #308]	; (80083a8 <USBD_SetConfig+0x150>)
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	2b01      	cmp	r3, #1
 8008276:	d905      	bls.n	8008284 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f985 	bl	800858a <USBD_CtlError>
    return USBD_FAIL;
 8008280:	2303      	movs	r3, #3
 8008282:	e08c      	b.n	800839e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800828a:	b2db      	uxtb	r3, r3
 800828c:	2b02      	cmp	r3, #2
 800828e:	d002      	beq.n	8008296 <USBD_SetConfig+0x3e>
 8008290:	2b03      	cmp	r3, #3
 8008292:	d029      	beq.n	80082e8 <USBD_SetConfig+0x90>
 8008294:	e075      	b.n	8008382 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008296:	4b44      	ldr	r3, [pc, #272]	; (80083a8 <USBD_SetConfig+0x150>)
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d020      	beq.n	80082e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800829e:	4b42      	ldr	r3, [pc, #264]	; (80083a8 <USBD_SetConfig+0x150>)
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	461a      	mov	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80082a8:	4b3f      	ldr	r3, [pc, #252]	; (80083a8 <USBD_SetConfig+0x150>)
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	4619      	mov	r1, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7fe ffe7 	bl	8007282 <USBD_SetClassConfig>
 80082b4:	4603      	mov	r3, r0
 80082b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80082b8:	7bfb      	ldrb	r3, [r7, #15]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d008      	beq.n	80082d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f962 	bl	800858a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2202      	movs	r2, #2
 80082ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80082ce:	e065      	b.n	800839c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 fa25 	bl	8008720 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2203      	movs	r2, #3
 80082da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80082de:	e05d      	b.n	800839c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fa1d 	bl	8008720 <USBD_CtlSendStatus>
      break;
 80082e6:	e059      	b.n	800839c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80082e8:	4b2f      	ldr	r3, [pc, #188]	; (80083a8 <USBD_SetConfig+0x150>)
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d112      	bne.n	8008316 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2202      	movs	r2, #2
 80082f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80082f8:	4b2b      	ldr	r3, [pc, #172]	; (80083a8 <USBD_SetConfig+0x150>)
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	461a      	mov	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008302:	4b29      	ldr	r3, [pc, #164]	; (80083a8 <USBD_SetConfig+0x150>)
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	4619      	mov	r1, r3
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f7fe ffd6 	bl	80072ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fa06 	bl	8008720 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008314:	e042      	b.n	800839c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008316:	4b24      	ldr	r3, [pc, #144]	; (80083a8 <USBD_SetConfig+0x150>)
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	461a      	mov	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	429a      	cmp	r2, r3
 8008322:	d02a      	beq.n	800837a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	b2db      	uxtb	r3, r3
 800832a:	4619      	mov	r1, r3
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f7fe ffc4 	bl	80072ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008332:	4b1d      	ldr	r3, [pc, #116]	; (80083a8 <USBD_SetConfig+0x150>)
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	461a      	mov	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800833c:	4b1a      	ldr	r3, [pc, #104]	; (80083a8 <USBD_SetConfig+0x150>)
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	4619      	mov	r1, r3
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f7fe ff9d 	bl	8007282 <USBD_SetClassConfig>
 8008348:	4603      	mov	r3, r0
 800834a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800834c:	7bfb      	ldrb	r3, [r7, #15]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00f      	beq.n	8008372 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008352:	6839      	ldr	r1, [r7, #0]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f918 	bl	800858a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	b2db      	uxtb	r3, r3
 8008360:	4619      	mov	r1, r3
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7fe ffa9 	bl	80072ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2202      	movs	r2, #2
 800836c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008370:	e014      	b.n	800839c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f9d4 	bl	8008720 <USBD_CtlSendStatus>
      break;
 8008378:	e010      	b.n	800839c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 f9d0 	bl	8008720 <USBD_CtlSendStatus>
      break;
 8008380:	e00c      	b.n	800839c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f900 	bl	800858a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800838a:	4b07      	ldr	r3, [pc, #28]	; (80083a8 <USBD_SetConfig+0x150>)
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	4619      	mov	r1, r3
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f7fe ff92 	bl	80072ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008396:	2303      	movs	r3, #3
 8008398:	73fb      	strb	r3, [r7, #15]
      break;
 800839a:	bf00      	nop
  }

  return ret;
 800839c:	7bfb      	ldrb	r3, [r7, #15]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	20009f28 	.word	0x20009f28

080083ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	88db      	ldrh	r3, [r3, #6]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d004      	beq.n	80083c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80083be:	6839      	ldr	r1, [r7, #0]
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 f8e2 	bl	800858a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80083c6:	e023      	b.n	8008410 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	dc02      	bgt.n	80083da <USBD_GetConfig+0x2e>
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	dc03      	bgt.n	80083e0 <USBD_GetConfig+0x34>
 80083d8:	e015      	b.n	8008406 <USBD_GetConfig+0x5a>
 80083da:	2b03      	cmp	r3, #3
 80083dc:	d00b      	beq.n	80083f6 <USBD_GetConfig+0x4a>
 80083de:	e012      	b.n	8008406 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	3308      	adds	r3, #8
 80083ea:	2201      	movs	r2, #1
 80083ec:	4619      	mov	r1, r3
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f93c 	bl	800866c <USBD_CtlSendData>
        break;
 80083f4:	e00c      	b.n	8008410 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	3304      	adds	r3, #4
 80083fa:	2201      	movs	r2, #1
 80083fc:	4619      	mov	r1, r3
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f934 	bl	800866c <USBD_CtlSendData>
        break;
 8008404:	e004      	b.n	8008410 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008406:	6839      	ldr	r1, [r7, #0]
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f8be 	bl	800858a <USBD_CtlError>
        break;
 800840e:	bf00      	nop
}
 8008410:	bf00      	nop
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008428:	b2db      	uxtb	r3, r3
 800842a:	3b01      	subs	r3, #1
 800842c:	2b02      	cmp	r3, #2
 800842e:	d81e      	bhi.n	800846e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	88db      	ldrh	r3, [r3, #6]
 8008434:	2b02      	cmp	r3, #2
 8008436:	d004      	beq.n	8008442 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f8a5 	bl	800858a <USBD_CtlError>
        break;
 8008440:	e01a      	b.n	8008478 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2201      	movs	r2, #1
 8008446:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800844e:	2b00      	cmp	r3, #0
 8008450:	d005      	beq.n	800845e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	f043 0202 	orr.w	r2, r3, #2
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	330c      	adds	r3, #12
 8008462:	2202      	movs	r2, #2
 8008464:	4619      	mov	r1, r3
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f900 	bl	800866c <USBD_CtlSendData>
      break;
 800846c:	e004      	b.n	8008478 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800846e:	6839      	ldr	r1, [r7, #0]
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f88a 	bl	800858a <USBD_CtlError>
      break;
 8008476:	bf00      	nop
  }
}
 8008478:	bf00      	nop
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	885b      	ldrh	r3, [r3, #2]
 800848e:	2b01      	cmp	r3, #1
 8008490:	d107      	bne.n	80084a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f940 	bl	8008720 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80084a0:	e013      	b.n	80084ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	885b      	ldrh	r3, [r3, #2]
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d10b      	bne.n	80084c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	889b      	ldrh	r3, [r3, #4]
 80084ae:	0a1b      	lsrs	r3, r3, #8
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	b2da      	uxtb	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f930 	bl	8008720 <USBD_CtlSendStatus>
}
 80084c0:	e003      	b.n	80084ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80084c2:	6839      	ldr	r1, [r7, #0]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f860 	bl	800858a <USBD_CtlError>
}
 80084ca:	bf00      	nop
 80084cc:	3708      	adds	r7, #8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b082      	sub	sp, #8
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	3b01      	subs	r3, #1
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d80b      	bhi.n	8008502 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	885b      	ldrh	r3, [r3, #2]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d10c      	bne.n	800850c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f910 	bl	8008720 <USBD_CtlSendStatus>
      }
      break;
 8008500:	e004      	b.n	800850c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f840 	bl	800858a <USBD_CtlError>
      break;
 800850a:	e000      	b.n	800850e <USBD_ClrFeature+0x3c>
      break;
 800850c:	bf00      	nop
  }
}
 800850e:	bf00      	nop
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	781a      	ldrb	r2, [r3, #0]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	3301      	adds	r3, #1
 8008530:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	781a      	ldrb	r2, [r3, #0]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	3301      	adds	r3, #1
 800853e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f7ff fa41 	bl	80079c8 <SWAPBYTE>
 8008546:	4603      	mov	r3, r0
 8008548:	461a      	mov	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	3301      	adds	r3, #1
 8008552:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	3301      	adds	r3, #1
 8008558:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f7ff fa34 	bl	80079c8 <SWAPBYTE>
 8008560:	4603      	mov	r3, r0
 8008562:	461a      	mov	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	3301      	adds	r3, #1
 800856c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	3301      	adds	r3, #1
 8008572:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f7ff fa27 	bl	80079c8 <SWAPBYTE>
 800857a:	4603      	mov	r3, r0
 800857c:	461a      	mov	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	80da      	strh	r2, [r3, #6]
}
 8008582:	bf00      	nop
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b082      	sub	sp, #8
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
 8008592:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008594:	2180      	movs	r1, #128	; 0x80
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 fcd6 	bl	8008f48 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800859c:	2100      	movs	r1, #0
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fcd2 	bl	8008f48 <USBD_LL_StallEP>
}
 80085a4:	bf00      	nop
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80085b8:	2300      	movs	r3, #0
 80085ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d036      	beq.n	8008630 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80085c6:	6938      	ldr	r0, [r7, #16]
 80085c8:	f000 f836 	bl	8008638 <USBD_GetLen>
 80085cc:	4603      	mov	r3, r0
 80085ce:	3301      	adds	r3, #1
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	005b      	lsls	r3, r3, #1
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80085da:	7dfb      	ldrb	r3, [r7, #23]
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	4413      	add	r3, r2
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	7812      	ldrb	r2, [r2, #0]
 80085e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80085e6:	7dfb      	ldrb	r3, [r7, #23]
 80085e8:	3301      	adds	r3, #1
 80085ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80085ec:	7dfb      	ldrb	r3, [r7, #23]
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	4413      	add	r3, r2
 80085f2:	2203      	movs	r2, #3
 80085f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80085f6:	7dfb      	ldrb	r3, [r7, #23]
 80085f8:	3301      	adds	r3, #1
 80085fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80085fc:	e013      	b.n	8008626 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	4413      	add	r3, r2
 8008604:	693a      	ldr	r2, [r7, #16]
 8008606:	7812      	ldrb	r2, [r2, #0]
 8008608:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	3301      	adds	r3, #1
 800860e:	613b      	str	r3, [r7, #16]
    idx++;
 8008610:	7dfb      	ldrb	r3, [r7, #23]
 8008612:	3301      	adds	r3, #1
 8008614:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008616:	7dfb      	ldrb	r3, [r7, #23]
 8008618:	68ba      	ldr	r2, [r7, #8]
 800861a:	4413      	add	r3, r2
 800861c:	2200      	movs	r2, #0
 800861e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008620:	7dfb      	ldrb	r3, [r7, #23]
 8008622:	3301      	adds	r3, #1
 8008624:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1e7      	bne.n	80085fe <USBD_GetString+0x52>
 800862e:	e000      	b.n	8008632 <USBD_GetString+0x86>
    return;
 8008630:	bf00      	nop
  }
}
 8008632:	3718      	adds	r7, #24
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008640:	2300      	movs	r3, #0
 8008642:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008648:	e005      	b.n	8008656 <USBD_GetLen+0x1e>
  {
    len++;
 800864a:	7bfb      	ldrb	r3, [r7, #15]
 800864c:	3301      	adds	r3, #1
 800864e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	3301      	adds	r3, #1
 8008654:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1f5      	bne.n	800864a <USBD_GetLen+0x12>
  }

  return len;
 800865e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008660:	4618      	mov	r0, r3
 8008662:	3714      	adds	r7, #20
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2202      	movs	r2, #2
 800867c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	2100      	movs	r1, #0
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f000 fce1 	bl	800905a <USBD_LL_Transmit>

  return USBD_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b084      	sub	sp, #16
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	60f8      	str	r0, [r7, #12]
 80086aa:	60b9      	str	r1, [r7, #8]
 80086ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	2100      	movs	r1, #0
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f000 fcd0 	bl	800905a <USBD_LL_Transmit>

  return USBD_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2203      	movs	r2, #3
 80086d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	2100      	movs	r1, #0
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f000 fcd4 	bl	800909c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b084      	sub	sp, #16
 8008702:	af00      	add	r7, sp, #0
 8008704:	60f8      	str	r0, [r7, #12]
 8008706:	60b9      	str	r1, [r7, #8]
 8008708:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	2100      	movs	r1, #0
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f000 fcc3 	bl	800909c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2204      	movs	r2, #4
 800872c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008730:	2300      	movs	r3, #0
 8008732:	2200      	movs	r2, #0
 8008734:	2100      	movs	r1, #0
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fc8f 	bl	800905a <USBD_LL_Transmit>

  return USBD_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3708      	adds	r7, #8
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b082      	sub	sp, #8
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2205      	movs	r2, #5
 8008752:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008756:	2300      	movs	r3, #0
 8008758:	2200      	movs	r2, #0
 800875a:	2100      	movs	r1, #0
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fc9d 	bl	800909c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008770:	2200      	movs	r2, #0
 8008772:	4912      	ldr	r1, [pc, #72]	; (80087bc <MX_USB_DEVICE_Init+0x50>)
 8008774:	4812      	ldr	r0, [pc, #72]	; (80087c0 <MX_USB_DEVICE_Init+0x54>)
 8008776:	f7fe fd07 	bl	8007188 <USBD_Init>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008780:	f7f8 f9bc 	bl	8000afc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008784:	490f      	ldr	r1, [pc, #60]	; (80087c4 <MX_USB_DEVICE_Init+0x58>)
 8008786:	480e      	ldr	r0, [pc, #56]	; (80087c0 <MX_USB_DEVICE_Init+0x54>)
 8008788:	f7fe fd2e 	bl	80071e8 <USBD_RegisterClass>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008792:	f7f8 f9b3 	bl	8000afc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008796:	490c      	ldr	r1, [pc, #48]	; (80087c8 <MX_USB_DEVICE_Init+0x5c>)
 8008798:	4809      	ldr	r0, [pc, #36]	; (80087c0 <MX_USB_DEVICE_Init+0x54>)
 800879a:	f7fe fc1f 	bl	8006fdc <USBD_CDC_RegisterInterface>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d001      	beq.n	80087a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80087a4:	f7f8 f9aa 	bl	8000afc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80087a8:	4805      	ldr	r0, [pc, #20]	; (80087c0 <MX_USB_DEVICE_Init+0x54>)
 80087aa:	f7fe fd53 	bl	8007254 <USBD_Start>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80087b4:	f7f8 f9a2 	bl	8000afc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80087b8:	bf00      	nop
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	200000b0 	.word	0x200000b0
 80087c0:	20009f2c 	.word	0x20009f2c
 80087c4:	2000001c 	.word	0x2000001c
 80087c8:	2000009c 	.word	0x2000009c

080087cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80087d0:	2200      	movs	r2, #0
 80087d2:	4905      	ldr	r1, [pc, #20]	; (80087e8 <CDC_Init_FS+0x1c>)
 80087d4:	4805      	ldr	r0, [pc, #20]	; (80087ec <CDC_Init_FS+0x20>)
 80087d6:	f7fe fc1b 	bl	8007010 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80087da:	4905      	ldr	r1, [pc, #20]	; (80087f0 <CDC_Init_FS+0x24>)
 80087dc:	4803      	ldr	r0, [pc, #12]	; (80087ec <CDC_Init_FS+0x20>)
 80087de:	f7fe fc39 	bl	8007054 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80087e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	2000a608 	.word	0x2000a608
 80087ec:	20009f2c 	.word	0x20009f2c
 80087f0:	2000a208 	.word	0x2000a208

080087f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80087f4:	b480      	push	{r7}
 80087f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80087f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	4603      	mov	r3, r0
 800880c:	6039      	str	r1, [r7, #0]
 800880e:	71fb      	strb	r3, [r7, #7]
 8008810:	4613      	mov	r3, r2
 8008812:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008814:	79fb      	ldrb	r3, [r7, #7]
 8008816:	2b23      	cmp	r3, #35	; 0x23
 8008818:	d84a      	bhi.n	80088b0 <CDC_Control_FS+0xac>
 800881a:	a201      	add	r2, pc, #4	; (adr r2, 8008820 <CDC_Control_FS+0x1c>)
 800881c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008820:	080088b1 	.word	0x080088b1
 8008824:	080088b1 	.word	0x080088b1
 8008828:	080088b1 	.word	0x080088b1
 800882c:	080088b1 	.word	0x080088b1
 8008830:	080088b1 	.word	0x080088b1
 8008834:	080088b1 	.word	0x080088b1
 8008838:	080088b1 	.word	0x080088b1
 800883c:	080088b1 	.word	0x080088b1
 8008840:	080088b1 	.word	0x080088b1
 8008844:	080088b1 	.word	0x080088b1
 8008848:	080088b1 	.word	0x080088b1
 800884c:	080088b1 	.word	0x080088b1
 8008850:	080088b1 	.word	0x080088b1
 8008854:	080088b1 	.word	0x080088b1
 8008858:	080088b1 	.word	0x080088b1
 800885c:	080088b1 	.word	0x080088b1
 8008860:	080088b1 	.word	0x080088b1
 8008864:	080088b1 	.word	0x080088b1
 8008868:	080088b1 	.word	0x080088b1
 800886c:	080088b1 	.word	0x080088b1
 8008870:	080088b1 	.word	0x080088b1
 8008874:	080088b1 	.word	0x080088b1
 8008878:	080088b1 	.word	0x080088b1
 800887c:	080088b1 	.word	0x080088b1
 8008880:	080088b1 	.word	0x080088b1
 8008884:	080088b1 	.word	0x080088b1
 8008888:	080088b1 	.word	0x080088b1
 800888c:	080088b1 	.word	0x080088b1
 8008890:	080088b1 	.word	0x080088b1
 8008894:	080088b1 	.word	0x080088b1
 8008898:	080088b1 	.word	0x080088b1
 800889c:	080088b1 	.word	0x080088b1
 80088a0:	080088b1 	.word	0x080088b1
 80088a4:	080088b1 	.word	0x080088b1
 80088a8:	080088b1 	.word	0x080088b1
 80088ac:	080088b1 	.word	0x080088b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80088b0:	bf00      	nop
  }

  return (USBD_OK);
 80088b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80088ca:	6879      	ldr	r1, [r7, #4]
 80088cc:	4805      	ldr	r0, [pc, #20]	; (80088e4 <CDC_Receive_FS+0x24>)
 80088ce:	f7fe fbc1 	bl	8007054 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80088d2:	4804      	ldr	r0, [pc, #16]	; (80088e4 <CDC_Receive_FS+0x24>)
 80088d4:	f7fe fc22 	bl	800711c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80088d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	20009f2c 	.word	0x20009f2c

080088e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	460b      	mov	r3, r1
 80088f2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80088f8:	4b0d      	ldr	r3, [pc, #52]	; (8008930 <CDC_Transmit_FS+0x48>)
 80088fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088fe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008906:	2b00      	cmp	r3, #0
 8008908:	d001      	beq.n	800890e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800890a:	2301      	movs	r3, #1
 800890c:	e00b      	b.n	8008926 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800890e:	887b      	ldrh	r3, [r7, #2]
 8008910:	461a      	mov	r2, r3
 8008912:	6879      	ldr	r1, [r7, #4]
 8008914:	4806      	ldr	r0, [pc, #24]	; (8008930 <CDC_Transmit_FS+0x48>)
 8008916:	f7fe fb7b 	bl	8007010 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800891a:	4805      	ldr	r0, [pc, #20]	; (8008930 <CDC_Transmit_FS+0x48>)
 800891c:	f7fe fbb8 	bl	8007090 <USBD_CDC_TransmitPacket>
 8008920:	4603      	mov	r3, r0
 8008922:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008924:	7bfb      	ldrb	r3, [r7, #15]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	20009f2c 	.word	0x20009f2c

08008934 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008934:	b480      	push	{r7}
 8008936:	b087      	sub	sp, #28
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	4613      	mov	r3, r2
 8008940:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008942:	2300      	movs	r3, #0
 8008944:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008946:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800894a:	4618      	mov	r0, r3
 800894c:	371c      	adds	r7, #28
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr
	...

08008958 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	4603      	mov	r3, r0
 8008960:	6039      	str	r1, [r7, #0]
 8008962:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	2212      	movs	r2, #18
 8008968:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800896a:	4b03      	ldr	r3, [pc, #12]	; (8008978 <USBD_FS_DeviceDescriptor+0x20>)
}
 800896c:	4618      	mov	r0, r3
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	200000cc 	.word	0x200000cc

0800897c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	4603      	mov	r3, r0
 8008984:	6039      	str	r1, [r7, #0]
 8008986:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	2204      	movs	r2, #4
 800898c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800898e:	4b03      	ldr	r3, [pc, #12]	; (800899c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008990:	4618      	mov	r0, r3
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	200000e0 	.word	0x200000e0

080089a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	4603      	mov	r3, r0
 80089a8:	6039      	str	r1, [r7, #0]
 80089aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80089ac:	79fb      	ldrb	r3, [r7, #7]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d105      	bne.n	80089be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089b2:	683a      	ldr	r2, [r7, #0]
 80089b4:	4907      	ldr	r1, [pc, #28]	; (80089d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80089b6:	4808      	ldr	r0, [pc, #32]	; (80089d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80089b8:	f7ff fdf8 	bl	80085ac <USBD_GetString>
 80089bc:	e004      	b.n	80089c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	4904      	ldr	r1, [pc, #16]	; (80089d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80089c2:	4805      	ldr	r0, [pc, #20]	; (80089d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80089c4:	f7ff fdf2 	bl	80085ac <USBD_GetString>
  }
  return USBD_StrDesc;
 80089c8:	4b02      	ldr	r3, [pc, #8]	; (80089d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	2000aa08 	.word	0x2000aa08
 80089d8:	08009b04 	.word	0x08009b04

080089dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	4603      	mov	r3, r0
 80089e4:	6039      	str	r1, [r7, #0]
 80089e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80089e8:	683a      	ldr	r2, [r7, #0]
 80089ea:	4904      	ldr	r1, [pc, #16]	; (80089fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80089ec:	4804      	ldr	r0, [pc, #16]	; (8008a00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80089ee:	f7ff fddd 	bl	80085ac <USBD_GetString>
  return USBD_StrDesc;
 80089f2:	4b02      	ldr	r3, [pc, #8]	; (80089fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	2000aa08 	.word	0x2000aa08
 8008a00:	08009b1c 	.word	0x08009b1c

08008a04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	6039      	str	r1, [r7, #0]
 8008a0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	221a      	movs	r2, #26
 8008a14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008a16:	f000 f843 	bl	8008aa0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008a1a:	4b02      	ldr	r3, [pc, #8]	; (8008a24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	200000e4 	.word	0x200000e4

08008a28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	4603      	mov	r3, r0
 8008a30:	6039      	str	r1, [r7, #0]
 8008a32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008a34:	79fb      	ldrb	r3, [r7, #7]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d105      	bne.n	8008a46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a3a:	683a      	ldr	r2, [r7, #0]
 8008a3c:	4907      	ldr	r1, [pc, #28]	; (8008a5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a3e:	4808      	ldr	r0, [pc, #32]	; (8008a60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a40:	f7ff fdb4 	bl	80085ac <USBD_GetString>
 8008a44:	e004      	b.n	8008a50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a46:	683a      	ldr	r2, [r7, #0]
 8008a48:	4904      	ldr	r1, [pc, #16]	; (8008a5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a4a:	4805      	ldr	r0, [pc, #20]	; (8008a60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a4c:	f7ff fdae 	bl	80085ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a50:	4b02      	ldr	r3, [pc, #8]	; (8008a5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	2000aa08 	.word	0x2000aa08
 8008a60:	08009b30 	.word	0x08009b30

08008a64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	6039      	str	r1, [r7, #0]
 8008a6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a70:	79fb      	ldrb	r3, [r7, #7]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d105      	bne.n	8008a82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a76:	683a      	ldr	r2, [r7, #0]
 8008a78:	4907      	ldr	r1, [pc, #28]	; (8008a98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a7a:	4808      	ldr	r0, [pc, #32]	; (8008a9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a7c:	f7ff fd96 	bl	80085ac <USBD_GetString>
 8008a80:	e004      	b.n	8008a8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a82:	683a      	ldr	r2, [r7, #0]
 8008a84:	4904      	ldr	r1, [pc, #16]	; (8008a98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a86:	4805      	ldr	r0, [pc, #20]	; (8008a9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a88:	f7ff fd90 	bl	80085ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a8c:	4b02      	ldr	r3, [pc, #8]	; (8008a98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3708      	adds	r7, #8
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	2000aa08 	.word	0x2000aa08
 8008a9c:	08009b3c 	.word	0x08009b3c

08008aa0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008aa6:	4b0f      	ldr	r3, [pc, #60]	; (8008ae4 <Get_SerialNum+0x44>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008aac:	4b0e      	ldr	r3, [pc, #56]	; (8008ae8 <Get_SerialNum+0x48>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008ab2:	4b0e      	ldr	r3, [pc, #56]	; (8008aec <Get_SerialNum+0x4c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4413      	add	r3, r2
 8008abe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d009      	beq.n	8008ada <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008ac6:	2208      	movs	r2, #8
 8008ac8:	4909      	ldr	r1, [pc, #36]	; (8008af0 <Get_SerialNum+0x50>)
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f000 f814 	bl	8008af8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ad0:	2204      	movs	r2, #4
 8008ad2:	4908      	ldr	r1, [pc, #32]	; (8008af4 <Get_SerialNum+0x54>)
 8008ad4:	68b8      	ldr	r0, [r7, #8]
 8008ad6:	f000 f80f 	bl	8008af8 <IntToUnicode>
  }
}
 8008ada:	bf00      	nop
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	1fff7a10 	.word	0x1fff7a10
 8008ae8:	1fff7a14 	.word	0x1fff7a14
 8008aec:	1fff7a18 	.word	0x1fff7a18
 8008af0:	200000e6 	.word	0x200000e6
 8008af4:	200000f6 	.word	0x200000f6

08008af8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b087      	sub	sp, #28
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	4613      	mov	r3, r2
 8008b04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008b06:	2300      	movs	r3, #0
 8008b08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	75fb      	strb	r3, [r7, #23]
 8008b0e:	e027      	b.n	8008b60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	0f1b      	lsrs	r3, r3, #28
 8008b14:	2b09      	cmp	r3, #9
 8008b16:	d80b      	bhi.n	8008b30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	0f1b      	lsrs	r3, r3, #28
 8008b1c:	b2da      	uxtb	r2, r3
 8008b1e:	7dfb      	ldrb	r3, [r7, #23]
 8008b20:	005b      	lsls	r3, r3, #1
 8008b22:	4619      	mov	r1, r3
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	440b      	add	r3, r1
 8008b28:	3230      	adds	r2, #48	; 0x30
 8008b2a:	b2d2      	uxtb	r2, r2
 8008b2c:	701a      	strb	r2, [r3, #0]
 8008b2e:	e00a      	b.n	8008b46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	0f1b      	lsrs	r3, r3, #28
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	7dfb      	ldrb	r3, [r7, #23]
 8008b38:	005b      	lsls	r3, r3, #1
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	440b      	add	r3, r1
 8008b40:	3237      	adds	r2, #55	; 0x37
 8008b42:	b2d2      	uxtb	r2, r2
 8008b44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	011b      	lsls	r3, r3, #4
 8008b4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b4c:	7dfb      	ldrb	r3, [r7, #23]
 8008b4e:	005b      	lsls	r3, r3, #1
 8008b50:	3301      	adds	r3, #1
 8008b52:	68ba      	ldr	r2, [r7, #8]
 8008b54:	4413      	add	r3, r2
 8008b56:	2200      	movs	r2, #0
 8008b58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b5a:	7dfb      	ldrb	r3, [r7, #23]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	75fb      	strb	r3, [r7, #23]
 8008b60:	7dfa      	ldrb	r2, [r7, #23]
 8008b62:	79fb      	ldrb	r3, [r7, #7]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d3d3      	bcc.n	8008b10 <IntToUnicode+0x18>
  }
}
 8008b68:	bf00      	nop
 8008b6a:	bf00      	nop
 8008b6c:	371c      	adds	r7, #28
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
	...

08008b78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b08a      	sub	sp, #40	; 0x28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b80:	f107 0314 	add.w	r3, r7, #20
 8008b84:	2200      	movs	r2, #0
 8008b86:	601a      	str	r2, [r3, #0]
 8008b88:	605a      	str	r2, [r3, #4]
 8008b8a:	609a      	str	r2, [r3, #8]
 8008b8c:	60da      	str	r2, [r3, #12]
 8008b8e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b98:	d13a      	bne.n	8008c10 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	613b      	str	r3, [r7, #16]
 8008b9e:	4b1e      	ldr	r3, [pc, #120]	; (8008c18 <HAL_PCD_MspInit+0xa0>)
 8008ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba2:	4a1d      	ldr	r2, [pc, #116]	; (8008c18 <HAL_PCD_MspInit+0xa0>)
 8008ba4:	f043 0301 	orr.w	r3, r3, #1
 8008ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8008baa:	4b1b      	ldr	r3, [pc, #108]	; (8008c18 <HAL_PCD_MspInit+0xa0>)
 8008bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bae:	f003 0301 	and.w	r3, r3, #1
 8008bb2:	613b      	str	r3, [r7, #16]
 8008bb4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008bb6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008bc8:	230a      	movs	r3, #10
 8008bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bcc:	f107 0314 	add.w	r3, r7, #20
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	4812      	ldr	r0, [pc, #72]	; (8008c1c <HAL_PCD_MspInit+0xa4>)
 8008bd4:	f7f9 fb8e 	bl	80022f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008bd8:	4b0f      	ldr	r3, [pc, #60]	; (8008c18 <HAL_PCD_MspInit+0xa0>)
 8008bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bdc:	4a0e      	ldr	r2, [pc, #56]	; (8008c18 <HAL_PCD_MspInit+0xa0>)
 8008bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008be2:	6353      	str	r3, [r2, #52]	; 0x34
 8008be4:	2300      	movs	r3, #0
 8008be6:	60fb      	str	r3, [r7, #12]
 8008be8:	4b0b      	ldr	r3, [pc, #44]	; (8008c18 <HAL_PCD_MspInit+0xa0>)
 8008bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bec:	4a0a      	ldr	r2, [pc, #40]	; (8008c18 <HAL_PCD_MspInit+0xa0>)
 8008bee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bf2:	6453      	str	r3, [r2, #68]	; 0x44
 8008bf4:	4b08      	ldr	r3, [pc, #32]	; (8008c18 <HAL_PCD_MspInit+0xa0>)
 8008bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bfc:	60fb      	str	r3, [r7, #12]
 8008bfe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c00:	2200      	movs	r2, #0
 8008c02:	2100      	movs	r1, #0
 8008c04:	2043      	movs	r0, #67	; 0x43
 8008c06:	f7f8 ffce 	bl	8001ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c0a:	2043      	movs	r0, #67	; 0x43
 8008c0c:	f7f8 ffe7 	bl	8001bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c10:	bf00      	nop
 8008c12:	3728      	adds	r7, #40	; 0x28
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	40023800 	.word	0x40023800
 8008c1c:	40020000 	.word	0x40020000

08008c20 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008c34:	4619      	mov	r1, r3
 8008c36:	4610      	mov	r0, r2
 8008c38:	f7fe fb59 	bl	80072ee <USBD_LL_SetupStage>
}
 8008c3c:	bf00      	nop
 8008c3e:	3708      	adds	r7, #8
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008c56:	78fa      	ldrb	r2, [r7, #3]
 8008c58:	6879      	ldr	r1, [r7, #4]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	00db      	lsls	r3, r3, #3
 8008c5e:	4413      	add	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	440b      	add	r3, r1
 8008c64:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	78fb      	ldrb	r3, [r7, #3]
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	f7fe fb93 	bl	8007398 <USBD_LL_DataOutStage>
}
 8008c72:	bf00      	nop
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b082      	sub	sp, #8
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
 8008c82:	460b      	mov	r3, r1
 8008c84:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008c8c:	78fa      	ldrb	r2, [r7, #3]
 8008c8e:	6879      	ldr	r1, [r7, #4]
 8008c90:	4613      	mov	r3, r2
 8008c92:	00db      	lsls	r3, r3, #3
 8008c94:	4413      	add	r3, r2
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	440b      	add	r3, r1
 8008c9a:	334c      	adds	r3, #76	; 0x4c
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	78fb      	ldrb	r3, [r7, #3]
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	f7fe fc2c 	bl	80074fe <USBD_LL_DataInStage>
}
 8008ca6:	bf00      	nop
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b082      	sub	sp, #8
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7fe fd60 	bl	8007782 <USBD_LL_SOF>
}
 8008cc2:	bf00      	nop
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b084      	sub	sp, #16
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d001      	beq.n	8008ce2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008cde:	f7f7 ff0d 	bl	8000afc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ce8:	7bfa      	ldrb	r2, [r7, #15]
 8008cea:	4611      	mov	r1, r2
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7fe fd0a 	bl	8007706 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7fe fcb2 	bl	8007662 <USBD_LL_Reset>
}
 8008cfe:	bf00      	nop
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
	...

08008d08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7fe fd05 	bl	8007726 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	6812      	ldr	r2, [r2, #0]
 8008d2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d2e:	f043 0301 	orr.w	r3, r3, #1
 8008d32:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a1b      	ldr	r3, [r3, #32]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d005      	beq.n	8008d48 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d3c:	4b04      	ldr	r3, [pc, #16]	; (8008d50 <HAL_PCD_SuspendCallback+0x48>)
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	4a03      	ldr	r2, [pc, #12]	; (8008d50 <HAL_PCD_SuspendCallback+0x48>)
 8008d42:	f043 0306 	orr.w	r3, r3, #6
 8008d46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008d48:	bf00      	nop
 8008d4a:	3708      	adds	r7, #8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	e000ed00 	.word	0xe000ed00

08008d54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7fe fcf5 	bl	8007752 <USBD_LL_Resume>
}
 8008d68:	bf00      	nop
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d82:	78fa      	ldrb	r2, [r7, #3]
 8008d84:	4611      	mov	r1, r2
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7fe fd4d 	bl	8007826 <USBD_LL_IsoOUTIncomplete>
}
 8008d8c:	bf00      	nop
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008da6:	78fa      	ldrb	r2, [r7, #3]
 8008da8:	4611      	mov	r1, r2
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fe fd09 	bl	80077c2 <USBD_LL_IsoINIncomplete>
}
 8008db0:	bf00      	nop
 8008db2:	3708      	adds	r7, #8
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fe fd5f 	bl	800788a <USBD_LL_DevConnected>
}
 8008dcc:	bf00      	nop
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fe fd5c 	bl	80078a0 <USBD_LL_DevDisconnected>
}
 8008de8:	bf00      	nop
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d13c      	bne.n	8008e7a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008e00:	4a20      	ldr	r2, [pc, #128]	; (8008e84 <USBD_LL_Init+0x94>)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a1e      	ldr	r2, [pc, #120]	; (8008e84 <USBD_LL_Init+0x94>)
 8008e0c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008e10:	4b1c      	ldr	r3, [pc, #112]	; (8008e84 <USBD_LL_Init+0x94>)
 8008e12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008e16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008e18:	4b1a      	ldr	r3, [pc, #104]	; (8008e84 <USBD_LL_Init+0x94>)
 8008e1a:	2204      	movs	r2, #4
 8008e1c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008e1e:	4b19      	ldr	r3, [pc, #100]	; (8008e84 <USBD_LL_Init+0x94>)
 8008e20:	2202      	movs	r2, #2
 8008e22:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008e24:	4b17      	ldr	r3, [pc, #92]	; (8008e84 <USBD_LL_Init+0x94>)
 8008e26:	2200      	movs	r2, #0
 8008e28:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008e2a:	4b16      	ldr	r3, [pc, #88]	; (8008e84 <USBD_LL_Init+0x94>)
 8008e2c:	2202      	movs	r2, #2
 8008e2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008e30:	4b14      	ldr	r3, [pc, #80]	; (8008e84 <USBD_LL_Init+0x94>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008e36:	4b13      	ldr	r3, [pc, #76]	; (8008e84 <USBD_LL_Init+0x94>)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008e3c:	4b11      	ldr	r3, [pc, #68]	; (8008e84 <USBD_LL_Init+0x94>)
 8008e3e:	2200      	movs	r2, #0
 8008e40:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008e42:	4b10      	ldr	r3, [pc, #64]	; (8008e84 <USBD_LL_Init+0x94>)
 8008e44:	2200      	movs	r2, #0
 8008e46:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008e48:	4b0e      	ldr	r3, [pc, #56]	; (8008e84 <USBD_LL_Init+0x94>)
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008e4e:	480d      	ldr	r0, [pc, #52]	; (8008e84 <USBD_LL_Init+0x94>)
 8008e50:	f7f9 fbd4 	bl	80025fc <HAL_PCD_Init>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d001      	beq.n	8008e5e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008e5a:	f7f7 fe4f 	bl	8000afc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008e5e:	2180      	movs	r1, #128	; 0x80
 8008e60:	4808      	ldr	r0, [pc, #32]	; (8008e84 <USBD_LL_Init+0x94>)
 8008e62:	f7fa fe2c 	bl	8003abe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008e66:	2240      	movs	r2, #64	; 0x40
 8008e68:	2100      	movs	r1, #0
 8008e6a:	4806      	ldr	r0, [pc, #24]	; (8008e84 <USBD_LL_Init+0x94>)
 8008e6c:	f7fa fde0 	bl	8003a30 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008e70:	2280      	movs	r2, #128	; 0x80
 8008e72:	2101      	movs	r1, #1
 8008e74:	4803      	ldr	r0, [pc, #12]	; (8008e84 <USBD_LL_Init+0x94>)
 8008e76:	f7fa fddb 	bl	8003a30 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3708      	adds	r7, #8
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}
 8008e84:	2000ac08 	.word	0x2000ac08

08008e88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e90:	2300      	movs	r3, #0
 8008e92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e94:	2300      	movs	r3, #0
 8008e96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7f9 fcc9 	bl	8002836 <HAL_PCD_Start>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ea8:	7bfb      	ldrb	r3, [r7, #15]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 f942 	bl	8009134 <USBD_Get_USB_Status>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008eb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b084      	sub	sp, #16
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
 8008ec6:	4608      	mov	r0, r1
 8008ec8:	4611      	mov	r1, r2
 8008eca:	461a      	mov	r2, r3
 8008ecc:	4603      	mov	r3, r0
 8008ece:	70fb      	strb	r3, [r7, #3]
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	70bb      	strb	r3, [r7, #2]
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008ee6:	78bb      	ldrb	r3, [r7, #2]
 8008ee8:	883a      	ldrh	r2, [r7, #0]
 8008eea:	78f9      	ldrb	r1, [r7, #3]
 8008eec:	f7fa f99a 	bl	8003224 <HAL_PCD_EP_Open>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ef4:	7bfb      	ldrb	r3, [r7, #15]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f000 f91c 	bl	8009134 <USBD_Get_USB_Status>
 8008efc:	4603      	mov	r3, r0
 8008efe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f00:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b084      	sub	sp, #16
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
 8008f12:	460b      	mov	r3, r1
 8008f14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f16:	2300      	movs	r3, #0
 8008f18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f24:	78fa      	ldrb	r2, [r7, #3]
 8008f26:	4611      	mov	r1, r2
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7fa f9e3 	bl	80032f4 <HAL_PCD_EP_Close>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f000 f8fd 	bl	8009134 <USBD_Get_USB_Status>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	460b      	mov	r3, r1
 8008f52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f54:	2300      	movs	r3, #0
 8008f56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f62:	78fa      	ldrb	r2, [r7, #3]
 8008f64:	4611      	mov	r1, r2
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7fa fabb 	bl	80034e2 <HAL_PCD_EP_SetStall>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 f8de 	bl	8009134 <USBD_Get_USB_Status>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b084      	sub	sp, #16
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
 8008f8e:	460b      	mov	r3, r1
 8008f90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f92:	2300      	movs	r3, #0
 8008f94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008fa0:	78fa      	ldrb	r2, [r7, #3]
 8008fa2:	4611      	mov	r1, r2
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7fa fb00 	bl	80035aa <HAL_PCD_EP_ClrStall>
 8008faa:	4603      	mov	r3, r0
 8008fac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 f8bf 	bl	8009134 <USBD_Get_USB_Status>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fba:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	460b      	mov	r3, r1
 8008fce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008fd6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008fd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	da0b      	bge.n	8008ff8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008fe0:	78fb      	ldrb	r3, [r7, #3]
 8008fe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fe6:	68f9      	ldr	r1, [r7, #12]
 8008fe8:	4613      	mov	r3, r2
 8008fea:	00db      	lsls	r3, r3, #3
 8008fec:	4413      	add	r3, r2
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	440b      	add	r3, r1
 8008ff2:	333e      	adds	r3, #62	; 0x3e
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	e00b      	b.n	8009010 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ff8:	78fb      	ldrb	r3, [r7, #3]
 8008ffa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ffe:	68f9      	ldr	r1, [r7, #12]
 8009000:	4613      	mov	r3, r2
 8009002:	00db      	lsls	r3, r3, #3
 8009004:	4413      	add	r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	440b      	add	r3, r1
 800900a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800900e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009010:	4618      	mov	r0, r3
 8009012:	3714      	adds	r7, #20
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	460b      	mov	r3, r1
 8009026:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009028:	2300      	movs	r3, #0
 800902a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800902c:	2300      	movs	r3, #0
 800902e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009036:	78fa      	ldrb	r2, [r7, #3]
 8009038:	4611      	mov	r1, r2
 800903a:	4618      	mov	r0, r3
 800903c:	f7fa f8cd 	bl	80031da <HAL_PCD_SetAddress>
 8009040:	4603      	mov	r3, r0
 8009042:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009044:	7bfb      	ldrb	r3, [r7, #15]
 8009046:	4618      	mov	r0, r3
 8009048:	f000 f874 	bl	8009134 <USBD_Get_USB_Status>
 800904c:	4603      	mov	r3, r0
 800904e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009050:	7bbb      	ldrb	r3, [r7, #14]
}
 8009052:	4618      	mov	r0, r3
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b086      	sub	sp, #24
 800905e:	af00      	add	r7, sp, #0
 8009060:	60f8      	str	r0, [r7, #12]
 8009062:	607a      	str	r2, [r7, #4]
 8009064:	603b      	str	r3, [r7, #0]
 8009066:	460b      	mov	r3, r1
 8009068:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800906e:	2300      	movs	r3, #0
 8009070:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009078:	7af9      	ldrb	r1, [r7, #11]
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	f7fa f9e6 	bl	800344e <HAL_PCD_EP_Transmit>
 8009082:	4603      	mov	r3, r0
 8009084:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009086:	7dfb      	ldrb	r3, [r7, #23]
 8009088:	4618      	mov	r0, r3
 800908a:	f000 f853 	bl	8009134 <USBD_Get_USB_Status>
 800908e:	4603      	mov	r3, r0
 8009090:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009092:	7dbb      	ldrb	r3, [r7, #22]
}
 8009094:	4618      	mov	r0, r3
 8009096:	3718      	adds	r7, #24
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b086      	sub	sp, #24
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	607a      	str	r2, [r7, #4]
 80090a6:	603b      	str	r3, [r7, #0]
 80090a8:	460b      	mov	r3, r1
 80090aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ac:	2300      	movs	r3, #0
 80090ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090b0:	2300      	movs	r3, #0
 80090b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80090ba:	7af9      	ldrb	r1, [r7, #11]
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	f7fa f962 	bl	8003388 <HAL_PCD_EP_Receive>
 80090c4:	4603      	mov	r3, r0
 80090c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090c8:	7dfb      	ldrb	r3, [r7, #23]
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 f832 	bl	8009134 <USBD_Get_USB_Status>
 80090d0:	4603      	mov	r3, r0
 80090d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3718      	adds	r7, #24
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b082      	sub	sp, #8
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	460b      	mov	r3, r1
 80090e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090f0:	78fa      	ldrb	r2, [r7, #3]
 80090f2:	4611      	mov	r1, r2
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fa f992 	bl	800341e <HAL_PCD_EP_GetRxCount>
 80090fa:	4603      	mov	r3, r0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3708      	adds	r7, #8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800910c:	4b03      	ldr	r3, [pc, #12]	; (800911c <USBD_static_malloc+0x18>)
}
 800910e:	4618      	mov	r0, r3
 8009110:	370c      	adds	r7, #12
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop
 800911c:	2000b114 	.word	0x2000b114

08009120 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]

}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	4603      	mov	r3, r0
 800913c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800913e:	2300      	movs	r3, #0
 8009140:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009142:	79fb      	ldrb	r3, [r7, #7]
 8009144:	2b03      	cmp	r3, #3
 8009146:	d817      	bhi.n	8009178 <USBD_Get_USB_Status+0x44>
 8009148:	a201      	add	r2, pc, #4	; (adr r2, 8009150 <USBD_Get_USB_Status+0x1c>)
 800914a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800914e:	bf00      	nop
 8009150:	08009161 	.word	0x08009161
 8009154:	08009167 	.word	0x08009167
 8009158:	0800916d 	.word	0x0800916d
 800915c:	08009173 	.word	0x08009173
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009160:	2300      	movs	r3, #0
 8009162:	73fb      	strb	r3, [r7, #15]
    break;
 8009164:	e00b      	b.n	800917e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009166:	2303      	movs	r3, #3
 8009168:	73fb      	strb	r3, [r7, #15]
    break;
 800916a:	e008      	b.n	800917e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800916c:	2301      	movs	r3, #1
 800916e:	73fb      	strb	r3, [r7, #15]
    break;
 8009170:	e005      	b.n	800917e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009172:	2303      	movs	r3, #3
 8009174:	73fb      	strb	r3, [r7, #15]
    break;
 8009176:	e002      	b.n	800917e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009178:	2303      	movs	r3, #3
 800917a:	73fb      	strb	r3, [r7, #15]
    break;
 800917c:	bf00      	nop
  }
  return usb_status;
 800917e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009180:	4618      	mov	r0, r3
 8009182:	3714      	adds	r7, #20
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <siprintf>:
 800918c:	b40e      	push	{r1, r2, r3}
 800918e:	b500      	push	{lr}
 8009190:	b09c      	sub	sp, #112	; 0x70
 8009192:	ab1d      	add	r3, sp, #116	; 0x74
 8009194:	9002      	str	r0, [sp, #8]
 8009196:	9006      	str	r0, [sp, #24]
 8009198:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800919c:	4809      	ldr	r0, [pc, #36]	; (80091c4 <siprintf+0x38>)
 800919e:	9107      	str	r1, [sp, #28]
 80091a0:	9104      	str	r1, [sp, #16]
 80091a2:	4909      	ldr	r1, [pc, #36]	; (80091c8 <siprintf+0x3c>)
 80091a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80091a8:	9105      	str	r1, [sp, #20]
 80091aa:	6800      	ldr	r0, [r0, #0]
 80091ac:	9301      	str	r3, [sp, #4]
 80091ae:	a902      	add	r1, sp, #8
 80091b0:	f000 f992 	bl	80094d8 <_svfiprintf_r>
 80091b4:	9b02      	ldr	r3, [sp, #8]
 80091b6:	2200      	movs	r2, #0
 80091b8:	701a      	strb	r2, [r3, #0]
 80091ba:	b01c      	add	sp, #112	; 0x70
 80091bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80091c0:	b003      	add	sp, #12
 80091c2:	4770      	bx	lr
 80091c4:	2000014c 	.word	0x2000014c
 80091c8:	ffff0208 	.word	0xffff0208

080091cc <memset>:
 80091cc:	4402      	add	r2, r0
 80091ce:	4603      	mov	r3, r0
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d100      	bne.n	80091d6 <memset+0xa>
 80091d4:	4770      	bx	lr
 80091d6:	f803 1b01 	strb.w	r1, [r3], #1
 80091da:	e7f9      	b.n	80091d0 <memset+0x4>

080091dc <__errno>:
 80091dc:	4b01      	ldr	r3, [pc, #4]	; (80091e4 <__errno+0x8>)
 80091de:	6818      	ldr	r0, [r3, #0]
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	2000014c 	.word	0x2000014c

080091e8 <__libc_init_array>:
 80091e8:	b570      	push	{r4, r5, r6, lr}
 80091ea:	4d0d      	ldr	r5, [pc, #52]	; (8009220 <__libc_init_array+0x38>)
 80091ec:	4c0d      	ldr	r4, [pc, #52]	; (8009224 <__libc_init_array+0x3c>)
 80091ee:	1b64      	subs	r4, r4, r5
 80091f0:	10a4      	asrs	r4, r4, #2
 80091f2:	2600      	movs	r6, #0
 80091f4:	42a6      	cmp	r6, r4
 80091f6:	d109      	bne.n	800920c <__libc_init_array+0x24>
 80091f8:	4d0b      	ldr	r5, [pc, #44]	; (8009228 <__libc_init_array+0x40>)
 80091fa:	4c0c      	ldr	r4, [pc, #48]	; (800922c <__libc_init_array+0x44>)
 80091fc:	f000 fc6a 	bl	8009ad4 <_init>
 8009200:	1b64      	subs	r4, r4, r5
 8009202:	10a4      	asrs	r4, r4, #2
 8009204:	2600      	movs	r6, #0
 8009206:	42a6      	cmp	r6, r4
 8009208:	d105      	bne.n	8009216 <__libc_init_array+0x2e>
 800920a:	bd70      	pop	{r4, r5, r6, pc}
 800920c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009210:	4798      	blx	r3
 8009212:	3601      	adds	r6, #1
 8009214:	e7ee      	b.n	80091f4 <__libc_init_array+0xc>
 8009216:	f855 3b04 	ldr.w	r3, [r5], #4
 800921a:	4798      	blx	r3
 800921c:	3601      	adds	r6, #1
 800921e:	e7f2      	b.n	8009206 <__libc_init_array+0x1e>
 8009220:	08009ba0 	.word	0x08009ba0
 8009224:	08009ba0 	.word	0x08009ba0
 8009228:	08009ba0 	.word	0x08009ba0
 800922c:	08009ba4 	.word	0x08009ba4

08009230 <__retarget_lock_acquire_recursive>:
 8009230:	4770      	bx	lr

08009232 <__retarget_lock_release_recursive>:
 8009232:	4770      	bx	lr

08009234 <_free_r>:
 8009234:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009236:	2900      	cmp	r1, #0
 8009238:	d044      	beq.n	80092c4 <_free_r+0x90>
 800923a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800923e:	9001      	str	r0, [sp, #4]
 8009240:	2b00      	cmp	r3, #0
 8009242:	f1a1 0404 	sub.w	r4, r1, #4
 8009246:	bfb8      	it	lt
 8009248:	18e4      	addlt	r4, r4, r3
 800924a:	f000 f8df 	bl	800940c <__malloc_lock>
 800924e:	4a1e      	ldr	r2, [pc, #120]	; (80092c8 <_free_r+0x94>)
 8009250:	9801      	ldr	r0, [sp, #4]
 8009252:	6813      	ldr	r3, [r2, #0]
 8009254:	b933      	cbnz	r3, 8009264 <_free_r+0x30>
 8009256:	6063      	str	r3, [r4, #4]
 8009258:	6014      	str	r4, [r2, #0]
 800925a:	b003      	add	sp, #12
 800925c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009260:	f000 b8da 	b.w	8009418 <__malloc_unlock>
 8009264:	42a3      	cmp	r3, r4
 8009266:	d908      	bls.n	800927a <_free_r+0x46>
 8009268:	6825      	ldr	r5, [r4, #0]
 800926a:	1961      	adds	r1, r4, r5
 800926c:	428b      	cmp	r3, r1
 800926e:	bf01      	itttt	eq
 8009270:	6819      	ldreq	r1, [r3, #0]
 8009272:	685b      	ldreq	r3, [r3, #4]
 8009274:	1949      	addeq	r1, r1, r5
 8009276:	6021      	streq	r1, [r4, #0]
 8009278:	e7ed      	b.n	8009256 <_free_r+0x22>
 800927a:	461a      	mov	r2, r3
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	b10b      	cbz	r3, 8009284 <_free_r+0x50>
 8009280:	42a3      	cmp	r3, r4
 8009282:	d9fa      	bls.n	800927a <_free_r+0x46>
 8009284:	6811      	ldr	r1, [r2, #0]
 8009286:	1855      	adds	r5, r2, r1
 8009288:	42a5      	cmp	r5, r4
 800928a:	d10b      	bne.n	80092a4 <_free_r+0x70>
 800928c:	6824      	ldr	r4, [r4, #0]
 800928e:	4421      	add	r1, r4
 8009290:	1854      	adds	r4, r2, r1
 8009292:	42a3      	cmp	r3, r4
 8009294:	6011      	str	r1, [r2, #0]
 8009296:	d1e0      	bne.n	800925a <_free_r+0x26>
 8009298:	681c      	ldr	r4, [r3, #0]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	6053      	str	r3, [r2, #4]
 800929e:	440c      	add	r4, r1
 80092a0:	6014      	str	r4, [r2, #0]
 80092a2:	e7da      	b.n	800925a <_free_r+0x26>
 80092a4:	d902      	bls.n	80092ac <_free_r+0x78>
 80092a6:	230c      	movs	r3, #12
 80092a8:	6003      	str	r3, [r0, #0]
 80092aa:	e7d6      	b.n	800925a <_free_r+0x26>
 80092ac:	6825      	ldr	r5, [r4, #0]
 80092ae:	1961      	adds	r1, r4, r5
 80092b0:	428b      	cmp	r3, r1
 80092b2:	bf04      	itt	eq
 80092b4:	6819      	ldreq	r1, [r3, #0]
 80092b6:	685b      	ldreq	r3, [r3, #4]
 80092b8:	6063      	str	r3, [r4, #4]
 80092ba:	bf04      	itt	eq
 80092bc:	1949      	addeq	r1, r1, r5
 80092be:	6021      	streq	r1, [r4, #0]
 80092c0:	6054      	str	r4, [r2, #4]
 80092c2:	e7ca      	b.n	800925a <_free_r+0x26>
 80092c4:	b003      	add	sp, #12
 80092c6:	bd30      	pop	{r4, r5, pc}
 80092c8:	2000b474 	.word	0x2000b474

080092cc <sbrk_aligned>:
 80092cc:	b570      	push	{r4, r5, r6, lr}
 80092ce:	4e0e      	ldr	r6, [pc, #56]	; (8009308 <sbrk_aligned+0x3c>)
 80092d0:	460c      	mov	r4, r1
 80092d2:	6831      	ldr	r1, [r6, #0]
 80092d4:	4605      	mov	r5, r0
 80092d6:	b911      	cbnz	r1, 80092de <sbrk_aligned+0x12>
 80092d8:	f000 fba6 	bl	8009a28 <_sbrk_r>
 80092dc:	6030      	str	r0, [r6, #0]
 80092de:	4621      	mov	r1, r4
 80092e0:	4628      	mov	r0, r5
 80092e2:	f000 fba1 	bl	8009a28 <_sbrk_r>
 80092e6:	1c43      	adds	r3, r0, #1
 80092e8:	d00a      	beq.n	8009300 <sbrk_aligned+0x34>
 80092ea:	1cc4      	adds	r4, r0, #3
 80092ec:	f024 0403 	bic.w	r4, r4, #3
 80092f0:	42a0      	cmp	r0, r4
 80092f2:	d007      	beq.n	8009304 <sbrk_aligned+0x38>
 80092f4:	1a21      	subs	r1, r4, r0
 80092f6:	4628      	mov	r0, r5
 80092f8:	f000 fb96 	bl	8009a28 <_sbrk_r>
 80092fc:	3001      	adds	r0, #1
 80092fe:	d101      	bne.n	8009304 <sbrk_aligned+0x38>
 8009300:	f04f 34ff 	mov.w	r4, #4294967295
 8009304:	4620      	mov	r0, r4
 8009306:	bd70      	pop	{r4, r5, r6, pc}
 8009308:	2000b478 	.word	0x2000b478

0800930c <_malloc_r>:
 800930c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009310:	1ccd      	adds	r5, r1, #3
 8009312:	f025 0503 	bic.w	r5, r5, #3
 8009316:	3508      	adds	r5, #8
 8009318:	2d0c      	cmp	r5, #12
 800931a:	bf38      	it	cc
 800931c:	250c      	movcc	r5, #12
 800931e:	2d00      	cmp	r5, #0
 8009320:	4607      	mov	r7, r0
 8009322:	db01      	blt.n	8009328 <_malloc_r+0x1c>
 8009324:	42a9      	cmp	r1, r5
 8009326:	d905      	bls.n	8009334 <_malloc_r+0x28>
 8009328:	230c      	movs	r3, #12
 800932a:	603b      	str	r3, [r7, #0]
 800932c:	2600      	movs	r6, #0
 800932e:	4630      	mov	r0, r6
 8009330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009334:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009408 <_malloc_r+0xfc>
 8009338:	f000 f868 	bl	800940c <__malloc_lock>
 800933c:	f8d8 3000 	ldr.w	r3, [r8]
 8009340:	461c      	mov	r4, r3
 8009342:	bb5c      	cbnz	r4, 800939c <_malloc_r+0x90>
 8009344:	4629      	mov	r1, r5
 8009346:	4638      	mov	r0, r7
 8009348:	f7ff ffc0 	bl	80092cc <sbrk_aligned>
 800934c:	1c43      	adds	r3, r0, #1
 800934e:	4604      	mov	r4, r0
 8009350:	d155      	bne.n	80093fe <_malloc_r+0xf2>
 8009352:	f8d8 4000 	ldr.w	r4, [r8]
 8009356:	4626      	mov	r6, r4
 8009358:	2e00      	cmp	r6, #0
 800935a:	d145      	bne.n	80093e8 <_malloc_r+0xdc>
 800935c:	2c00      	cmp	r4, #0
 800935e:	d048      	beq.n	80093f2 <_malloc_r+0xe6>
 8009360:	6823      	ldr	r3, [r4, #0]
 8009362:	4631      	mov	r1, r6
 8009364:	4638      	mov	r0, r7
 8009366:	eb04 0903 	add.w	r9, r4, r3
 800936a:	f000 fb5d 	bl	8009a28 <_sbrk_r>
 800936e:	4581      	cmp	r9, r0
 8009370:	d13f      	bne.n	80093f2 <_malloc_r+0xe6>
 8009372:	6821      	ldr	r1, [r4, #0]
 8009374:	1a6d      	subs	r5, r5, r1
 8009376:	4629      	mov	r1, r5
 8009378:	4638      	mov	r0, r7
 800937a:	f7ff ffa7 	bl	80092cc <sbrk_aligned>
 800937e:	3001      	adds	r0, #1
 8009380:	d037      	beq.n	80093f2 <_malloc_r+0xe6>
 8009382:	6823      	ldr	r3, [r4, #0]
 8009384:	442b      	add	r3, r5
 8009386:	6023      	str	r3, [r4, #0]
 8009388:	f8d8 3000 	ldr.w	r3, [r8]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d038      	beq.n	8009402 <_malloc_r+0xf6>
 8009390:	685a      	ldr	r2, [r3, #4]
 8009392:	42a2      	cmp	r2, r4
 8009394:	d12b      	bne.n	80093ee <_malloc_r+0xe2>
 8009396:	2200      	movs	r2, #0
 8009398:	605a      	str	r2, [r3, #4]
 800939a:	e00f      	b.n	80093bc <_malloc_r+0xb0>
 800939c:	6822      	ldr	r2, [r4, #0]
 800939e:	1b52      	subs	r2, r2, r5
 80093a0:	d41f      	bmi.n	80093e2 <_malloc_r+0xd6>
 80093a2:	2a0b      	cmp	r2, #11
 80093a4:	d917      	bls.n	80093d6 <_malloc_r+0xca>
 80093a6:	1961      	adds	r1, r4, r5
 80093a8:	42a3      	cmp	r3, r4
 80093aa:	6025      	str	r5, [r4, #0]
 80093ac:	bf18      	it	ne
 80093ae:	6059      	strne	r1, [r3, #4]
 80093b0:	6863      	ldr	r3, [r4, #4]
 80093b2:	bf08      	it	eq
 80093b4:	f8c8 1000 	streq.w	r1, [r8]
 80093b8:	5162      	str	r2, [r4, r5]
 80093ba:	604b      	str	r3, [r1, #4]
 80093bc:	4638      	mov	r0, r7
 80093be:	f104 060b 	add.w	r6, r4, #11
 80093c2:	f000 f829 	bl	8009418 <__malloc_unlock>
 80093c6:	f026 0607 	bic.w	r6, r6, #7
 80093ca:	1d23      	adds	r3, r4, #4
 80093cc:	1af2      	subs	r2, r6, r3
 80093ce:	d0ae      	beq.n	800932e <_malloc_r+0x22>
 80093d0:	1b9b      	subs	r3, r3, r6
 80093d2:	50a3      	str	r3, [r4, r2]
 80093d4:	e7ab      	b.n	800932e <_malloc_r+0x22>
 80093d6:	42a3      	cmp	r3, r4
 80093d8:	6862      	ldr	r2, [r4, #4]
 80093da:	d1dd      	bne.n	8009398 <_malloc_r+0x8c>
 80093dc:	f8c8 2000 	str.w	r2, [r8]
 80093e0:	e7ec      	b.n	80093bc <_malloc_r+0xb0>
 80093e2:	4623      	mov	r3, r4
 80093e4:	6864      	ldr	r4, [r4, #4]
 80093e6:	e7ac      	b.n	8009342 <_malloc_r+0x36>
 80093e8:	4634      	mov	r4, r6
 80093ea:	6876      	ldr	r6, [r6, #4]
 80093ec:	e7b4      	b.n	8009358 <_malloc_r+0x4c>
 80093ee:	4613      	mov	r3, r2
 80093f0:	e7cc      	b.n	800938c <_malloc_r+0x80>
 80093f2:	230c      	movs	r3, #12
 80093f4:	603b      	str	r3, [r7, #0]
 80093f6:	4638      	mov	r0, r7
 80093f8:	f000 f80e 	bl	8009418 <__malloc_unlock>
 80093fc:	e797      	b.n	800932e <_malloc_r+0x22>
 80093fe:	6025      	str	r5, [r4, #0]
 8009400:	e7dc      	b.n	80093bc <_malloc_r+0xb0>
 8009402:	605b      	str	r3, [r3, #4]
 8009404:	deff      	udf	#255	; 0xff
 8009406:	bf00      	nop
 8009408:	2000b474 	.word	0x2000b474

0800940c <__malloc_lock>:
 800940c:	4801      	ldr	r0, [pc, #4]	; (8009414 <__malloc_lock+0x8>)
 800940e:	f7ff bf0f 	b.w	8009230 <__retarget_lock_acquire_recursive>
 8009412:	bf00      	nop
 8009414:	2000b470 	.word	0x2000b470

08009418 <__malloc_unlock>:
 8009418:	4801      	ldr	r0, [pc, #4]	; (8009420 <__malloc_unlock+0x8>)
 800941a:	f7ff bf0a 	b.w	8009232 <__retarget_lock_release_recursive>
 800941e:	bf00      	nop
 8009420:	2000b470 	.word	0x2000b470

08009424 <__ssputs_r>:
 8009424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009428:	688e      	ldr	r6, [r1, #8]
 800942a:	461f      	mov	r7, r3
 800942c:	42be      	cmp	r6, r7
 800942e:	680b      	ldr	r3, [r1, #0]
 8009430:	4682      	mov	sl, r0
 8009432:	460c      	mov	r4, r1
 8009434:	4690      	mov	r8, r2
 8009436:	d82c      	bhi.n	8009492 <__ssputs_r+0x6e>
 8009438:	898a      	ldrh	r2, [r1, #12]
 800943a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800943e:	d026      	beq.n	800948e <__ssputs_r+0x6a>
 8009440:	6965      	ldr	r5, [r4, #20]
 8009442:	6909      	ldr	r1, [r1, #16]
 8009444:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009448:	eba3 0901 	sub.w	r9, r3, r1
 800944c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009450:	1c7b      	adds	r3, r7, #1
 8009452:	444b      	add	r3, r9
 8009454:	106d      	asrs	r5, r5, #1
 8009456:	429d      	cmp	r5, r3
 8009458:	bf38      	it	cc
 800945a:	461d      	movcc	r5, r3
 800945c:	0553      	lsls	r3, r2, #21
 800945e:	d527      	bpl.n	80094b0 <__ssputs_r+0x8c>
 8009460:	4629      	mov	r1, r5
 8009462:	f7ff ff53 	bl	800930c <_malloc_r>
 8009466:	4606      	mov	r6, r0
 8009468:	b360      	cbz	r0, 80094c4 <__ssputs_r+0xa0>
 800946a:	6921      	ldr	r1, [r4, #16]
 800946c:	464a      	mov	r2, r9
 800946e:	f000 faeb 	bl	8009a48 <memcpy>
 8009472:	89a3      	ldrh	r3, [r4, #12]
 8009474:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800947c:	81a3      	strh	r3, [r4, #12]
 800947e:	6126      	str	r6, [r4, #16]
 8009480:	6165      	str	r5, [r4, #20]
 8009482:	444e      	add	r6, r9
 8009484:	eba5 0509 	sub.w	r5, r5, r9
 8009488:	6026      	str	r6, [r4, #0]
 800948a:	60a5      	str	r5, [r4, #8]
 800948c:	463e      	mov	r6, r7
 800948e:	42be      	cmp	r6, r7
 8009490:	d900      	bls.n	8009494 <__ssputs_r+0x70>
 8009492:	463e      	mov	r6, r7
 8009494:	6820      	ldr	r0, [r4, #0]
 8009496:	4632      	mov	r2, r6
 8009498:	4641      	mov	r1, r8
 800949a:	f000 faab 	bl	80099f4 <memmove>
 800949e:	68a3      	ldr	r3, [r4, #8]
 80094a0:	1b9b      	subs	r3, r3, r6
 80094a2:	60a3      	str	r3, [r4, #8]
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	4433      	add	r3, r6
 80094a8:	6023      	str	r3, [r4, #0]
 80094aa:	2000      	movs	r0, #0
 80094ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094b0:	462a      	mov	r2, r5
 80094b2:	f000 fad7 	bl	8009a64 <_realloc_r>
 80094b6:	4606      	mov	r6, r0
 80094b8:	2800      	cmp	r0, #0
 80094ba:	d1e0      	bne.n	800947e <__ssputs_r+0x5a>
 80094bc:	6921      	ldr	r1, [r4, #16]
 80094be:	4650      	mov	r0, sl
 80094c0:	f7ff feb8 	bl	8009234 <_free_r>
 80094c4:	230c      	movs	r3, #12
 80094c6:	f8ca 3000 	str.w	r3, [sl]
 80094ca:	89a3      	ldrh	r3, [r4, #12]
 80094cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094d0:	81a3      	strh	r3, [r4, #12]
 80094d2:	f04f 30ff 	mov.w	r0, #4294967295
 80094d6:	e7e9      	b.n	80094ac <__ssputs_r+0x88>

080094d8 <_svfiprintf_r>:
 80094d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094dc:	4698      	mov	r8, r3
 80094de:	898b      	ldrh	r3, [r1, #12]
 80094e0:	061b      	lsls	r3, r3, #24
 80094e2:	b09d      	sub	sp, #116	; 0x74
 80094e4:	4607      	mov	r7, r0
 80094e6:	460d      	mov	r5, r1
 80094e8:	4614      	mov	r4, r2
 80094ea:	d50e      	bpl.n	800950a <_svfiprintf_r+0x32>
 80094ec:	690b      	ldr	r3, [r1, #16]
 80094ee:	b963      	cbnz	r3, 800950a <_svfiprintf_r+0x32>
 80094f0:	2140      	movs	r1, #64	; 0x40
 80094f2:	f7ff ff0b 	bl	800930c <_malloc_r>
 80094f6:	6028      	str	r0, [r5, #0]
 80094f8:	6128      	str	r0, [r5, #16]
 80094fa:	b920      	cbnz	r0, 8009506 <_svfiprintf_r+0x2e>
 80094fc:	230c      	movs	r3, #12
 80094fe:	603b      	str	r3, [r7, #0]
 8009500:	f04f 30ff 	mov.w	r0, #4294967295
 8009504:	e0d0      	b.n	80096a8 <_svfiprintf_r+0x1d0>
 8009506:	2340      	movs	r3, #64	; 0x40
 8009508:	616b      	str	r3, [r5, #20]
 800950a:	2300      	movs	r3, #0
 800950c:	9309      	str	r3, [sp, #36]	; 0x24
 800950e:	2320      	movs	r3, #32
 8009510:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009514:	f8cd 800c 	str.w	r8, [sp, #12]
 8009518:	2330      	movs	r3, #48	; 0x30
 800951a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80096c0 <_svfiprintf_r+0x1e8>
 800951e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009522:	f04f 0901 	mov.w	r9, #1
 8009526:	4623      	mov	r3, r4
 8009528:	469a      	mov	sl, r3
 800952a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800952e:	b10a      	cbz	r2, 8009534 <_svfiprintf_r+0x5c>
 8009530:	2a25      	cmp	r2, #37	; 0x25
 8009532:	d1f9      	bne.n	8009528 <_svfiprintf_r+0x50>
 8009534:	ebba 0b04 	subs.w	fp, sl, r4
 8009538:	d00b      	beq.n	8009552 <_svfiprintf_r+0x7a>
 800953a:	465b      	mov	r3, fp
 800953c:	4622      	mov	r2, r4
 800953e:	4629      	mov	r1, r5
 8009540:	4638      	mov	r0, r7
 8009542:	f7ff ff6f 	bl	8009424 <__ssputs_r>
 8009546:	3001      	adds	r0, #1
 8009548:	f000 80a9 	beq.w	800969e <_svfiprintf_r+0x1c6>
 800954c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800954e:	445a      	add	r2, fp
 8009550:	9209      	str	r2, [sp, #36]	; 0x24
 8009552:	f89a 3000 	ldrb.w	r3, [sl]
 8009556:	2b00      	cmp	r3, #0
 8009558:	f000 80a1 	beq.w	800969e <_svfiprintf_r+0x1c6>
 800955c:	2300      	movs	r3, #0
 800955e:	f04f 32ff 	mov.w	r2, #4294967295
 8009562:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009566:	f10a 0a01 	add.w	sl, sl, #1
 800956a:	9304      	str	r3, [sp, #16]
 800956c:	9307      	str	r3, [sp, #28]
 800956e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009572:	931a      	str	r3, [sp, #104]	; 0x68
 8009574:	4654      	mov	r4, sl
 8009576:	2205      	movs	r2, #5
 8009578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800957c:	4850      	ldr	r0, [pc, #320]	; (80096c0 <_svfiprintf_r+0x1e8>)
 800957e:	f7f6 fe37 	bl	80001f0 <memchr>
 8009582:	9a04      	ldr	r2, [sp, #16]
 8009584:	b9d8      	cbnz	r0, 80095be <_svfiprintf_r+0xe6>
 8009586:	06d0      	lsls	r0, r2, #27
 8009588:	bf44      	itt	mi
 800958a:	2320      	movmi	r3, #32
 800958c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009590:	0711      	lsls	r1, r2, #28
 8009592:	bf44      	itt	mi
 8009594:	232b      	movmi	r3, #43	; 0x2b
 8009596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800959a:	f89a 3000 	ldrb.w	r3, [sl]
 800959e:	2b2a      	cmp	r3, #42	; 0x2a
 80095a0:	d015      	beq.n	80095ce <_svfiprintf_r+0xf6>
 80095a2:	9a07      	ldr	r2, [sp, #28]
 80095a4:	4654      	mov	r4, sl
 80095a6:	2000      	movs	r0, #0
 80095a8:	f04f 0c0a 	mov.w	ip, #10
 80095ac:	4621      	mov	r1, r4
 80095ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095b2:	3b30      	subs	r3, #48	; 0x30
 80095b4:	2b09      	cmp	r3, #9
 80095b6:	d94d      	bls.n	8009654 <_svfiprintf_r+0x17c>
 80095b8:	b1b0      	cbz	r0, 80095e8 <_svfiprintf_r+0x110>
 80095ba:	9207      	str	r2, [sp, #28]
 80095bc:	e014      	b.n	80095e8 <_svfiprintf_r+0x110>
 80095be:	eba0 0308 	sub.w	r3, r0, r8
 80095c2:	fa09 f303 	lsl.w	r3, r9, r3
 80095c6:	4313      	orrs	r3, r2
 80095c8:	9304      	str	r3, [sp, #16]
 80095ca:	46a2      	mov	sl, r4
 80095cc:	e7d2      	b.n	8009574 <_svfiprintf_r+0x9c>
 80095ce:	9b03      	ldr	r3, [sp, #12]
 80095d0:	1d19      	adds	r1, r3, #4
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	9103      	str	r1, [sp, #12]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	bfbb      	ittet	lt
 80095da:	425b      	neglt	r3, r3
 80095dc:	f042 0202 	orrlt.w	r2, r2, #2
 80095e0:	9307      	strge	r3, [sp, #28]
 80095e2:	9307      	strlt	r3, [sp, #28]
 80095e4:	bfb8      	it	lt
 80095e6:	9204      	strlt	r2, [sp, #16]
 80095e8:	7823      	ldrb	r3, [r4, #0]
 80095ea:	2b2e      	cmp	r3, #46	; 0x2e
 80095ec:	d10c      	bne.n	8009608 <_svfiprintf_r+0x130>
 80095ee:	7863      	ldrb	r3, [r4, #1]
 80095f0:	2b2a      	cmp	r3, #42	; 0x2a
 80095f2:	d134      	bne.n	800965e <_svfiprintf_r+0x186>
 80095f4:	9b03      	ldr	r3, [sp, #12]
 80095f6:	1d1a      	adds	r2, r3, #4
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	9203      	str	r2, [sp, #12]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	bfb8      	it	lt
 8009600:	f04f 33ff 	movlt.w	r3, #4294967295
 8009604:	3402      	adds	r4, #2
 8009606:	9305      	str	r3, [sp, #20]
 8009608:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80096d0 <_svfiprintf_r+0x1f8>
 800960c:	7821      	ldrb	r1, [r4, #0]
 800960e:	2203      	movs	r2, #3
 8009610:	4650      	mov	r0, sl
 8009612:	f7f6 fded 	bl	80001f0 <memchr>
 8009616:	b138      	cbz	r0, 8009628 <_svfiprintf_r+0x150>
 8009618:	9b04      	ldr	r3, [sp, #16]
 800961a:	eba0 000a 	sub.w	r0, r0, sl
 800961e:	2240      	movs	r2, #64	; 0x40
 8009620:	4082      	lsls	r2, r0
 8009622:	4313      	orrs	r3, r2
 8009624:	3401      	adds	r4, #1
 8009626:	9304      	str	r3, [sp, #16]
 8009628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800962c:	4825      	ldr	r0, [pc, #148]	; (80096c4 <_svfiprintf_r+0x1ec>)
 800962e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009632:	2206      	movs	r2, #6
 8009634:	f7f6 fddc 	bl	80001f0 <memchr>
 8009638:	2800      	cmp	r0, #0
 800963a:	d038      	beq.n	80096ae <_svfiprintf_r+0x1d6>
 800963c:	4b22      	ldr	r3, [pc, #136]	; (80096c8 <_svfiprintf_r+0x1f0>)
 800963e:	bb1b      	cbnz	r3, 8009688 <_svfiprintf_r+0x1b0>
 8009640:	9b03      	ldr	r3, [sp, #12]
 8009642:	3307      	adds	r3, #7
 8009644:	f023 0307 	bic.w	r3, r3, #7
 8009648:	3308      	adds	r3, #8
 800964a:	9303      	str	r3, [sp, #12]
 800964c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800964e:	4433      	add	r3, r6
 8009650:	9309      	str	r3, [sp, #36]	; 0x24
 8009652:	e768      	b.n	8009526 <_svfiprintf_r+0x4e>
 8009654:	fb0c 3202 	mla	r2, ip, r2, r3
 8009658:	460c      	mov	r4, r1
 800965a:	2001      	movs	r0, #1
 800965c:	e7a6      	b.n	80095ac <_svfiprintf_r+0xd4>
 800965e:	2300      	movs	r3, #0
 8009660:	3401      	adds	r4, #1
 8009662:	9305      	str	r3, [sp, #20]
 8009664:	4619      	mov	r1, r3
 8009666:	f04f 0c0a 	mov.w	ip, #10
 800966a:	4620      	mov	r0, r4
 800966c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009670:	3a30      	subs	r2, #48	; 0x30
 8009672:	2a09      	cmp	r2, #9
 8009674:	d903      	bls.n	800967e <_svfiprintf_r+0x1a6>
 8009676:	2b00      	cmp	r3, #0
 8009678:	d0c6      	beq.n	8009608 <_svfiprintf_r+0x130>
 800967a:	9105      	str	r1, [sp, #20]
 800967c:	e7c4      	b.n	8009608 <_svfiprintf_r+0x130>
 800967e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009682:	4604      	mov	r4, r0
 8009684:	2301      	movs	r3, #1
 8009686:	e7f0      	b.n	800966a <_svfiprintf_r+0x192>
 8009688:	ab03      	add	r3, sp, #12
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	462a      	mov	r2, r5
 800968e:	4b0f      	ldr	r3, [pc, #60]	; (80096cc <_svfiprintf_r+0x1f4>)
 8009690:	a904      	add	r1, sp, #16
 8009692:	4638      	mov	r0, r7
 8009694:	f3af 8000 	nop.w
 8009698:	1c42      	adds	r2, r0, #1
 800969a:	4606      	mov	r6, r0
 800969c:	d1d6      	bne.n	800964c <_svfiprintf_r+0x174>
 800969e:	89ab      	ldrh	r3, [r5, #12]
 80096a0:	065b      	lsls	r3, r3, #25
 80096a2:	f53f af2d 	bmi.w	8009500 <_svfiprintf_r+0x28>
 80096a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096a8:	b01d      	add	sp, #116	; 0x74
 80096aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ae:	ab03      	add	r3, sp, #12
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	462a      	mov	r2, r5
 80096b4:	4b05      	ldr	r3, [pc, #20]	; (80096cc <_svfiprintf_r+0x1f4>)
 80096b6:	a904      	add	r1, sp, #16
 80096b8:	4638      	mov	r0, r7
 80096ba:	f000 f879 	bl	80097b0 <_printf_i>
 80096be:	e7eb      	b.n	8009698 <_svfiprintf_r+0x1c0>
 80096c0:	08009b64 	.word	0x08009b64
 80096c4:	08009b6e 	.word	0x08009b6e
 80096c8:	00000000 	.word	0x00000000
 80096cc:	08009425 	.word	0x08009425
 80096d0:	08009b6a 	.word	0x08009b6a

080096d4 <_printf_common>:
 80096d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096d8:	4616      	mov	r6, r2
 80096da:	4699      	mov	r9, r3
 80096dc:	688a      	ldr	r2, [r1, #8]
 80096de:	690b      	ldr	r3, [r1, #16]
 80096e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096e4:	4293      	cmp	r3, r2
 80096e6:	bfb8      	it	lt
 80096e8:	4613      	movlt	r3, r2
 80096ea:	6033      	str	r3, [r6, #0]
 80096ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096f0:	4607      	mov	r7, r0
 80096f2:	460c      	mov	r4, r1
 80096f4:	b10a      	cbz	r2, 80096fa <_printf_common+0x26>
 80096f6:	3301      	adds	r3, #1
 80096f8:	6033      	str	r3, [r6, #0]
 80096fa:	6823      	ldr	r3, [r4, #0]
 80096fc:	0699      	lsls	r1, r3, #26
 80096fe:	bf42      	ittt	mi
 8009700:	6833      	ldrmi	r3, [r6, #0]
 8009702:	3302      	addmi	r3, #2
 8009704:	6033      	strmi	r3, [r6, #0]
 8009706:	6825      	ldr	r5, [r4, #0]
 8009708:	f015 0506 	ands.w	r5, r5, #6
 800970c:	d106      	bne.n	800971c <_printf_common+0x48>
 800970e:	f104 0a19 	add.w	sl, r4, #25
 8009712:	68e3      	ldr	r3, [r4, #12]
 8009714:	6832      	ldr	r2, [r6, #0]
 8009716:	1a9b      	subs	r3, r3, r2
 8009718:	42ab      	cmp	r3, r5
 800971a:	dc26      	bgt.n	800976a <_printf_common+0x96>
 800971c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009720:	1e13      	subs	r3, r2, #0
 8009722:	6822      	ldr	r2, [r4, #0]
 8009724:	bf18      	it	ne
 8009726:	2301      	movne	r3, #1
 8009728:	0692      	lsls	r2, r2, #26
 800972a:	d42b      	bmi.n	8009784 <_printf_common+0xb0>
 800972c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009730:	4649      	mov	r1, r9
 8009732:	4638      	mov	r0, r7
 8009734:	47c0      	blx	r8
 8009736:	3001      	adds	r0, #1
 8009738:	d01e      	beq.n	8009778 <_printf_common+0xa4>
 800973a:	6823      	ldr	r3, [r4, #0]
 800973c:	6922      	ldr	r2, [r4, #16]
 800973e:	f003 0306 	and.w	r3, r3, #6
 8009742:	2b04      	cmp	r3, #4
 8009744:	bf02      	ittt	eq
 8009746:	68e5      	ldreq	r5, [r4, #12]
 8009748:	6833      	ldreq	r3, [r6, #0]
 800974a:	1aed      	subeq	r5, r5, r3
 800974c:	68a3      	ldr	r3, [r4, #8]
 800974e:	bf0c      	ite	eq
 8009750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009754:	2500      	movne	r5, #0
 8009756:	4293      	cmp	r3, r2
 8009758:	bfc4      	itt	gt
 800975a:	1a9b      	subgt	r3, r3, r2
 800975c:	18ed      	addgt	r5, r5, r3
 800975e:	2600      	movs	r6, #0
 8009760:	341a      	adds	r4, #26
 8009762:	42b5      	cmp	r5, r6
 8009764:	d11a      	bne.n	800979c <_printf_common+0xc8>
 8009766:	2000      	movs	r0, #0
 8009768:	e008      	b.n	800977c <_printf_common+0xa8>
 800976a:	2301      	movs	r3, #1
 800976c:	4652      	mov	r2, sl
 800976e:	4649      	mov	r1, r9
 8009770:	4638      	mov	r0, r7
 8009772:	47c0      	blx	r8
 8009774:	3001      	adds	r0, #1
 8009776:	d103      	bne.n	8009780 <_printf_common+0xac>
 8009778:	f04f 30ff 	mov.w	r0, #4294967295
 800977c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009780:	3501      	adds	r5, #1
 8009782:	e7c6      	b.n	8009712 <_printf_common+0x3e>
 8009784:	18e1      	adds	r1, r4, r3
 8009786:	1c5a      	adds	r2, r3, #1
 8009788:	2030      	movs	r0, #48	; 0x30
 800978a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800978e:	4422      	add	r2, r4
 8009790:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009794:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009798:	3302      	adds	r3, #2
 800979a:	e7c7      	b.n	800972c <_printf_common+0x58>
 800979c:	2301      	movs	r3, #1
 800979e:	4622      	mov	r2, r4
 80097a0:	4649      	mov	r1, r9
 80097a2:	4638      	mov	r0, r7
 80097a4:	47c0      	blx	r8
 80097a6:	3001      	adds	r0, #1
 80097a8:	d0e6      	beq.n	8009778 <_printf_common+0xa4>
 80097aa:	3601      	adds	r6, #1
 80097ac:	e7d9      	b.n	8009762 <_printf_common+0x8e>
	...

080097b0 <_printf_i>:
 80097b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097b4:	7e0f      	ldrb	r7, [r1, #24]
 80097b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80097b8:	2f78      	cmp	r7, #120	; 0x78
 80097ba:	4691      	mov	r9, r2
 80097bc:	4680      	mov	r8, r0
 80097be:	460c      	mov	r4, r1
 80097c0:	469a      	mov	sl, r3
 80097c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80097c6:	d807      	bhi.n	80097d8 <_printf_i+0x28>
 80097c8:	2f62      	cmp	r7, #98	; 0x62
 80097ca:	d80a      	bhi.n	80097e2 <_printf_i+0x32>
 80097cc:	2f00      	cmp	r7, #0
 80097ce:	f000 80d4 	beq.w	800997a <_printf_i+0x1ca>
 80097d2:	2f58      	cmp	r7, #88	; 0x58
 80097d4:	f000 80c0 	beq.w	8009958 <_printf_i+0x1a8>
 80097d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80097e0:	e03a      	b.n	8009858 <_printf_i+0xa8>
 80097e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80097e6:	2b15      	cmp	r3, #21
 80097e8:	d8f6      	bhi.n	80097d8 <_printf_i+0x28>
 80097ea:	a101      	add	r1, pc, #4	; (adr r1, 80097f0 <_printf_i+0x40>)
 80097ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097f0:	08009849 	.word	0x08009849
 80097f4:	0800985d 	.word	0x0800985d
 80097f8:	080097d9 	.word	0x080097d9
 80097fc:	080097d9 	.word	0x080097d9
 8009800:	080097d9 	.word	0x080097d9
 8009804:	080097d9 	.word	0x080097d9
 8009808:	0800985d 	.word	0x0800985d
 800980c:	080097d9 	.word	0x080097d9
 8009810:	080097d9 	.word	0x080097d9
 8009814:	080097d9 	.word	0x080097d9
 8009818:	080097d9 	.word	0x080097d9
 800981c:	08009961 	.word	0x08009961
 8009820:	08009889 	.word	0x08009889
 8009824:	0800991b 	.word	0x0800991b
 8009828:	080097d9 	.word	0x080097d9
 800982c:	080097d9 	.word	0x080097d9
 8009830:	08009983 	.word	0x08009983
 8009834:	080097d9 	.word	0x080097d9
 8009838:	08009889 	.word	0x08009889
 800983c:	080097d9 	.word	0x080097d9
 8009840:	080097d9 	.word	0x080097d9
 8009844:	08009923 	.word	0x08009923
 8009848:	682b      	ldr	r3, [r5, #0]
 800984a:	1d1a      	adds	r2, r3, #4
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	602a      	str	r2, [r5, #0]
 8009850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009858:	2301      	movs	r3, #1
 800985a:	e09f      	b.n	800999c <_printf_i+0x1ec>
 800985c:	6820      	ldr	r0, [r4, #0]
 800985e:	682b      	ldr	r3, [r5, #0]
 8009860:	0607      	lsls	r7, r0, #24
 8009862:	f103 0104 	add.w	r1, r3, #4
 8009866:	6029      	str	r1, [r5, #0]
 8009868:	d501      	bpl.n	800986e <_printf_i+0xbe>
 800986a:	681e      	ldr	r6, [r3, #0]
 800986c:	e003      	b.n	8009876 <_printf_i+0xc6>
 800986e:	0646      	lsls	r6, r0, #25
 8009870:	d5fb      	bpl.n	800986a <_printf_i+0xba>
 8009872:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009876:	2e00      	cmp	r6, #0
 8009878:	da03      	bge.n	8009882 <_printf_i+0xd2>
 800987a:	232d      	movs	r3, #45	; 0x2d
 800987c:	4276      	negs	r6, r6
 800987e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009882:	485a      	ldr	r0, [pc, #360]	; (80099ec <_printf_i+0x23c>)
 8009884:	230a      	movs	r3, #10
 8009886:	e012      	b.n	80098ae <_printf_i+0xfe>
 8009888:	682b      	ldr	r3, [r5, #0]
 800988a:	6820      	ldr	r0, [r4, #0]
 800988c:	1d19      	adds	r1, r3, #4
 800988e:	6029      	str	r1, [r5, #0]
 8009890:	0605      	lsls	r5, r0, #24
 8009892:	d501      	bpl.n	8009898 <_printf_i+0xe8>
 8009894:	681e      	ldr	r6, [r3, #0]
 8009896:	e002      	b.n	800989e <_printf_i+0xee>
 8009898:	0641      	lsls	r1, r0, #25
 800989a:	d5fb      	bpl.n	8009894 <_printf_i+0xe4>
 800989c:	881e      	ldrh	r6, [r3, #0]
 800989e:	4853      	ldr	r0, [pc, #332]	; (80099ec <_printf_i+0x23c>)
 80098a0:	2f6f      	cmp	r7, #111	; 0x6f
 80098a2:	bf0c      	ite	eq
 80098a4:	2308      	moveq	r3, #8
 80098a6:	230a      	movne	r3, #10
 80098a8:	2100      	movs	r1, #0
 80098aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80098ae:	6865      	ldr	r5, [r4, #4]
 80098b0:	60a5      	str	r5, [r4, #8]
 80098b2:	2d00      	cmp	r5, #0
 80098b4:	bfa2      	ittt	ge
 80098b6:	6821      	ldrge	r1, [r4, #0]
 80098b8:	f021 0104 	bicge.w	r1, r1, #4
 80098bc:	6021      	strge	r1, [r4, #0]
 80098be:	b90e      	cbnz	r6, 80098c4 <_printf_i+0x114>
 80098c0:	2d00      	cmp	r5, #0
 80098c2:	d04b      	beq.n	800995c <_printf_i+0x1ac>
 80098c4:	4615      	mov	r5, r2
 80098c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80098ca:	fb03 6711 	mls	r7, r3, r1, r6
 80098ce:	5dc7      	ldrb	r7, [r0, r7]
 80098d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80098d4:	4637      	mov	r7, r6
 80098d6:	42bb      	cmp	r3, r7
 80098d8:	460e      	mov	r6, r1
 80098da:	d9f4      	bls.n	80098c6 <_printf_i+0x116>
 80098dc:	2b08      	cmp	r3, #8
 80098de:	d10b      	bne.n	80098f8 <_printf_i+0x148>
 80098e0:	6823      	ldr	r3, [r4, #0]
 80098e2:	07de      	lsls	r6, r3, #31
 80098e4:	d508      	bpl.n	80098f8 <_printf_i+0x148>
 80098e6:	6923      	ldr	r3, [r4, #16]
 80098e8:	6861      	ldr	r1, [r4, #4]
 80098ea:	4299      	cmp	r1, r3
 80098ec:	bfde      	ittt	le
 80098ee:	2330      	movle	r3, #48	; 0x30
 80098f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80098f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80098f8:	1b52      	subs	r2, r2, r5
 80098fa:	6122      	str	r2, [r4, #16]
 80098fc:	f8cd a000 	str.w	sl, [sp]
 8009900:	464b      	mov	r3, r9
 8009902:	aa03      	add	r2, sp, #12
 8009904:	4621      	mov	r1, r4
 8009906:	4640      	mov	r0, r8
 8009908:	f7ff fee4 	bl	80096d4 <_printf_common>
 800990c:	3001      	adds	r0, #1
 800990e:	d14a      	bne.n	80099a6 <_printf_i+0x1f6>
 8009910:	f04f 30ff 	mov.w	r0, #4294967295
 8009914:	b004      	add	sp, #16
 8009916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800991a:	6823      	ldr	r3, [r4, #0]
 800991c:	f043 0320 	orr.w	r3, r3, #32
 8009920:	6023      	str	r3, [r4, #0]
 8009922:	4833      	ldr	r0, [pc, #204]	; (80099f0 <_printf_i+0x240>)
 8009924:	2778      	movs	r7, #120	; 0x78
 8009926:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800992a:	6823      	ldr	r3, [r4, #0]
 800992c:	6829      	ldr	r1, [r5, #0]
 800992e:	061f      	lsls	r7, r3, #24
 8009930:	f851 6b04 	ldr.w	r6, [r1], #4
 8009934:	d402      	bmi.n	800993c <_printf_i+0x18c>
 8009936:	065f      	lsls	r7, r3, #25
 8009938:	bf48      	it	mi
 800993a:	b2b6      	uxthmi	r6, r6
 800993c:	07df      	lsls	r7, r3, #31
 800993e:	bf48      	it	mi
 8009940:	f043 0320 	orrmi.w	r3, r3, #32
 8009944:	6029      	str	r1, [r5, #0]
 8009946:	bf48      	it	mi
 8009948:	6023      	strmi	r3, [r4, #0]
 800994a:	b91e      	cbnz	r6, 8009954 <_printf_i+0x1a4>
 800994c:	6823      	ldr	r3, [r4, #0]
 800994e:	f023 0320 	bic.w	r3, r3, #32
 8009952:	6023      	str	r3, [r4, #0]
 8009954:	2310      	movs	r3, #16
 8009956:	e7a7      	b.n	80098a8 <_printf_i+0xf8>
 8009958:	4824      	ldr	r0, [pc, #144]	; (80099ec <_printf_i+0x23c>)
 800995a:	e7e4      	b.n	8009926 <_printf_i+0x176>
 800995c:	4615      	mov	r5, r2
 800995e:	e7bd      	b.n	80098dc <_printf_i+0x12c>
 8009960:	682b      	ldr	r3, [r5, #0]
 8009962:	6826      	ldr	r6, [r4, #0]
 8009964:	6961      	ldr	r1, [r4, #20]
 8009966:	1d18      	adds	r0, r3, #4
 8009968:	6028      	str	r0, [r5, #0]
 800996a:	0635      	lsls	r5, r6, #24
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	d501      	bpl.n	8009974 <_printf_i+0x1c4>
 8009970:	6019      	str	r1, [r3, #0]
 8009972:	e002      	b.n	800997a <_printf_i+0x1ca>
 8009974:	0670      	lsls	r0, r6, #25
 8009976:	d5fb      	bpl.n	8009970 <_printf_i+0x1c0>
 8009978:	8019      	strh	r1, [r3, #0]
 800997a:	2300      	movs	r3, #0
 800997c:	6123      	str	r3, [r4, #16]
 800997e:	4615      	mov	r5, r2
 8009980:	e7bc      	b.n	80098fc <_printf_i+0x14c>
 8009982:	682b      	ldr	r3, [r5, #0]
 8009984:	1d1a      	adds	r2, r3, #4
 8009986:	602a      	str	r2, [r5, #0]
 8009988:	681d      	ldr	r5, [r3, #0]
 800998a:	6862      	ldr	r2, [r4, #4]
 800998c:	2100      	movs	r1, #0
 800998e:	4628      	mov	r0, r5
 8009990:	f7f6 fc2e 	bl	80001f0 <memchr>
 8009994:	b108      	cbz	r0, 800999a <_printf_i+0x1ea>
 8009996:	1b40      	subs	r0, r0, r5
 8009998:	6060      	str	r0, [r4, #4]
 800999a:	6863      	ldr	r3, [r4, #4]
 800999c:	6123      	str	r3, [r4, #16]
 800999e:	2300      	movs	r3, #0
 80099a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099a4:	e7aa      	b.n	80098fc <_printf_i+0x14c>
 80099a6:	6923      	ldr	r3, [r4, #16]
 80099a8:	462a      	mov	r2, r5
 80099aa:	4649      	mov	r1, r9
 80099ac:	4640      	mov	r0, r8
 80099ae:	47d0      	blx	sl
 80099b0:	3001      	adds	r0, #1
 80099b2:	d0ad      	beq.n	8009910 <_printf_i+0x160>
 80099b4:	6823      	ldr	r3, [r4, #0]
 80099b6:	079b      	lsls	r3, r3, #30
 80099b8:	d413      	bmi.n	80099e2 <_printf_i+0x232>
 80099ba:	68e0      	ldr	r0, [r4, #12]
 80099bc:	9b03      	ldr	r3, [sp, #12]
 80099be:	4298      	cmp	r0, r3
 80099c0:	bfb8      	it	lt
 80099c2:	4618      	movlt	r0, r3
 80099c4:	e7a6      	b.n	8009914 <_printf_i+0x164>
 80099c6:	2301      	movs	r3, #1
 80099c8:	4632      	mov	r2, r6
 80099ca:	4649      	mov	r1, r9
 80099cc:	4640      	mov	r0, r8
 80099ce:	47d0      	blx	sl
 80099d0:	3001      	adds	r0, #1
 80099d2:	d09d      	beq.n	8009910 <_printf_i+0x160>
 80099d4:	3501      	adds	r5, #1
 80099d6:	68e3      	ldr	r3, [r4, #12]
 80099d8:	9903      	ldr	r1, [sp, #12]
 80099da:	1a5b      	subs	r3, r3, r1
 80099dc:	42ab      	cmp	r3, r5
 80099de:	dcf2      	bgt.n	80099c6 <_printf_i+0x216>
 80099e0:	e7eb      	b.n	80099ba <_printf_i+0x20a>
 80099e2:	2500      	movs	r5, #0
 80099e4:	f104 0619 	add.w	r6, r4, #25
 80099e8:	e7f5      	b.n	80099d6 <_printf_i+0x226>
 80099ea:	bf00      	nop
 80099ec:	08009b75 	.word	0x08009b75
 80099f0:	08009b86 	.word	0x08009b86

080099f4 <memmove>:
 80099f4:	4288      	cmp	r0, r1
 80099f6:	b510      	push	{r4, lr}
 80099f8:	eb01 0402 	add.w	r4, r1, r2
 80099fc:	d902      	bls.n	8009a04 <memmove+0x10>
 80099fe:	4284      	cmp	r4, r0
 8009a00:	4623      	mov	r3, r4
 8009a02:	d807      	bhi.n	8009a14 <memmove+0x20>
 8009a04:	1e43      	subs	r3, r0, #1
 8009a06:	42a1      	cmp	r1, r4
 8009a08:	d008      	beq.n	8009a1c <memmove+0x28>
 8009a0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a12:	e7f8      	b.n	8009a06 <memmove+0x12>
 8009a14:	4402      	add	r2, r0
 8009a16:	4601      	mov	r1, r0
 8009a18:	428a      	cmp	r2, r1
 8009a1a:	d100      	bne.n	8009a1e <memmove+0x2a>
 8009a1c:	bd10      	pop	{r4, pc}
 8009a1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a26:	e7f7      	b.n	8009a18 <memmove+0x24>

08009a28 <_sbrk_r>:
 8009a28:	b538      	push	{r3, r4, r5, lr}
 8009a2a:	4d06      	ldr	r5, [pc, #24]	; (8009a44 <_sbrk_r+0x1c>)
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	4604      	mov	r4, r0
 8009a30:	4608      	mov	r0, r1
 8009a32:	602b      	str	r3, [r5, #0]
 8009a34:	f7f7 f9c8 	bl	8000dc8 <_sbrk>
 8009a38:	1c43      	adds	r3, r0, #1
 8009a3a:	d102      	bne.n	8009a42 <_sbrk_r+0x1a>
 8009a3c:	682b      	ldr	r3, [r5, #0]
 8009a3e:	b103      	cbz	r3, 8009a42 <_sbrk_r+0x1a>
 8009a40:	6023      	str	r3, [r4, #0]
 8009a42:	bd38      	pop	{r3, r4, r5, pc}
 8009a44:	2000b46c 	.word	0x2000b46c

08009a48 <memcpy>:
 8009a48:	440a      	add	r2, r1
 8009a4a:	4291      	cmp	r1, r2
 8009a4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a50:	d100      	bne.n	8009a54 <memcpy+0xc>
 8009a52:	4770      	bx	lr
 8009a54:	b510      	push	{r4, lr}
 8009a56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a5e:	4291      	cmp	r1, r2
 8009a60:	d1f9      	bne.n	8009a56 <memcpy+0xe>
 8009a62:	bd10      	pop	{r4, pc}

08009a64 <_realloc_r>:
 8009a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a68:	4680      	mov	r8, r0
 8009a6a:	4614      	mov	r4, r2
 8009a6c:	460e      	mov	r6, r1
 8009a6e:	b921      	cbnz	r1, 8009a7a <_realloc_r+0x16>
 8009a70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a74:	4611      	mov	r1, r2
 8009a76:	f7ff bc49 	b.w	800930c <_malloc_r>
 8009a7a:	b92a      	cbnz	r2, 8009a88 <_realloc_r+0x24>
 8009a7c:	f7ff fbda 	bl	8009234 <_free_r>
 8009a80:	4625      	mov	r5, r4
 8009a82:	4628      	mov	r0, r5
 8009a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a88:	f000 f81b 	bl	8009ac2 <_malloc_usable_size_r>
 8009a8c:	4284      	cmp	r4, r0
 8009a8e:	4607      	mov	r7, r0
 8009a90:	d802      	bhi.n	8009a98 <_realloc_r+0x34>
 8009a92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a96:	d812      	bhi.n	8009abe <_realloc_r+0x5a>
 8009a98:	4621      	mov	r1, r4
 8009a9a:	4640      	mov	r0, r8
 8009a9c:	f7ff fc36 	bl	800930c <_malloc_r>
 8009aa0:	4605      	mov	r5, r0
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	d0ed      	beq.n	8009a82 <_realloc_r+0x1e>
 8009aa6:	42bc      	cmp	r4, r7
 8009aa8:	4622      	mov	r2, r4
 8009aaa:	4631      	mov	r1, r6
 8009aac:	bf28      	it	cs
 8009aae:	463a      	movcs	r2, r7
 8009ab0:	f7ff ffca 	bl	8009a48 <memcpy>
 8009ab4:	4631      	mov	r1, r6
 8009ab6:	4640      	mov	r0, r8
 8009ab8:	f7ff fbbc 	bl	8009234 <_free_r>
 8009abc:	e7e1      	b.n	8009a82 <_realloc_r+0x1e>
 8009abe:	4635      	mov	r5, r6
 8009ac0:	e7df      	b.n	8009a82 <_realloc_r+0x1e>

08009ac2 <_malloc_usable_size_r>:
 8009ac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ac6:	1f18      	subs	r0, r3, #4
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	bfbc      	itt	lt
 8009acc:	580b      	ldrlt	r3, [r1, r0]
 8009ace:	18c0      	addlt	r0, r0, r3
 8009ad0:	4770      	bx	lr
	...

08009ad4 <_init>:
 8009ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad6:	bf00      	nop
 8009ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ada:	bc08      	pop	{r3}
 8009adc:	469e      	mov	lr, r3
 8009ade:	4770      	bx	lr

08009ae0 <_fini>:
 8009ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae2:	bf00      	nop
 8009ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ae6:	bc08      	pop	{r3}
 8009ae8:	469e      	mov	lr, r3
 8009aea:	4770      	bx	lr
